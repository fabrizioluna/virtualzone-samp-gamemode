/*

GAMEMODE CRÉDITOS:
- Programador: Aléks
- Maper: Cuban_0222/BAD_BOY

2014

Versión 0.1 - 17 de Mayo del 2017
- Terminado el DeathMatch modo Individual
- Terminado el Contador de Tiempo de un partida
- Terminado el Sistema de Creador de Mapas DeathMatch(no gangzones)
- Reinicio con tiempo establecido
- Sistema de Últimos Diez Reportes hechos por jugadores
- Mute y Jail por tiempo
- Limpieza en el Gamemode
- Top de Jugadores(MySQL)


*/

#include <a_samp>
#include <a_mysql>
#include <progress2>
#include <sscanf2>
#include <YSI\y_commands>
#include <YSI\y_ini>
#include <dini>
#include <YSI\y_iterate>
#include <YSI\y_timers>
#include <streamer>
#include <OnPlayerPause>
#define MP 50
#define JugadoresNecesariosDM 1
#define MAX_SURVIVAL_PARAMS 20
#define MAX_REPORTES 11
#define CLANES_MAX 50 //Clanes máximos

//Rangos Nombre
new RangoNombreTD[12][] =
{
	{"       Rango: Prospecto"},
	{"        Rango: Iniciado"},
	{"  Rango: Semiprofesional"},
	{"      Rango: Profesional"},
	{"        Rango: Maestro"},
	{"        Rango: Superpro"},
	{"         Rango: Demente"},
	{"      Rango: Desquisiado"},
	{"      Rango: Destructor"},
	{"         Rango: Leyenda"},
	{"Rango: Legendario Negro"},
	{"  Rango: Legendario Oro"}
};

new RangosClans[][] =
{
    "Miembro", "Sargento", "Teniente", "SubLíder", "Líder"
};

//Conexión a la Base de Datos:
#define MySQL_Servidor "localhost"
#define MySQL_Usuario "root"
#define MySQL_BD "virtualzone_database"
#define MySQL_Clave ""
new Conexion,
	queryx[800],
	NombreEvento[20],
	Float:mxx,
	Float:myy,
	Float:mzz,
	Float:maa,
	Float:mxx2,
	Float:myy2,
	Float:mzz2,
	Float:maa2,
	Float:mxx3,
	Float:myy3,
	Float:mzz3,
	Float:maa3,
	AmmoSurvival[MAX_SURVIVAL_PARAMS][MAX_SURVIVAL_PARAMS],
	ArmaSurvival[MAX_SURVIVAL_PARAMS][MAX_SURVIVAL_PARAMS],
	Float:SurvivalPosx[MAX_SURVIVAL_PARAMS],
	Float:SurvivalPosy[MAX_SURVIVAL_PARAMS],
	Float:SurvivalPosz[MAX_SURVIVAL_PARAMS],
	PlayerText:SurvivalInfo[MP],
	PlayerText:SurvivalInfo2[MP],
	PlayerText:SurvivalInfo3[MP],
	NameBolsa[30],
	mint,
	mworld,
	//mmp,
	msvv,
	mmk,
	mme,
	//mtm,
	tmdm,
	Text3D:MochilaLabel[MAX_SURVIVAL_PARAMS],
	MochilaObjecto[MAX_SURVIVAL_PARAMS],
	bool:DeathMatch,
	bool:JugadorEnDMM[MP],
	bool:MostrarEstadisticas,
	bool:MapaIniciado,
	JugadoresDentro = 0,
	JugadoresEntraron = 0,
	MapRandomDM = 0,
	KillsEnMapaDM[MP],
	PlayerText:TOPTD0[MP],
	PlayerText:TOPTD1[MP],
	PlayerText:TOPTD2[MP],
	PlayerText:DMInfo[MP],
	PlayerText:TiempoDMContador[MP],
	JugadorSpecDM[MP],
	Digito1,
	Digito2,
	Digito1R,
	Digito2R,
	BolsaTimer[MAX_SURVIVAL_PARAMS],
	bool:JugadorEnMSP[MP],
	Timer:FinalizarMapai,
	Timer:MREX,
	stringTime,
	stringTime2,
	NombreMapa[30],
	cSurvival,
	cIndividual,
	cEquipos,
	cMaximoPlayers,
	bool:EstaEditandoMapa[MP],
	Float:cx,
	Float:cy,
	Float:cz,
	Float:ca,
	cint,
	Float:cx2,
	Float:cy2,
	Float:cz2,
	Float:ca2,
	Float:cx3,
	Float:cy3,
	Float:cz3,
	Float:ca3,
	bool:EstaEditandoPos1[MP],
	bool:EstaEditandoPos2[MP],
	bool:EstaEditandoPos3[MP],
	cMaximoKills,
	cTiempoLimite,
	POn1[MP],
	POn2[MP],
	POn3[MP],
	MensajeErrorPlayerDM,
	MapaTerminoBien = 0,
	NombreCreadorDM[30];

enum rankingEnum
{
    player_Score,
    player_ID
}

AntiDeAMX()
{
   new a[][] =
   {
      "Unarmed (Fist)",
      "Brass K"
   };
   #pragma unused a
}

#pragma tabsize 0

//Defines
#define funcion%0(%1) \
	forward%0(%1); public%0(%1)

#if !defined isnull
    #define isnull(%1) ((!(%1[0])) || (((%1[0]) == '\1') && (!(%1[1]))))
#endif

#define MAX_EQUIPOS     (2)
#define EQUIPO_ROJO        (0)
#define EQUIPO_AZUL        (1)
#define MERDM        (0)
#define MEADM        (1)

#define MAX_ZONE 4
#define MAX_DUELOS 10
#define STRING_CORTO 50
#define STRING_GRANDE 120
#define STRING_MUYGRANDE 160
#define EGN "ClanZonas/%d.ini"
#define Nombre "VirtualZone"
#define MAX_STRINGS 160
#define AutosMaximosPorJugador 1
#define TDShow TextDrawShowForPlayer
#define TDHide TextDrawHideForPlayer
#define PTDShow PlayerTextDrawShow
#define PTDHide PlayerTextDrawHide
#define PTDString PlayerTextDrawSetString
#define MensajeJugador( SendClientMessage(playerid,
#define SCM( SendClientMessage(playerid,
#define AutosMaximosPorJugador 1
#define TSlsD 12
#define TSsfD 13
#define TSlvD 14
#define PATH "/Usuarios/%s.ini"
#define MAX_GVSB 2 //Máximo de kills a realizar evento

//Sistema Autos
#define DIALOGOAUTOSCOMPRAR 4466

//RACHA
#define Multikills 5
#define DevilKill 10
#define MonsterKill 30
#define HolyShit 50

//VIGILAR
#define ADMIN_SPEC_TYPE_NONE 	0
#define ADMIN_SPEC_TYPE_PLAYER 	1
#define ADMIN_SPEC_TYPE_VEHICLE 2

//CLANES
#define DLG_TOP_PLAYERS 1500
#define DLG_TOP_CLANESK 1502
#define DLG_TOP_CLANESM 1503
#define DLG_TOP_CLANESR 1504
#define DLG_TOP_CLANESC 1505
#define DLG_PLY_INFO 1506
#define DLG_CLAN_INFO 1507
#define CLAN_ADMINISTRAR 1991
#define CLAN_ADMINISTRAR2 1992
#define CLAN_ADMINISTRAR3 1993
#define CLAN_ADMINISTRAR4 1994
#define CLAN_ADMINISTRAR5 1995
#define CLAN_ADMINISTRAR6 1996

#define MAX_PLAYERS_CLAN_MIEMBROS 21
#define MAX_PLAYERS_CLAN_MIEMBROS_SINRANGO 20

#define MAX_DATOS 3000     //NÚMERO DE DATOS QUE SE GUARDARÁN PARA LOS TOPS.
#define MAX_TOP_PLAYERS 10 //LUGARES QUE SE MOSTRARÁN EN EL TOP PLAYERS
#define MAX_TOP_CLANES 10  //LUGARES QUE SE MOSTRARÁN EN EL TOP CLANES

#define REGISTRO 1
#define INGRESO 2
#define COLORESXD 666

#define COMANDOS 2099
#define COMANDOS2 2200
#define COMANDOS3 2322
#define COMANDOS4 2433

//CLAN
#define CCNOMBRE 725
#define CCTAG 726
#define CCINVITACION 727
#define CCSKIN 728
#define CCASCENDER 711
#define CCASCENDERP2 712
#define CCASCENDER1 714
#define CCASCENDERP3 715
#define ColorClanList 729
#define ColorClanList1 730
#define ColorClanList2 731
#define ColorClanList3 732
#define ColorClanList4 733
#define ColorClanList5 734
#define ColorClanList6 735
#define ColorClanList7 736
#define ColorClanList8 737
#define ColorClanList9 738
#define ColorClanList10 739

#define MENU_TELEPORT1 145
#define MENU_TELEPORT2 146
#define MENU_TELEPORT3 147
#define MENU_TELEPORT4 148
#define MENU_TELEPORT5 149
#define MENU_TELEPORT6 150
#define MENU_TELEPORT7 151
#define MENU_TELEPORT8 1520

//CARMAS
#define MENU_CARMAS0 7201
#define MENU_CARMAS_ELEGIR0 7280
#define MENU_CARMAS_ELEGIR1 7281
#define MENU_CARMAS_ELEGIR2 7282
#define MENU_CARMAS_ELEGIR0S 7286
#define MENU_CARMAS_ELEGIR1S 7287
#define MENU_CARMAS_ELEGIR2S 7288
#define MENU_CARMAS_ELEGIR3S 7289
#define MENU_CARMAS_ELEGIR4S 7290
#define MENU_CARMAS_ELEGIR5S 7291
#define MENU_CARMAS_ELEGIR6S 7292
#define MENU_CARMAS_ELEGIR7S 7293
#define MENU_CARMAS_ELEGIR8S 7294
#define MENU_CARMAS_ELEGIR9S 7295
#define MENU_CARMAS_ELEGIR10S 7296
#define MENU_CARMAS_ELEGIR11S 7297
#define MENU_CARMAS_ELEGIR12S 7298
#define MENU_CARMAS_ELEGIR13S 7299
#define MENU_CARMAS_ELEGIR14S 7310

//Vahiculos
#define TOTAL_ITEMS         207
#define SELECTION_ITEMS 	21
#define ITEMS_PER_LINE  	7

#define HEADER_TEXT "Vehiculos"
#define NEXT_TEXT   "Siguiente"
#define PREV_TEXT   "Atr"a_a"s"

#define DIALOG_BASE_X   	75.0
#define DIALOG_BASE_Y   	130.0
#define DIALOG_WIDTH    	550.0
#define DIALOG_HEIGHT   	180.0
#define SPRITE_DIM_X    	60.0
#define SPRITE_DIM_Y    	70.0

#define GUARDAR_AUTO0 6754
#define GUARDAR_AUTO1 6755
#define GUARDAR_AUTO2 6756
#define GUARDAR_AUTO3 6757

#define MENU_SACAR0 1342
#define MENU_SACAR1 1343
#define MENU_SACAR2 1344

#define GUARDAR_AUTO_DIALOGO1_1 6868
#define GUARDAR_AUTO_DIALOGO1_2 6869
#define GUARDAR_AUTO_DIALOGO1_3 6870

#define MENU_AUTOS0 5651
#define MENU_AUTOS1 5653
#define MENU_AUTOS2 5652

#define SELECCIONO_OPCION0 5732
#define SELECCIONO_OPCION1 5733
#define SELECCIONO_OPCION2 5734
#define SELECCIONO_OPCION3 5735
#define SELECCIONO_OPCION4 5736

#define SELECCIONO_OPCION0_VACIO2 3404
#define SELECCIONO_OPCION1_VACIO2 3405
#define SELECCIONO_OPCION2_VACIO2 3406
#define SELECCIONO_OPCION3_VACIO2 3407

#define SELECCIONO_OPCION0_VACIO3 3408
#define SELECCIONO_OPCION1_VACIO3 3409
#define SELECCIONO_OPCION2_VACIO3 3410
#define SELECCIONO_OPCION3_VACIO3 3411

#define ERROR_001 6774
#define ERROR_002 6775
#define ERROR_003 6776

#define AYUDAEVENTO 1672

//NIVELES VIP

//Colores
#define MARILLO 0xFAFA44FF
#define Morado2 0x9473FFFF
#define Celeste 0x00FFFFFF
#define VerdeClaro 0x00FF00FF
#define Blanco 0xFFFFFFAA
#define Wadmin 0x00FF4FFF
#define Rojo 0xFF0000FF
#define Negro 0x000000FE
#define Verde 0x00E200FF
#define Azul 0x0017FFFF
#define Caca 0x9EFF00FF
#define Rosa 0xFF00FFFF
#define CoVip 0x00FFB3FF
#define Gris 0x00000080
#define Morado 0x9D1DFFFF
#define DialogID 102
#define Azul2 0x005FFFFF
#define Gris3 0x919AB9FF
#define Caca3 0xFF0000AA
#define Gris4 0xC0C0C0AA
#define Ama23 0xFFC100FF
#define VerdexD 0x77FF30FF
#define VERDE 0x95FF00FF
#define AzulClaro10 0x00A8FFFF
#define Naranja    0xFF8040FF
#define Amarillo    0xFFFF00AA
#define Avisoo 0xFFFFB1FF

//Sistema de Gangzones By Ryders
// Message Colors
#define COLOR_ERROR 			0xFB0000FF
#define COLOR_MSG               0xFFFFFF00

// GangZone Colors
#define BLACK                  	0xFF00008D

// Max Zones You Can Create
#define MAX_ZONES               100

//Acentos
#define a_ia "¯" //Este signo es de ¿
#define a_xa "^" //Este signo es de !
#define a_ñ "®"
#define a_a "˜"
#define a_e "ž"
#define a_i "¢"
#define a_o "¦"
#define a_u "ª"
#define CA "{00F0FF}"
#define version "0.1beta"

#define ForEach(%0,%1) \
	for(%0 = 0; %0 != %1; %0++) if(IsPlayerConnected(%0) && !IsPlayerNPC(%0))

#define Loop(%0,%1) \
	for(new %0 = 0; %0 != %1; %0++)


#define IsOdd(%1) \
	((%1) & 1)

#define ConvertTime(%0,%1,%2,%3,%4) \
	new \
	    Float: %0 = floatdiv(%1, 60000) \
	;\
	%2 = floatround(%0, floatround_tozero); \
	%3 = floatround(floatmul(%0 - %2, 60), floatround_tozero); \
	%4 = floatround(floatmul(floatmul(%0 - %2, 60) - %3, 1000), floatround_tozero)

#define MAX_RACE_CHECKPOINTS_EACH_RACE \
 	120

#define MAX_RACES \
 	10

#define COUNT_DOWN_TILL_RACE_START \
	60 // seconds

#define MAX_RACE_TIME \
	300 // seconds

#define RACE_CHECKPOINT_SIZE \
	12.0

#define DEBUG_RACE \
0

//#define RACE_IN_OTHER_WORLD // Uncomment to enable

native WP_Hash(buffer[],len,const str[]);

new MensajeAsesinato[][] =
{
	{"_~n~_~n~_~n~_~n~_~n~_~n~_~n~~r~~h~~h~"a_xa"ProMaster!"},
	{"_~n~_~n~_~n~_~n~_~n~_~n~_~n~~r~~h~~h~"a_xa"Pwned!"},
	{"_~n~_~n~_~n~_~n~_~n~_~n~_~n~~y~~h~~h~"a_xa"Newfag!"},
	{"_~n~_~n~_~n~_~n~_~n~_~n~_~n~~g~~h~~h~"a_xa"Buena punteria!"},
	{"_~n~_~n~_~n~_~n~_~n~_~n~_~n~~p~~h~~h~"a_xa"Que bestia!"},
	{"_~n~_~n~_~n~_~n~_~n~_~n~_~n~~p~~h~~h~"a_xa"Easy!"},
	{"_~n~_~n~_~n~_~n~_~n~_~n~_~n~~r~~h~~h~"a_xa"Asesinado!"}
};

new ColoresAlAzar[78] =
{
	0x02BEFFFF, 0xFF5BFFFF, 0xFF00FFFF, 0xFF5106FF, 0x01FF06FF, 0x0141FFFF, 0x00D9FFFF, 0xFFFF00FF,
	0x64C800FF, 0x820039FF, 0xD500B5FF, 0xD50068FF, 0x620068FF, 0x62FA68FF, 0x00FF60FF, 0x00FFCBFF,
	0xFF0000FF, 0x720000FF, 0x9D9B9AFF, 0x9D3F9AFF, 0xD13F9AFF, 0xD13F4EFF, 0x44008AFF, 0x8800FEFF,
	0xAD00FEFF, 0x6B99FEFF, 0x6BDCFEFF, 0x6BDCB1FF, 0x0FDCB1FF, 0x0F77B1FF, 0x0F772EFF, 0xC41F2EFF,
	0xE0F32EFF,0x18F71FFF,0x4B8987FF,0x491B9EFF,0x829DC7FF,0xBCE635FF,0xCEA6DFFF,0x20D4ADFF,0x2D74FDFF,
	0x3C1C0DFF,
	0x12D6D4FF,0x48C000FF,0x2A51E2FF,0xE3AC12FF,0xFC42A8FF,0x2FC827FF,0x1A30BFFF,0xB740C2FF,0x42ACF5FF,
	0x2FD9DEFF,0xFAFB71FF,0x05D1CDFF,0xC471BDFF,0x94436EFF,0xC1F7ECFF,0xCE79EEFF,0xBD1EF2FF,0x93B7E4FF,
	0x3214AAFF,0x184D3BFF,0xAE4B99FF,0x7E49D7FF,0x4C436EFF,0xFA24CCFF,0xCE76BEFF,0xA04E0AFF,0x9F945CFF,
	0xDCDE3DFF,0x10C9C5FF,0x70524DFF,0x0BE472FF,0x8A2CD7FF,0x6152C2FF,0xCF72A9FF,0xE59338FF,
	0xEEDC2DFF,
};

new Float:PBSpawnsRand[][10] =
{
	{-1068.613403, 1095.381347, 1343.111572, 154.684478}, //PB1
	{-1038.589355, 1023.279296, 1343.274169, 50.071975}, //PB3
	{-969.539306, 1051.753906, 1345.049438, 17.691385}, //PB5
	{-976.203308, 1094.650390, 1344.973022, 107.598014}, //PB6
	{-1020.118286, 1099.586669, 1342.236938, 206.194488}, //PB7
	{-1112.690429, 1095.008544, 1341.843750, 239.617080}, //PB8
	{-1135.800170, 1067.237182, 1345.790771, 171.769287}, //PB9
	{-1130.348510, 1022.865661, 1345.711791, 272.036926}//PB10
};

new Float:Spawns[][16] =
{
    {1913.959228, -1358.506347, 13.605768, 137.347366},
	{-2030.434448, 156.722152, 33.938232, 271.768585},
	{948.934448, 2108.401855, 19.693887, 1.153009},
	{1343.281372, 2597.719482, 10.820312, 176.869491},
	{2087.555664, 2186.733642, 10.820312, 186.225326},
	{2012.302124, 1515.481079, 10.820312, 275.150177},
	{2446.410888, 1287.487670, 10.820312, 177.099151},
	{-1951.136352, 688.013977, 46.562500, 0.000000},
	{-2757.511962, 395.519836, 4.335937, 272.752502},
	{-2021.890991, -43.710788, 35.352428, 182.908599},
	{-1423.436279, -169.720870, 14.148437, 317.494415},
	{1307.457641, 1252.407714, 10.820312, 353.964294},
	{146.200149, -1951.344604, 3.773437, 0.857749},
	{1496.652465, -1659.034545, 14.046875, 1.087505},
	{2010.505371, -2339.766845, 13.546875, 100.746742},
	{952.796752, -923.542297, 43.953048, 180.479705}
};

//JUEGOS:
new Float:M1[][3] =
{
    {2229.8593, 1574.2285, 999.9691},
    {2205.5898, 1551.5343, 1008.2758},
    {2205.3046, 1608.8111, 999.9714}
};

new Float:M2[][5] =
{
    {297.4888,1855.4918,7.8281},
    {329.5979,1855.2028,7.8281},
    {329.9565,1839.9592,7.8281},
    {276.6844,1824.8076,7.8356},
    {277.8188,1839.5803,7.8281}
};

new Float:RW2[][4] =
{
    {1529.5043,751.8945,11.0234},
    {1456.8391,751.3527,11.0234},
    {1484.7006,738.2916,11.0234},
    {1514.7483,763.3951,11.0234}
};

new Float:SNP[][6] =
{
    {2225.1621,1110.0464,78.6713},
    {2189.1899,1090.0317,63.1041},
    {2275.1506,1111.3280,71.7794},
    {2258.5515,1064.0291,78.8155},
    {2208.3469,1062.8398,71.5221},
    {2232.6392,1090.4379,75.4585}
};

new Float:RC2[][4] =
{
    {2676.9014,861.0694,13.1997},
    {2592.4116,809.2664,5.3158},
    {2687.1738,826.6005,21.7658},
    {2576.2397,791.0685,16.7969}
};

new Float:MS1[][3] =
{
    {1961.0046,1594.8114,75.7188},
    {1895.1584,1628.4960,75.7188},
    {1961.0775,1662.4941,75.7188}
};

//DM1 - ww y rw
new Float:ZDM1[][7] =
{
	{1417.137817, -46.361778, 1000.928039, 41.075721},////DM1
	{1360.836547, -46.924446, 1000.924560, 296.672210},////DM1a
	{1360.234741, 6.006913, 1000.921875, 227.654724},////DM1b
	{1402.209472, 5.941300, 1000.906250, 175.306503},////DM1c
	{1361.283447, -20.990013, 1000.921875, 270.936737},////DM1d
	{1387.762695, -44.705429, 1000.922424, 3.934773},////DM1e
	{1417.401489, -29.363967, 1000.926696, 85.235153}////DM1f
};

//DM2 - ww y rw
new Float:ZDM2[][6] =
{
	{1308.363159, -47.528011, 1001.031250, 51.311302},////DM2
	{1291.710327, -67.576820, 1002.494079, 5.689545},////DM2a
	{1249.807983, -47.140312, 1001.027404, 310.417083},////DM2b
	{1253.734741, -6.092687, 1001.032287, 217.418930},////DM2c
	{1272.065551, -23.063709, 1001.025573, 265.672698},////DM2d
	{1294.719482, 6.629299, 1001.009704, 176.478729}////DM2e
};

//DM3 - ww y rw
new Float:ZDM3[][4] =
{
	{-1359.825439, 1257.672485, 1039.867187, 107.461120},////DM3
	{-1403.171142, 1284.266601, 1039.867187, 195.487747},////DM3a
	{-1433.131591, 1249.053833, 1039.867187, 283.221923},////DM3b
	{-1407.143798, 1208.928588, 1039.867187, 352.824279}////DM3c
};

//DM4 - ww
new Float:ZDM4[][6] =
{
	{275.579010, -127.036735, 1004.062500, 201.252609},////DM4
	{298.599365, -127.144561, 1004.062500, 134.282150},////DM4a
	{298.351684, -143.800003, 1004.062500, 38.359466},////DM4b
	{273.155059, -143.689300, 1004.062500, 310.332916},////DM4c
	{286.237823, -144.156097, 1004.062500, 358.878997},////DM4d
	{285.662475, -126.047340, 1004.062500, 171.128021}////DM4e
};


new
	vNames[212][] =
	{
		{"Landstalker"},
		{"Bravura"},
		{"Buffalo"},
		{"Linerunner"},
		{"Perrenial"},
		{"Sentinel"},
		{"Dumper"},
		{"Firetruck"},
		{"Trashmaster"},
		{"Stretch"},
		{"Manana"},
		{"Infernus"},
		{"Voodoo"},
		{"Pony"},
		{"Mule"},
		{"Cheetah"},
		{"Ambulance"},
		{"Leviathan"},
		{"Moonbeam"},
		{"Esperanto"},
		{"Taxi"},
		{"Washington"},
		{"Bobcat"},
		{"Mr Whoopee"},
		{"BF Injection"},
		{"Hunter"},
		{"Premier"},
		{"Enforcer"},
		{"Securicar"},
		{"Banshee"},
		{"Predator"},
		{"Bus"},
		{"Rhino"},
		{"Barracks"},
		{"Hotknife"},
		{"Trailer 1"},
		{"Previon"},
		{"Coach"},
		{"Cabbie"},
		{"Stallion"},
		{"Rumpo"},
		{"RC Bandit"},
		{"Romero"},
		{"Packer"},
		{"Monster"},
		{"Admiral"},
		{"Squalo"},
		{"Seasparrow"},
		{"Pizzaboy"},
		{"Tram"},
		{"Trailer 2"},
		{"Turismo"},
		{"Speeder"},
		{"Reefer"},
		{"Tropic"},
		{"Flatbed"},
		{"Yankee"},
		{"Caddy"},
		{"Solair"},
		{"Berkley's RC Van"},
		{"Skimmer"},
		{"PCJ-600"},
		{"Faggio"},
		{"Freeway"},
		{"RC Baron"},
		{"RC Raider"},
		{"Glendale"},
		{"Oceanic"},
		{"Sanchez"},
		{"Sparrow"},
		{"Patriot"},
		{"Quad"},
		{"Coastguard"},
		{"Dinghy"},
		{"Hermes"},
		{"Sabre"},
		{"Rustler"},
		{"ZR-350"},
		{"Walton"},
		{"Regina"},
		{"Comet"},
		{"BMX"},
		{"Burrito"},
		{"Camper"},
		{"Marquis"},
		{"Baggage"},
		{"Dozer"},
		{"Maverick"},
		{"News Chopper"},
		{"Rancher"},
		{"FBI Rancher"},
		{"Virgo"},
		{"Greenwood"},
		{"Jetmax"},
		{"Hotring"},
		{"Sandking"},
		{"Blista Compact"},
		{"Police Maverick"},
		{"Boxville"},
		{"Benson"},
		{"Mesa"},
		{"RC Goblin"},
		{"Hotring Racer A"},
		{"Hotring Racer B"},
		{"Bloodring Banger"},
		{"Rancher"},
		{"Super GT"},
		{"Elegant"},
		{"Journey"},
		{"Bike"},
		{"Mountain Bike"},
		{"Beagle"},
		{"Cropdust"},
		{"Stunt"},
		{"Tanker"},
		{"Roadtrain"},
		{"Nebula"},
		{"Majestic"},
		{"Buccaneer"},
		{"Shamal"},
		{"Hydra"},
		{"FCR-900"},
		{"NRG-500"},
		{"HPV1000"},
		{"Cement Truck"},
		{"Tow Truck"},
		{"Fortune"},
		{"Cadrona"},
		{"FBI Truck"},
		{"Willard"},
		{"Forklift"},
		{"Tractor"},
		{"Combine"},
		{"Feltzer"},
		{"Remington"},
		{"Slamvan"},
		{"Blade"},
		{"Freight"},
		{"Streak"},
		{"Vortex"},
		{"Vincent"},
		{"Bullet"},
		{"Clover"},
		{"Sadler"},
		{"Firetruck LA"},
		{"Hustler"},
		{"Intruder"},
		{"Primo"},
		{"Cargobob"},
		{"Tampa"},
		{"Sunrise"},
		{"Merit"},
		{"Utility"},
		{"Nevada"},
		{"Yosemite"},
		{"Windsor"},
		{"Monster A"},
		{"Monster B"},
		{"Uranus"},
		{"Jester"},
		{"Sultan"},
		{"Stratum"},
		{"Elegy"},
		{"Raindance"},
		{"RC Tiger"},
		{"Flash"},
		{"Tahoma"},
		{"Savanna"},
		{"Bandito"},
		{"Freight Flat"},
		{"Streak Carriage"},
		{"Kart"},
		{"Mower"},
		{"Duneride"},
		{"Sweeper"},
		{"Broadway"},
		{"Tornado"},
		{"AT-400"},
		{"DFT-30"},
		{"Huntley"},
		{"Stafford"},
		{"BF-400"},
		{"Newsvan"},
		{"Tug"},
		{"Trailer 3"},
		{"Emperor"},
		{"Wayfarer"},
		{"Euros"},
		{"Hotdog"},
		{"Club"},
		{"Freight Carriage"},
		{"Trailer 3"},
		{"Andromada"},
		{"Dodo"},
		{"RC Cam"},
		{"Launch"},
		{"Police Car (LSPD)"},
		{"Police Car (SFPD)"},
		{"Police Car (LVPD)"},
		{"Police Ranger"},
		{"Picador"},
		{"S.W.A.T. Van"},
		{"Alpha"},
		{"Phoenix"},
		{"Glendale"},
		{"Sadler"},
		{"Luggage Trailer A"},
		{"Luggage Trailer B"},
		{"Stair Trailer"},
		{"Boxville"},
		{"Farm Plow"},
		{"Utility Trailer"}
	}, //News
	BuildRace,
	BuildRaceType,
	BuildVehicle,
	BuildCreatedVehicle,
	BuildModeVID,
	BuildName[30],
	bool: BuildTakeVehPos,
	BuildVehPosCount,
	bool: BuildTakeCheckpoints,
	BuildCheckPointCount,
	RaceBusy = 0x00,
	RaceName[30],
	//RaceVehicle,
	RaceType,
	TotalCP,
	Count,
	RaceEnter[MP],
	Float: RaceVehCoords[2][4],
	Float: CPCoords[MAX_RACE_CHECKPOINTS_EACH_RACE][4],
	CreatedRaceVeh[MP],
	Index,
	PlayersCount[2],
	CountTimer,
	CountAmount,
	bool: Joined[MP],
	RaceTick,
	RaceStarted,
	CPProgess[MP],
	Position,
	FinishCount,
	JoinCount,
	rCounter,
	RaceTime,
	InfoTimer[MP],
	RacePosition[MP],
	RaceNames[MAX_RACES][128],
 	TotalRaces,
 	bool: AutomaticRace,
 	TimeProgress,
    Equipo[MP],
    InicioSesionTime[MP],
    tiempois[MP],
   	Text:InfoRace0,
 	Text:InfoRace1,
 	Text:InfoRace2,
 	Text:InfoRace3,
 	Text:InfoRace4,
 	PlayerText:InicioSesionTD[MP],
    PlayerText:TheLastShotLogo1[MP],
    PlayerText:TheLastShotLogo2[MP],
    PlayerText:TheLastShotLogo3[MP],
    stringj[MAX_STRINGS],
    stringj2[MAX_STRINGS],
    stringj3[MAX_STRINGS],
    stringp2[120],
    Text:AntiCheatMinigun0,
    Text:AntiCheatMinigun1,
    nombre[MAX_PLAYER_NAME],
    PlayerText:INICIOTD0[MP],
    PlayerText:INICIOTD1[MP],
    JugadorIdentificado[MP],
    //Password[24][MP],
    BaneadoCuenta[MP],
    //TC[MP],
    DineroJugador[MP],
	congelado[MP],
    SkinPlayer[MP],
    Administrador[MP],
    pCMDS[MP],
    Muertes[MP],
	PuntajeJugador[MP],
	Vip[MP],
	DuelosG[MP],
	DuelosP[MP],
	NoEnRace[MP],
	CoNs1[MP],
	RacesS[MP],
	AunNo[MP],
	Valla[MP],
	GODMOD[MP],
	MK[MP],
	HS[MP],
	CreoAuto[MP],
	SumarGame0[MP],
	SumarGame1[MP],
 	Cabecero[MP],
    Text3D:LabelCabecero[MP],
//    Text3D:LabelCabeceroAFK[MP],
    TEXTO_CABECERO[24][MP],
	MODELO_AUTO[MP][3],
	AUTO_COLOR[MP][3],
	AUTO_COLOR2[MP][3],
	RUEDAS_AUTO[MP][3],
	AUTO_PAINTJOB[MP][3],
	TIENE_AUTO[MP][3],
	NEONES_AUTO[MP][3],
	TIENE_PINTURA[MP][3],
	VEHICULO_CREADOR0[MP],
	VEHICULO_CREADOR1[MP],
	VEHICULO_CREADOR2[MP],
	SACO_AUTO[3][MP],
	NIVEL_KILLS[MP],
	MSGINICIO[MP],
	RacesSx[MP],
	MODO_PELEA[MP],
	DISPLAYS[MP],
	Float:VIPPosX[MP],
	Float:VIPPosY[MP],
	Float:VIPPosZ[MP],
	Float:VIPPosA[MP],
	VIPps[MP],
	TIENE_HYDRA[MP],
	CarreraGanadasIndividuales[MP],
	CarreraPerdidasIndividuales[MP],
	ScoreGeneralJugador[MP],
	aFix[MP],
	JugadorRegistrado[MP],
	Timer[MP][30],
	CHAT[MP],
	NoHayPosicion,
	Float:TpPos[5],
	TpVw,
	TpInt,
	NoJump[MP],
	NoSALTO[MP],
	Encarcelado[MP],
	EstaDM[MP],
	pMPs[MP],
	Turn[MP],
	CarSpawn[MP],
	PlayerCar[MP][AutosMaximosPorJugador],
	Advertencia[MP],
	QuitarMusicaInicio[MP],
	//Float:pEspiarPos[MP][5],
	SiSumar[MP],
	PonerSkin[MP],
	//conexion,
	//IIENE_HYDRA[MP],
	//szQuery[2048],
	VerificarText[MP][20],
	Text:EquipoTD0,
	Text:EquipoTD1,
	Float:PosX[MP],
  	Float:PosY[MP],
  	Float:PosZ[MP],
  	Float:PosA[MP],
  	PosI[MP],
  	avcc[MP],
  	gTotalItems = TOTAL_ITEMS,
	PlayerText:gCurrentPageTextDrawId[MP],
	PlayerText:gHeaderTextDrawId[MP],
	PlayerText:gBackgroundTextDrawId[MP],
	PlayerText:gNextButtonTextDrawId[MP],
	PlayerText:gPrevButtonTextDrawId[MP],
	PlayerText:gSelectionItems[MP][SELECTION_ITEMS],
	gSelectionItemsTag[MP][SELECTION_ITEMS],
	gItemAt[MP],
	gItemList[TOTAL_ITEMS] = {
	400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,/*425,*/426,427,428,429,/*430,*/
	431,/*432,*/433,434,435,436,437,438,439,440,441,442,443,444,445,446,/*447,*/448,450,451,452,453,454,455,456,457,458,459,460,461,
	462,463,464,465,466,467,468,469,470,471,472,473,474,475,/*476,*/477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,
	493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,
	524,525,526,527,528,529,530,531,532,533,534,535,536,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,
	555,556,557,558,559,560,561,562,563,564,565,566,567,568,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,
	586,587,588,589,590,591,592,593,594,/*595,*/596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611},
	Bar:VelocimetroL[MP] = {INVALID_BAR_ID, ...},
	Bar:BarraCamion[MP] = {INVALID_BAR_ID, ...},
	Bar:ConquistandoZona[MP] = {INVALID_BAR_ID, ...},
	VelocimetroTimer[MP],
	PlayerText:VelocidadKMH,
	Mute[MP],
	COLOCAR_NOMBRE_CAR[MP],
	ReportesCelda[11][230],
	ReportesActivosOcupados[11],
	ReportesGenerales = 1,
	PuedeReportar[MP],
	ReportoTime[MP],
	TirarPlayer[MP],
	Cargar_DatosTimer[MP],
	PlayerText:ReportesBox0[MP],
	PlayerText:ReportesBox1[MP],
	PlayerText:ReportesBox2[MP],
	PlayerText:ReportesBox3[MP],
	AdminReportes[MP],
	/*xenonrojo1[MP],
	xenonrojo2[MP],
	xenonrojo3[MP],
	xenonrojo4[MP],*/
	AntiCheatMinigun,
	JugadoresCantidadMinijuegos[20],
	Menu:PanelAdmin1,
	Text:AnunciorRace1,
	Text:AnunciorRace2,
	EnGameJuego[MP],
	JugadorIngresado[MP],
	TieneSpawnJugador[MP],
	Float:MiSpawn[3][MP],
	bool:Remplazar[MP],
	MiSpawnInt[MP],
	Text:Vigilar0,
	Text:Vigilar1,
	VigilandoAdmin[MP],
	AutoBase[3],
	ActivarComponentes[3],
	RespawnVeh,
	PlayerText:ASKO[MP],
	PuntosDM[MP],
	MandarMensajeAdmin[MP],
	CArma[MP][35],
	NoMPS[MP],
 	DINERO_ASESINATO[MP],
    COSTO_CARMAS[MP],
    DINERO_MUERTE[MP],
    JgRp[MP],
    JugadorYaSpawneado1vez[MP],
    JugadorSpawnKill[MP],
	PlayerText:AYUDAINICIO[3],
	JugadorLogeado[MP][4],
	DarTuto[MP],
	TT[MP][8],
	CMDTIME[MP],
	JugadorAK[MP][3],
	IPa[MP][16],
	IPActualizar[MP],
	Spawnear[MP],
	MAX_KILLSASESINO[MP],
 	KillsAsesino[MP],
 	Float:SpeedBoostMultiplier[MP],
 	CarSpawnVal[MP],
 	CarWheelsVal[MP],
 	//CLANES:
 	Clan_Jugador[64][MP],
    //TopC[MAX_TOP_CLANES+1],
    DLG_TOP_PLY_STR[1024],
    //DLG_TOP_CLAN_STR[1024],
    //bool:CColor[MAX_PLAYERS] = {false, ...},
    //CSelec[MAX_PLAYERS] = {1, ...},
    //Text:NumColor[MAX_PLAYERS],
    //Text:Color[MAX_PLAYERS],
    //Text:CComb[MAX_PLAYERS],
    //Text:Comb[MAX_PLAYERS],
    Clan_TAG[MAX_PLAYERS][4],
    Clan_ID[MP],
    Invitacion[MP][4],
    Digito1Jail[MP],
	Digito2Jail[MP],
	stringTime2Jail[MP],
	Digito1Mute[MP],
	Digito2Mute[MP],
	stringTime2Mute[MP],
  	EnClan[MP],
    TCC[MP][4],
    IntentosPassword[MP],
    RangoClan[MP],
    Clan_JugadorCompleto[17][MP],
    RangoTEXT[34][MP],
    TAG_Escribir[MP],
    DueloArmasTipo[MP],
    DueloArenaTipo[MP],
    InvitacionActiva[MP],
    NombreJugadorClan[34][MP],
    NombreJugadorClanA[34][MP],
    bool:HSc[MP],
    HSH[MP],
    EquipoEV[MAX_EQUIPOS],
	RoAEquipo[MP],
	EnEvento[MP],
	EquiposDM[MAX_EQUIPOS],
	ERDM[MP],
	FlagRoja,
	FlagAzul,
	CDEVENTOJ[MP],
	CDEVENTO,
	JugadoresEnEvento = 0,
	JugadorTieneLaFlagRojo[MP],
	JugadorTieneLaFlagAzul[MP],
	Text3D:TextRoja,
	Text3D:TextAzul,
	LaBanderaEstaRoja = 0,
	LaBanderaEstaAzul = 0,
	PlayerText:TeamKills[4][MP],
	TeamKillsSuma[3],
	TeamDeahts[3],
	SpawnearJugadores[MP],
	apiTipoVigilancia[MP],
	apiIDVigilado[MP],
	PuedeComprarAV[MP],
	PrecioVidaArm[3][MP],
	TiempoVida[MP],
	PuedeComprarAV2[MP],
	TiempoArmad[MP],
	PlayerText:VerOn[MP],
	PlayerText:RangoJugadorTD[MP],
	ActualizarVerOnTimer[MP],
	Legendario[MP],
	ARMA[8][MP],
    PrecioArma[8][MP],
    DineroMK[MP],
    DineroHS[MP],
    Premium[MP],
    TAGLN[MP],
    BanTime[MP],
    KickTime[MP],
    ClanMensajeRangos[MP] = 0,
    ClanNoLocalizado[MP] = 1,
    PlayerText:PROMODE[MP],
    KillsRacha[MP],
    Elevador[MP],
    Jaula[MP],
    CargandoMapa[MP],
    VCA[35],
    JETPACKA[MP],
    NoEnviarMensajeClan[MP] = 0,
    COLOR_TEXTO[MP],
    aArma[15][MP],
	aMun[15][MP],
	Float:vVida[MP],
	Float:aArmad[MP],
	Float:GPX[MP] = 0.0,
	Float:GPY[MP] = 0.0,
	Float:GPZ[MP] = 0.0,
	Float:GPA[MP] = 0.0,
	ViendoDuelo[MP],
	VZ[STRING_CORTO],
	VZ2[STRING_GRANDE],
	bool:DarAntiSpawnKill[MP],
	VTUNE[MP],
	VINVISIBLETIME[MP],
	bool:VINVISIBLEVal[MP],
	xenonazul1[MP],
	xenonazul2[MP],
	xenonazul3[MP],
	xenonazul4[MP],
	xenonverde1[MP],
	xenonverde2[MP],
	xenonverde3[MP],
	xenonverde4[MP],
	xenonrojo1[MP],
	xenonrojo2[MP],
	xenonrojo3[MP],
	xenonrojo4[MP],
	TimerCD,
	bool:ComandosBloqueados[MP],
	DCJ[MP],
	Float:XE,
	Float:YE,
	Float:ZE,
	Float:AE,
	IntE,
	EnEventoPlayer[MP] = 0,
	ParticipantesEvento = 0,
	bool:HayEvento,
	bool:PuedenUnirse,
	EventoCargarTimer,
	bool:EntradaLibre = false,
	EventoEnCurso,
	RegresarEvento[MP],
	VehiculoVentaSF[20],
	InfoMuerte[MP],
	PlayerText:TEXTCLAN[MP],
	AntiTeamKill[MP],
	PlayerText:MSGCONQUISTA[MP],
	CLANZONATIEMPOBar[MP],
	CLANZONATIEMPOBarMax[MP],
	CLANZONATIEMPO[MP],
	MAXPING = 5000,
	bool: GangZone[MP],
	bool: Spawned[MP],
	bool: GetPos[MP],
	CreatedZone[MP],
	gColor,
	Float: pMaxX = 0.0,
	Float: pMaxY = 0.0,
	Float: pMinX = 0.0,
	Float: pMinY = 0.0,
	Float: pZ = 0.0,
	gCount,
	PlayerText:ClanInfo0[MP],
	PlayerText:ClanInfo1[MP],
	MensajeNO[MP],
	MensajeNOO[MP],
	Timer:iniciarmapai,
	ClanIDNext[MP],
	SkinClan[MP],
	ColorClan[MP],
	ClanInfoNombre[MP][16],
	NombreJugadorEnClan[MP][32],
	ColorClanGangZone[MP]
;

//news
//neews

//CLANES DEFINES Y NEWS:
#define ZONAS 20
new
	Float:ZONAX1[ZONAS],
	Float:ZONAY1[ZONAS],
	Float:ZONAX2[ZONAS],
	Float:ZONAY2[ZONAS],
	ZONACOLOR[ZONAS],
	CLANZONA[ZONAS],
	CLANJZONA[ZONAS],
	CLANPZONA[ZONAS],
	Clan_IDConquistado[ZONAS],
	CLANZONAArea[ZONAS],
	ActualizarTiempoZone[ZONAS],
	EnZonaConquista[MP][ZONAS],
	ZonaConquistandoseC[ZONAS],
	CLANZONANOMBRE[ZONAS][25],
	ZONACOLORFINALIZAR[ZONAS],
	ClanNombreSave[ZONAS]
;

stock
   InvitadoAlDuelo[MP],
   HasInvitadoAlDuelo[MP],
   JugadorEnElDuelo[MP],
   Conteo[MP],
   DueloTimer[MP],
   DueloEnProgreso,
   DueloID1,
   DueloID2;

enum info
{
        NickTOP[32],
        AsesinatosTOP,
        MuertesTOP,
        Float:RatioTOP,
        ConquistasTOP
};
new DLG_TOP_CLANKILLS_STR[1024];

enum pInfo
{
    Password[50],
    PAdmin
}
new PlayerInfo[MP][pInfo];

	IsValidSkin(skinid)
	{
	#define	MAX_BAD_SKINS 1
	new badSkins[MAX_BAD_SKINS] =
	{ 268 };
	if (skinid < 0 || skinid > 311) return false;
	for (new i = 0; i < MAX_BAD_SKINS; i++) { if (skinid == badSkins[i]) return false; }
	#undef MAX_BAD_SKINS
	return 1;
	}

main()
{
	print("=================================================================================");
	print(" ");
	print(" ");
	print("//                      VirtualZone Freeroam 2011 - 2017                    ");
	print("//                        Fue iniciado correctamente                   ");
	print("//                            Creado por AleksRot                      ");
	print("//                              Versión 0.1alpha                      ");
	print("//                       Todos los derechos reservados                      ");
	print(" ");
	print(" ");
	print("=================================================================================");

}

public OnGameModeInit()
{
	SetGameModeText("VirtualZone beta");
	SendRconCommand("hostname "Nombre" Freeroam [Español]");
	SendRconCommand("language Español");
 	//BASE DE DATOS:
    printf("Iniciando conexión MySQL: (Servidor: '%s', Usuario: '%s', Clave: '%s', Base de Datos: '%s')", MySQL_Servidor, MySQL_Usuario, MySQL_Clave, MySQL_BD);
	Conexion = mysql_connect(MySQL_Servidor, MySQL_Usuario, MySQL_BD,MySQL_Clave);
	if(mysql_log() == 1)
	{
		printf("Conexión a la base de datos realizada correctamente.");
	}
	else //Caso contrario:
	{
	    print("Conexión a la base de datos no realizada.");
		mysql_close(); //Cerramos la conexión
		//SendRconCommand("exit"); //Cerramos la consola para evitar bug's
	}
	UsePlayerPedAnims();
 	AntiDeAMX();
	CargarTextdraws();
	CargarLabelsyPickups();
	TunearAuto0();
	//Activa los DeathMatch al iniciar el servidor:
	//MREX = defer MapaRandomEX();
	RespawnVeh = SetTimer("RespawnVeh0", 10000, 0);
	//Activa las races al iniciar:
	//LoadRaceNames();
    //LoadAutoRace(RaceNames[random(TotalRaces)]);
    //AutomaticRace = true;
	//CLANES:
    mysql_tquery(Conexion, "SELECT* FROM ClanZonas", "CargarZonasClanes", "");

	//Autos Bases Tuneados:
	AutoBase[0] = AddStaticVehicle(560, 1907.3746, -1355.8994, 13.2019, 184.8157, 151, 70000); //LS
	AutoBase[1] = AddStaticVehicle(560, 994.1544, 2160.1042, 10.5257, 1.0216, 17, 1); //LV
	AutoBase[2] = AddStaticVehicle(560, -2033.6121, 178.8872, 28.5477, 89.5216, 17, 1); //SF

	PanelAdmin1 = CreateMenu("Clima", 1, 50.0, 180.0, 250.0, 200.0);
	AddMenuItem(PanelAdmin1, 0, "Caluroso");
	AddMenuItem(PanelAdmin1, 0, "Muy Caluroso");
	AddMenuItem(PanelAdmin1, 0, "Con Nuves");
	AddMenuItem(PanelAdmin1, 0, "Lluvia");
	AddMenuItem(PanelAdmin1, 0, "Nievla");
	AddMenuItem(PanelAdmin1, 0, "Tormenta de arena");
	AddMenuItem(PanelAdmin1, 0, "Nievla verde");
	AddMenuItem(PanelAdmin1, 0, "Salir del menu");

	//Muestra todos los skins
	for(new i = 0; i < 311; i++)
	{
		if(IsValidSkin(i))
		{
			AddPlayerClass(i,0.0,0.0,0.0,0.0,-1,-1,-1,-1,-1,-1);
		}
	}
	
	//Decoración SPAWNINICIAL
	CreateObject(18654, 493.90366, -15.05095, 999.47260,   0.00000, 0.00000, 1.63956);
	CreateObject(18654, 493.81903, -12.81826, 999.47260,   0.00000, 0.00000, 1.63956);
	CreateObject(19128, 489.79498, -16.09989, 999.61749,   0.00000, 0.00000, 0.00000);
	CreateObject(19128, 485.84058, -16.09548, 999.61749,   0.00000, 0.00000, 0.00000);
	CreateObject(19128, 489.79788, -12.13489, 999.61749,   0.00000, 0.00000, 0.00000);
	CreateObject(19128, 485.81915, -12.13390, 999.61749,   0.00000, 0.00000, 0.00000);
	CreateObject(18102, 492.52606, -14.27942, 1004.74878,   0.00000, 0.00000, 0.00000);
	CreateObject(2232, 494.06250, -2.51563, 1001.67969,   356.85840, 0.00000, -3.05433);
	CreateObject(2232, 492.15714, -15.57567, 1000.33081,   0.00000, 0.00000, 269.24756);
	CreateObject(2232, 492.15891, -12.24290, 1000.33081,   0.00000, 0.00000, 269.24756);

	//COMANDOS ALTERNATIVOS:
	Command_AddAltNamed("ir", "goto");
	Command_AddAltNamed("traer", "get");
	Command_AddAltNamed("vigilar", "veron");
	Command_AddAltNamed("dejarvigilar", "veroff");
	Command_AddAltNamed("desmute", "unmute");
	Command_AddAltNamed("congelar", "frz");
	Command_AddAltNamed("descongelar", "unfrz");
	Command_AddAltNamed("encarcelar", "jail");
	Command_AddAltNamed("unencarcelar", "unjail");
	Command_AddAltNamed("expulsar", "kick");
	Command_AddAltNamed("espiarcmds", "speccmds");
	Command_AddAltNamed("espiarmps", "specmps");
	Command_AddAltNamed("deathmatch", "dm");
	
		    new u;
	while(u != MAX_PLAYERS)
	{
	    Spawned[u] = false;
	    GangZone[u] = false;
		++u;
	}
	new g;
	while(g != MAX_ZONES)
	{
	    --CreatedZone[g];
	    --g;
	}
	return 1;
}

//SISTEMA DE CLANES(TERRIOTRIOS)
funcion CargarZonasClanes()
{
	for(new i = 0; i<cache_get_row_count(Conexion); i++)
	{
	    cache_get_row(i, 2, CLANZONANOMBRE[i], Conexion, 26);
    	ZONAX1[i] = cache_get_row_float(i, 5, Conexion);
    	ZONAY1[i] = cache_get_row_float(i, 6, Conexion);
    	ZONAX2[i] = cache_get_row_float(i, 7, Conexion);
    	ZONAY2[i] = cache_get_row_float(i, 8, Conexion);
    	ZONACOLOR[i] = cache_get_row_int(i, 4, Conexion);
    	CLANZONATIEMPO[i] = cache_get_row_int(i, 13, Conexion);
		CLANZONATIEMPOBarMax[i] = cache_get_row_int(i, 13, Conexion);
    	Clan_IDConquistado[i] = cache_get_row_int(i, 12, Conexion);
    	CLANPZONA[i] = cache_get_row_int(i, 3, Conexion);
    	GangZoneHideForAll(CLANZONA[i]);
    	CLANZONA[i] = GangZoneCreate(ZONAX1[i], ZONAY1[i], ZONAX2[i], ZONAY2[i]);
        GangZoneShowForAll(CLANZONA[i], ZONACOLOR[i]);
    	CLANZONAArea[i] = CreateDynamicRectangle(ZONAX1[i], ZONAY1[i], ZONAX2[i], ZONAY2[i], -1, -1, -1);
    	printf("ClanWar - Zonas Encontradas: %d. %s", i, CLANZONANOMBRE[i]);
    }
    return 1;
}

funcion MostrarGangZonesPlayer(playerid)
{
	for(new i = 1; i<ZONAS; i++)
    {
  		GangZoneShowForPlayer(playerid, CLANZONA[i], ZONACOLOR[i]);
    }
    return 1;
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
	new stringzona[70], stringmsg[80], aux[20], Query[70], Cache:result, temp[20];
	for(new i=1; i<ZONAS; i++)
	{
	if(areaid == CLANZONAArea[i])
	{
	if(EnClan[playerid] == 1)
	{
		CLANJZONA[i]++;
		EnZonaConquista[playerid][i] = 1;
	if(CLANJZONA[i] >= CLANPZONA[i])
	{
	if(Clan_ID[playerid] != Clan_IDConquistado[i])
	{
	if(ZonaConquistandoseC[i] == 0)
	{
		GangZoneFlashForAll(CLANZONA[i], ColorClanGangZone[playerid]);
		format(stringmsg, sizeof(stringmsg), "{00FFE2}*** ClanWar: %s está conquistado %s!", Clan_JugadorCompleto[playerid], CLANZONANOMBRE[i]);
		SendClientMessageToAll(-1, stringmsg);
		mysql_format(Conexion, Query, sizeof(Query), "SELECT* FROM Clanes WHERE IDClan = %d", Clan_ID[playerid]);
		result = mysql_query(Conexion, Query);
		cache_get_field_content(0, "NombreClan", aux, Conexion, sizeof(aux));
		cache_delete(result, Conexion);
		strmid(ClanNombreSave[i], aux, 0, strlen(aux), 64);
		ZONACOLORFINALIZAR[i] = ColorClanGangZone[playerid];
		ZonaConquistandoseC[i] = 1;
		ActualizarTiempoZone[i] = SetTimerEx("ActualizarTiempoZona", 1000, true, "iii", i, Clan_ID[playerid], ColorClanGangZone[playerid]);
	}
	}
	}
		else JugadoresNecesarios(i, Clan_ID[playerid], CLANJZONA[i], CLANPZONA[i]);
	}
		mysql_format(Conexion, Query, sizeof(Query), "SELECT NombreClanConquistada FROM ClanZonas WHERE IDZona = '%d'", i);
		result = mysql_query(Conexion, Query);
		cache_get_field_content(0, "NombreClanConquistada", temp, Conexion, sizeof(temp));
		cache_delete(result, Conexion);
		format(stringzona, sizeof(stringzona), "%s", temp);
		PlayerTextDrawSetString(playerid, ClanInfo1[playerid], stringzona);
		PTDShow(playerid, ClanInfo0[playerid]);
		PTDShow(playerid, ClanInfo1[playerid]);
		break;
	}
	}
	return 1;
}

stock JugadoresNecesarios(areaidz, clanid, jugadores, maxj)
{
	static stringzona[76];
	format(stringzona, sizeof(stringzona), "~b~~h~~h~%d/%d jugadores~n~~b~~h~~h~para conquistar!", jugadores, maxj);
	for(new d=0; d<MP; d++)
	{
		if(IsPlayerConnected(d))
		{
    		if(Clan_ID[d] == clanid)
    		{
    			if(EnZonaConquista[d][areaidz] == 1)
				{
					GameTextForPlayer(d, stringzona, 5000, 3);
				}
			}
		}
	}
	return 1;
}

funcion ActualizarTiempoZona(const areaidz, const clanid, const color)
{
	static stringzona[57], stringmsgc[128], stringmsg2[80], dineroi, score;
	foreach(new d : Player)
	{
		if(IsPlayerConnected(d))
		{
    		if(Clan_ID[d] == clanid)
    		{
    			if(EnZonaConquista[d][areaidz] == 1)
				{
    				format(stringzona, sizeof(stringzona), "Conquistando zona ~n~     en %d seg", CLANZONATIEMPO[areaidz]);
					PTDString(d, MSGCONQUISTA[d], stringzona);
					PTDShow(d, MSGCONQUISTA[d]);
					UpdateProgressBar(ConquistandoZona[d], d);
					ShowProgressBarForPlayer(d, ConquistandoZona[d]);
					SetProgressBarValue(ConquistandoZona[d], CLANZONATIEMPOBar[areaidz]);
					SetProgressBarMaxValue(ConquistandoZona[d], CLANZONATIEMPOBarMax[areaidz]);
					if(CLANZONATIEMPOBar[areaidz] == CLANZONATIEMPOBarMax[areaidz])
					{
						HideProgressBarForPlayer(d, ConquistandoZona[d]);
					}
					else
					{
						UpdateProgressBar(ConquistandoZona[d], d);
						SetProgressBarValue(ConquistandoZona[d], CLANZONATIEMPOBar[areaidz]);
					}
				}
			}
		}
	}
	if(CLANZONATIEMPO[areaidz] >= 1)
	{
		CLANZONATIEMPO[areaidz] -= 1;
		if(CLANZONATIEMPOBar[areaidz] == CLANZONATIEMPOBarMax[areaidz])
		{

		}
		else
		{
			CLANZONATIEMPOBar[areaidz] += 1;
		}
	}
	if(CLANZONATIEMPO[areaidz] == 0)
	{
		new Cache:result, Query[170], cc, ccc;
		GangZoneShowForAll(CLANZONA[areaidz], ZONACOLORFINALIZAR[areaidz]);
		mysql_format(Conexion, Query, sizeof(Query), "UPDATE ClanZonas SET NombreClanConquistada='%s', ColorClan = %d, IDClanConquisto = %d WHERE IDZona = %d", ClanNombreSave[areaidz], ZONACOLORFINALIZAR[areaidz], clanid, areaidz);
		mysql_query(Conexion, Query, false);
		mysql_format(Conexion, Query, sizeof(Query), "SELECT* FROM Clanes WHERE IDClan = %d", clanid);
		result = mysql_query(Conexion, Query);
		cc = cache_get_field_content_int(0, "ConquistasActual", Conexion);
		ccc = cache_get_field_content_int(0, "ConquistasClanTotal", Conexion);
		result = mysql_query(Conexion, Query);
		cache_delete(result, Conexion);
		mysql_format(Conexion, Query, sizeof(Query), "UPDATE Clanes SET ConquistasActual = %d, ConquistasClanTotal = %d WHERE IDClan = %d", cc+1, ccc+1, clanid);
		mysql_query(Conexion, Query, false);
		format(stringmsg2, sizeof(stringmsg2), "{00FF80}*** ClanWar: %s conquistó \"%s\"!", ClanNombreSave[areaidz], CLANZONANOMBRE[areaidz]);
		SendClientMessageToAll(-1, stringmsg2);
		Clan_IDConquistado[areaidz] = clanid;
		foreach(new d : Player)
		{
			if(IsPlayerConnected(d))
			{
    		if(Clan_ID[d] == clanid)
    		{
   			if(EnZonaConquista[d][areaidz] == 1)
			{
   				KillTimer(ActualizarTiempoZone[areaidz]);
				HideProgressBarForPlayer(d, ConquistandoZona[d]);
				PTDHide(d, MSGCONQUISTA[d]);
				GangZoneStopFlashForAll(CLANZONA[areaidz]);
				mysql_format(Conexion, Query, sizeof(Query), "SELECT* FROM ClanZonas WHERE IDZona = %d", areaidz);
				result = mysql_query(Conexion, Query);
				dineroi = cache_get_field_content_int(0, "DineroIndividual", Conexion);
				score = cache_get_field_content_int(0, "Score", Conexion);
				DineroJugador[d] += dineroi;
				ScoreGeneralJugador[d] += score;
				CLANZONATIEMPO[areaidz] = cache_get_field_content_int(0, "TiempoZona", Conexion);
				CLANZONATIEMPOBarMax[areaidz] = cache_get_field_content_int(0, "TiempoZona", Conexion);
				ResetPlayerMoney(d);
				GivePlayerMoney(d, DineroJugador[d]);
				SetPlayerScore(d, GetPlayerScore(d)+ScoreGeneralJugador[d]);
				cache_delete(result, Conexion);
				GameTextForPlayer(d, "~g~~h~~h~Zona obtenida!", 3000, 3);
				format(stringmsgc, sizeof(stringmsgc), "{FFDE00}* ClanWar: Han conquistado %s para su clan! Reciben: $%d, exp+%d, $%d en clan.", CLANZONANOMBRE[areaidz], dineroi, score);
				SendClientMessage(d, -1, stringmsgc);
				ZonaConquistandoseC[areaidz] = 0;
				EnZonaConquista[d][areaidz] = 0;
			}
		}
		}
		}
		KillTimer(ActualizarTiempoZone[areaidz]);
	}
	return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	static Query[128], Cache:result;
	for(new i=1; i<ZONAS; i++)
	{
		if(areaid == CLANZONAArea[i])
		{
			PTDHide(playerid, ClanInfo1[playerid]);
			PTDHide(playerid, ClanInfo0[playerid]);
   			CLANJZONA[i] -= 1;
			if(CLANJZONA[i] < CLANPZONA[i])
			{
				if(EnZonaConquista[playerid][i] == 1)
				{
				    format(Query, sizeof(Query), "{FFFF00}* ClanWar: La conquista de \"%s\" canceló por falta de miembros.", CLANZONANOMBRE[i]);
				    foreach(new d : Player)
					{
					    if(Clan_ID[d] == Clan_ID[playerid])
						{
							KillTimer(ActualizarTiempoZone[i]);
							GangZoneStopFlashForAll(CLANZONA[i]);
							mysql_format(Conexion, Query, sizeof(Query), "SELECT* FROM ClanZonas WHERE IDZona = %d", i);
							result = mysql_query(Conexion, Query);
							CLANZONATIEMPO[i] = cache_get_field_content_int(0, "TiempoZona", Conexion);
							CLANZONATIEMPOBarMax[i] = cache_get_field_content_int(0, "TiempoZona", Conexion);
							cache_delete(result, Conexion);
							EnZonaConquista[playerid][i] = 0;
							CLANZONATIEMPOBar[i] = 0;
							ZonaConquistandoseC[i] = 0;
							PTDHide(d, MSGCONQUISTA[d]);
							HideProgressBarForPlayer(d, ConquistandoZona[d]);
						}
					}
				}
			}
		}
		break;
	}
	return 1;
}

public OnGameModeExit()
{
	mysql_close(Conexion);
	return 1;
}

public OnQueryError(errorid, error[], callback[], query[], connectionHandle )
{
  printf("[ERROR] ID: %d - Error: %s - Callback - %s - Query: %s", errorid, error, callback, query); //Imprimimos el mensaje en la consola
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	//if(Spawnear[playerid] == 1) Cargar_DatosTimer[playerid] = SetTimerEx("CARGAR_DATOS_JUGADOR", 1000, false, "i", playerid);
	if(JugadorLogeado[playerid][0] == 1 && JugadorRegistrado[playerid] == 1){ SpawnPlayer(playerid); JugadorMurio(playerid); }
    SetPlayerPosEx(playerid, 491.004791, -14.016995, 1000.687805, 89.746116, 17, 0);
    SetPlayerCameraPos(playerid, 485.36, -13.84, 1002.12);
	SetPlayerCameraLookAt(playerid, 490.36, -13.90, 1000.69);
 	SetPlayerWeather(playerid, 9);
    SetPlayerTime(playerid, 22, 0);
	SetPlayerInterior(playerid, 17);
	return 1;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	if(Administrador[playerid] >= 1){
    SetPlayerPosExV(playerid, Float:fX, Float:fY, Float:fZ);
    return 1;
    }

    if(Vip[playerid] >= 1){
    SetPlayerPosExV(playerid, Float:fX, Float:fY, Float:fZ);
    return 1;
	}
    return 1;
}

funcion JugadorBanned(playerid)
{
    new string[128], Cache:result;
    mysql_format(Conexion, queryx, sizeof(queryx), "SELECT Banned FROM jugadores WHERE Nombre = '%s'", GetName(playerid));
	result = mysql_query(Conexion, queryx);
	if(cache_get_row_int(0, 0, Conexion) == 1)
	{
		format(string, sizeof(string), "* %s ha sido kickeado del servidor. Razón: Cuenta Baneada.", GetName(playerid));
		SendClientMessageToAll(Rojo, string);
		GameTextForPlayer(playerid, "~n~~n~~r~~h~~h~Baneado!", 2000000000000, 3);
		BanTime[playerid] = SetTimerEx("BanPlayer", 100, 1, "ii", playerid, playerid);
	}
	else
	{
		cache_delete(result, Conexion);
	}
	cache_delete(result, Conexion);
	return 1;
}

public OnPlayerConnect(playerid)
{
	//Resetea Varuables al iniciar:
    ResetarVariables(playerid);
    //Activa el Reloj
    TogglePlayerClock(playerid, 0);
    //Detecta si esta baneado:
   	format(queryx, sizeof(queryx), "SELECT * FROM `jugadores` WHERE `Nombre` = '%s'", GetName(playerid));
	mysql_function_query(Conexion, queryx, true, "OnQueryFinish", "ii", 1, playerid);
	JugadorBanned(playerid);
	//Detecta si esta registrado o no:
	SetTimerXP(playerid, 7, "Inicio", 2200);
	//Variable de inicio de sesión del admin:
    MandarMensajeAdmin[playerid] = 1;
    //Debug
	InvitadoAlDuelo[playerid] = 1000000000;
	JugadorYaSpawneado1vez[playerid] = 0;
    HasInvitadoAlDuelo[playerid] = 0;
    JugadorEnElDuelo[playerid]  = 0;
	QuitarMusicaInicio[playerid] = 1;
	SiSumar[playerid] = 1;
	SiSumar[playerid] = 0;
	IPActualizar[playerid] = 1;
	MSGINICIO[playerid] = 0;
	//Le activa todas las gangzones de clanes:
	MostrarGangZonesPlayer(playerid);
	//Todas las barras de progreso:
	VelocimetroL[playerid] = CreateProgressBar(480.00, 404.00, 79.50, 5.19, -888602625, 100.0);
	BarraCamion[playerid] = CreateProgressBar(257.00, 412.00, 104.50, 10.19, 12124415, 100.0);
	ConquistandoZona[playerid] = CreateProgressBar(151.00, 386.00, 84.50, 6.19, -52494081, 100.0);
	//Le coloca un color random:
	new rand = random(sizeof(ColoresAlAzar));
	SetPlayerColor(playerid, ColoresAlAzar[rand]);
	CargarRemovings(playerid);
	SendDeathMessage(INVALID_PLAYER_ID, playerid, 200);
	NoJump[playerid] = 1;
	new IP[16], stringjjk[90];
	GetPlayerName(playerid, nombre, sizeof(nombre));
	GetPlayerIp(playerid, IP, sizeof(IP));
	format(stringjjk,sizeof(stringjjk),"*** AdminInfo INGRESÓ: %s(%d) ha entrado IP: [%s].", nombre, playerid, IP);
    AdminInfoOtro(stringjjk);
    //Textdraw:
    gHeaderTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    gBackgroundTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    gCurrentPageTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    gNextButtonTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    gPrevButtonTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    
    //TextDraws de Jugadores:
	
	SurvivalInfo[playerid] = CreatePlayerTextDraw(playerid,23.000000, 172.000000, "Bolsa Info:");
	PlayerTextDrawBackgroundColor(playerid,SurvivalInfo[playerid], 255);
	PlayerTextDrawFont(playerid,SurvivalInfo[playerid], 0);
	PlayerTextDrawLetterSize(playerid,SurvivalInfo[playerid], 0.390000, 2.000000);
	PlayerTextDrawColor(playerid,SurvivalInfo[playerid], -1);
	PlayerTextDrawSetOutline(playerid,SurvivalInfo[playerid], 1);
	PlayerTextDrawSetProportional(playerid,SurvivalInfo[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,SurvivalInfo[playerid], 0);

	SurvivalInfo2[playerid] = CreatePlayerTextDraw(playerid,28.000000, 193.000000, "_");
	PlayerTextDrawBackgroundColor(playerid,SurvivalInfo2[playerid], 255);
	PlayerTextDrawFont(playerid,SurvivalInfo2[playerid], 1);
	PlayerTextDrawLetterSize(playerid,SurvivalInfo2[playerid], 0.170000, 1.100000);
	PlayerTextDrawColor(playerid,SurvivalInfo2[playerid], -1);
	PlayerTextDrawSetOutline(playerid,SurvivalInfo2[playerid], 0);
	PlayerTextDrawSetProportional(playerid,SurvivalInfo2[playerid], 1);
	PlayerTextDrawSetShadow(playerid,SurvivalInfo2[playerid], 1);
	PlayerTextDrawUseBox(playerid,SurvivalInfo2[playerid], 1);
	PlayerTextDrawBoxColor(playerid,SurvivalInfo2[playerid], 255);
	PlayerTextDrawTextSize(playerid,SurvivalInfo2[playerid], 140.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid,SurvivalInfo2[playerid], 0);

	SurvivalInfo3[playerid] = CreatePlayerTextDraw(playerid,28.000000, 212.000000, "_");
	PlayerTextDrawBackgroundColor(playerid,SurvivalInfo3[playerid], 255);
	PlayerTextDrawFont(playerid,SurvivalInfo3[playerid], 1);
	PlayerTextDrawLetterSize(playerid,SurvivalInfo3[playerid], 0.170000, 1.100000);
	PlayerTextDrawColor(playerid,SurvivalInfo3[playerid], -1);
	PlayerTextDrawSetOutline(playerid,SurvivalInfo3[playerid], 0);
	PlayerTextDrawSetProportional(playerid,SurvivalInfo3[playerid], 1);
	PlayerTextDrawSetShadow(playerid,SurvivalInfo3[playerid], 1);
	PlayerTextDrawUseBox(playerid,SurvivalInfo3[playerid], 1);
	PlayerTextDrawBoxColor(playerid,SurvivalInfo3[playerid], 255);
	PlayerTextDrawTextSize(playerid,SurvivalInfo3[playerid], 140.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid,SurvivalInfo3[playerid], 0);

	//DMINfo
	DMInfo[playerid] = CreatePlayerTextDraw(playerid,453.000000, 344.000000, "DeathMatch Individual: 49/50");
	PlayerTextDrawBackgroundColor(playerid,DMInfo[playerid], 255);
	PlayerTextDrawFont(playerid,DMInfo[playerid], 1);
	PlayerTextDrawLetterSize(playerid,DMInfo[playerid], 0.300000, 1.299999);
	PlayerTextDrawColor(playerid,DMInfo[playerid], -1);
	PlayerTextDrawSetOutline(playerid,DMInfo[playerid], 0);
	PlayerTextDrawSetProportional(playerid,DMInfo[playerid], 1);
	PlayerTextDrawSetShadow(playerid,DMInfo[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,DMInfo[playerid], 0);
	
	//MapaContador
	TiempoDMContador[playerid] = CreatePlayerTextDraw(playerid,277.000000, 423.000000, "_");
	PlayerTextDrawBackgroundColor(playerid,TiempoDMContador[playerid], 255);
	PlayerTextDrawFont(playerid,TiempoDMContador[playerid], 2);
	PlayerTextDrawLetterSize(playerid,TiempoDMContador[playerid], 0.210000, 1.200000);
	PlayerTextDrawColor(playerid,TiempoDMContador[playerid], -1);
	PlayerTextDrawSetOutline(playerid,TiempoDMContador[playerid], 0);
	PlayerTextDrawSetProportional(playerid,TiempoDMContador[playerid], 1);
	PlayerTextDrawSetShadow(playerid,TiempoDMContador[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,TiempoDMContador[playerid], 0);

	//TextDraw de Tiempo Conquista Clan:
	MSGCONQUISTA[playerid] = CreatePlayerTextDraw(playerid,150.000000, 356.000000, "_");
	PlayerTextDrawBackgroundColor(playerid,MSGCONQUISTA[playerid], 255);
	PlayerTextDrawFont(playerid,MSGCONQUISTA[playerid], 3);
	PlayerTextDrawLetterSize(playerid,MSGCONQUISTA[playerid], 0.250000, 1.600000);
	PlayerTextDrawColor(playerid,MSGCONQUISTA[playerid], -52494081);
	PlayerTextDrawSetOutline(playerid,MSGCONQUISTA[playerid], 1);
	PlayerTextDrawSetProportional(playerid,MSGCONQUISTA[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,MSGCONQUISTA[playerid], 0);
	
	TheLastShotLogo3[playerid] = CreatePlayerTextDraw(playerid,459.000000, 436.000000, "~p~~h~Kills: 1000 - Deaths: 20 - Ratio: 2.00");
	PlayerTextDrawBackgroundColor(playerid,TheLastShotLogo3[playerid], 255);
	PlayerTextDrawFont(playerid,TheLastShotLogo3[playerid], 3);
	PlayerTextDrawLetterSize(playerid,TheLastShotLogo3[playerid], 0.190000, 1.100000);
	PlayerTextDrawColor(playerid,TheLastShotLogo3[playerid], -1);
	PlayerTextDrawSetOutline(playerid,TheLastShotLogo3[playerid], 1);
	PlayerTextDrawSetProportional(playerid,TheLastShotLogo3[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,TheLastShotLogo3[playerid], 0);

	TheLastShotLogo1[playerid] = CreatePlayerTextDraw(playerid,474.000000, 356.000000, "VirtualZone.com");
	PlayerTextDrawBackgroundColor(playerid,TheLastShotLogo1[playerid], 255);
	PlayerTextDrawFont(playerid,TheLastShotLogo1[playerid], 3);
	PlayerTextDrawLetterSize(playerid,TheLastShotLogo1[playerid], 0.310000, 1.700000);
	PlayerTextDrawColor(playerid,TheLastShotLogo1[playerid], -888605185);
	PlayerTextDrawSetOutline(playerid,TheLastShotLogo1[playerid], 1);
	PlayerTextDrawSetProportional(playerid,TheLastShotLogo1[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,TheLastShotLogo1[playerid], 0);

	TheLastShotLogo2[playerid] = CreatePlayerTextDraw(playerid,516.000000, 365.000000, "Free Roam");
	PlayerTextDrawBackgroundColor(playerid,TheLastShotLogo2[playerid], 255);
	PlayerTextDrawFont(playerid,TheLastShotLogo2[playerid], 2);
	PlayerTextDrawLetterSize(playerid,TheLastShotLogo2[playerid], 0.220000, 1.800001);
	PlayerTextDrawColor(playerid,TheLastShotLogo2[playerid], -1);
	PlayerTextDrawSetOutline(playerid,TheLastShotLogo2[playerid], 1);
	PlayerTextDrawSetProportional(playerid,TheLastShotLogo2[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,TheLastShotLogo2[playerid], 0);

	TeamKills[3][playerid] = CreatePlayerTextDraw(playerid,59.000000, 273.000000, "Marcadores:");
	PlayerTextDrawBackgroundColor(playerid,TeamKills[3][playerid], 255);
	PlayerTextDrawFont(playerid,TeamKills[3][playerid], 2);
	PlayerTextDrawLetterSize(playerid,TeamKills[3][playerid], 0.210000, 1.300000);
	PlayerTextDrawColor(playerid,TeamKills[3][playerid], -1);
	PlayerTextDrawSetOutline(playerid,TeamKills[3][playerid], 1);
	PlayerTextDrawSetProportional(playerid,TeamKills[3][playerid], 1);
	PlayerTextDrawSetSelectable(playerid,TeamKills[3][playerid], 0);

	TeamKills[0][playerid] = CreatePlayerTextDraw(playerid,63.000000, 293.000000, "Grove: 0");
	PlayerTextDrawBackgroundColor(playerid,TeamKills[0][playerid], 255);
	PlayerTextDrawFont(playerid,TeamKills[0][playerid], 2);
	PlayerTextDrawLetterSize(playerid,TeamKills[0][playerid], 0.210000, 1.300000);
	PlayerTextDrawColor(playerid,TeamKills[0][playerid], 12452863);
	PlayerTextDrawSetOutline(playerid,TeamKills[0][playerid], 1);
	PlayerTextDrawSetProportional(playerid,TeamKills[0][playerid], 1);
	PlayerTextDrawSetSelectable(playerid,TeamKills[0][playerid], 0);

	TeamKills[1][playerid] = CreatePlayerTextDraw(playerid,62.000000, 305.000000, "Ballas: 0");
	PlayerTextDrawBackgroundColor(playerid,TeamKills[1][playerid], 255);
	PlayerTextDrawFont(playerid,TeamKills[1][playerid], 2);
	PlayerTextDrawLetterSize(playerid,TeamKills[1][playerid], 0.210000, 1.300000);
	PlayerTextDrawColor(playerid,TeamKills[1][playerid], -587164161);
	PlayerTextDrawSetOutline(playerid,TeamKills[1][playerid], 1);
	PlayerTextDrawSetProportional(playerid,TeamKills[1][playerid], 1);
	PlayerTextDrawSetSelectable(playerid,TeamKills[1][playerid], 0);
	
	VelocidadKMH = CreatePlayerTextDraw(playerid,496.000000, 386.000000, "_");
	PlayerTextDrawBackgroundColor(playerid,VelocidadKMH, 255);
	PlayerTextDrawFont(playerid,VelocidadKMH, 2);
	PlayerTextDrawLetterSize(playerid,VelocidadKMH, 0.150000, 1.399999);
	PlayerTextDrawColor(playerid,VelocidadKMH, -888602625);
	PlayerTextDrawSetOutline(playerid,VelocidadKMH, 1);
	PlayerTextDrawSetProportional(playerid,VelocidadKMH, 1);
	PlayerTextDrawSetSelectable(playerid,VelocidadKMH, 0);

	VerOn[playerid] = CreatePlayerTextDraw(playerid,156.000000, 370.000000, "_");
	PlayerTextDrawBackgroundColor(playerid,VerOn[playerid], 255);
	PlayerTextDrawFont(playerid,VerOn[playerid], 1);
	PlayerTextDrawLetterSize(playerid,VerOn[playerid], 0.250000, 1.300000);
	PlayerTextDrawColor(playerid,VerOn[playerid], -1);
	PlayerTextDrawSetOutline(playerid,VerOn[playerid], 0);
	PlayerTextDrawSetProportional(playerid,VerOn[playerid], 1);
	PlayerTextDrawSetShadow(playerid,VerOn[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,VerOn[playerid], 0);
	
	//INICIO SESION
	InicioSesionTD[playerid] = CreatePlayerTextDraw(playerid,282.000000, 259.000000, "Inicia Sesion:~n~ 1 segundos");
	PlayerTextDrawBackgroundColor(playerid,InicioSesionTD[playerid], 255);
	PlayerTextDrawFont(playerid,InicioSesionTD[playerid], 3);
	PlayerTextDrawLetterSize(playerid,InicioSesionTD[playerid], 0.340000, 1.799999);
	PlayerTextDrawColor(playerid,InicioSesionTD[playerid], -1);
	PlayerTextDrawSetOutline(playerid,InicioSesionTD[playerid], 1);
	PlayerTextDrawSetProportional(playerid,InicioSesionTD[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,InicioSesionTD[playerid], 0);

	TEXTCLAN[playerid] = CreatePlayerTextDraw(playerid,485.000000, 423.000000, "Clan: Sin clan");
	PlayerTextDrawBackgroundColor(playerid,TEXTCLAN[playerid], 255);
	PlayerTextDrawFont(playerid,TEXTCLAN[playerid], 3);
	PlayerTextDrawLetterSize(playerid,TEXTCLAN[playerid], 0.200000, 1.100000);
	PlayerTextDrawColor(playerid,TEXTCLAN[playerid], -1);
	PlayerTextDrawSetOutline(playerid,TEXTCLAN[playerid], 1);
	PlayerTextDrawSetProportional(playerid,TEXTCLAN[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,TEXTCLAN[playerid], 0);
	
	RangoJugadorTD[playerid] = CreatePlayerTextDraw(playerid,474.000000, 412.000000, "_");
	PlayerTextDrawBackgroundColor(playerid,RangoJugadorTD[playerid], 255);
	PlayerTextDrawFont(playerid,RangoJugadorTD[playerid], 2);
	PlayerTextDrawLetterSize(playerid,RangoJugadorTD[playerid], 0.160000, 1.400000);
	PlayerTextDrawColor(playerid,RangoJugadorTD[playerid], -1);
	PlayerTextDrawSetOutline(playerid,RangoJugadorTD[playerid], 1);
	PlayerTextDrawSetProportional(playerid,RangoJugadorTD[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,RangoJugadorTD[playerid], 0);

	ClanInfo0[playerid] = CreatePlayerTextDraw(playerid,124.000000, 414.000000, "ClanZona:");
	PlayerTextDrawBackgroundColor(playerid,ClanInfo0[playerid], 255);
	PlayerTextDrawFont(playerid,ClanInfo0[playerid], 0);
	PlayerTextDrawLetterSize(playerid,ClanInfo0[playerid], 0.350000, 1.500000);
	PlayerTextDrawColor(playerid,ClanInfo0[playerid], -1432113921);
	PlayerTextDrawSetOutline(playerid,ClanInfo0[playerid], 1);
	PlayerTextDrawSetProportional(playerid,ClanInfo0[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,ClanInfo0[playerid], 0);

	ClanInfo1[playerid] = CreatePlayerTextDraw(playerid,119.000000, 426.000000, "_");
	PlayerTextDrawBackgroundColor(playerid,ClanInfo1[playerid], 255);
	PlayerTextDrawFont(playerid,ClanInfo1[playerid], 3);
	PlayerTextDrawLetterSize(playerid,ClanInfo1[playerid], 0.350000, 1.500000);
	PlayerTextDrawColor(playerid,ClanInfo1[playerid], -1432113921);
	PlayerTextDrawSetOutline(playerid,ClanInfo1[playerid], 1);
	PlayerTextDrawSetProportional(playerid,ClanInfo1[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,ClanInfo1[playerid], 0);

	//TOPTEXT
    TOPTD0[playerid] = CreatePlayerTextDraw(playerid,38.000000, 156.000000, "TOP KILLS:");
    PlayerTextDrawBackgroundColor(playerid,TOPTD0[playerid], 255);
    PlayerTextDrawFont(playerid,TOPTD0[playerid], 2);
    PlayerTextDrawLetterSize(playerid,TOPTD0[playerid], 0.180000, 1.000000);
    PlayerTextDrawColor(playerid,TOPTD0[playerid], -1);
    PlayerTextDrawSetOutline(playerid,TOPTD0[playerid], 1);
    PlayerTextDrawSetProportional(playerid,TOPTD0[playerid], 1);
    PlayerTextDrawUseBox(playerid,TOPTD0[playerid], 1);
    PlayerTextDrawBoxColor(playerid,TOPTD0[playerid], -16777115);
    PlayerTextDrawTextSize(playerid,TOPTD0[playerid], 143.000000, 0.000000);
    PlayerTextDrawSetSelectable(playerid,TOPTD0[playerid], 0);

    TOPTD1[playerid] = CreatePlayerTextDraw(playerid,38.000000, 171.000000, "_");
    PlayerTextDrawBackgroundColor(playerid,TOPTD1[playerid], 255);
    PlayerTextDrawFont(playerid,TOPTD1[playerid], 1);
    PlayerTextDrawLetterSize(playerid,TOPTD1[playerid], 0.180000, 1.300000);
    PlayerTextDrawColor(playerid,TOPTD1[playerid], -1);
    PlayerTextDrawSetOutline(playerid,TOPTD1[playerid], 1);
    PlayerTextDrawSetProportional(playerid,TOPTD1[playerid], 1);
    PlayerTextDrawSetSelectable(playerid,TOPTD1[playerid], 0);

    TOPTD2[playerid] = CreatePlayerTextDraw(playerid,38.000000, 329.000000, "TIEMPO RONDA: 100 SEGUNDO/S");
    PlayerTextDrawBackgroundColor(playerid,TOPTD2[playerid], 255);
    PlayerTextDrawFont(playerid,TOPTD2[playerid], 1);
    PlayerTextDrawLetterSize(playerid,TOPTD2[playerid], 0.180000, 1.000000);
    PlayerTextDrawColor(playerid,TOPTD2[playerid], -1);
    PlayerTextDrawSetOutline(playerid,TOPTD2[playerid], 1);
    PlayerTextDrawSetProportional(playerid,TOPTD2[playerid], 1);
    PlayerTextDrawSetSelectable(playerid,TOPTD2[playerid], 0);

	static X2[35];
	PTDShow(playerid, TheLastShotLogo2[playerid]);
	PTDShow(playerid, TheLastShotLogo1[playerid]);
	format(X2, sizeof(X2), "%s", RangoNombreTD[NIVEL_KILLS[playerid]-1]);
	PTDShow(playerid, RangoJugadorTD[playerid]);
	PlayerTextDrawSetString(playerid, RangoJugadorTD[playerid], X2);

	new y=0;
	while(y != SELECTION_ITEMS) {
        gSelectionItems[playerid][y] = PlayerText:INVALID_TEXT_DRAW;
        y++;
	}

	gItemAt[playerid] = 0;
	return 1;
}

funcion Inicio(playerid){
    LimpiarChat(playerid);
	RevisarPlayer(playerid);
	KillTimerEx(playerid, 7);
	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
	//Guardamos las variables más importantes:
    new ano, mes, dia;
	getdate(ano, mes, dia);
	format(queryx, sizeof(queryx), "UPDATE `jugadores` SET Muteado=%d, MinMute=%d, MuteSeg=%d, Encarcelado=%d, JailMin=%d, JailSeg=%d, Dinero=%d, TT3=%d, TT4=%d, TT5=%d, Muertes=%d, Puntaje=%d, PuntajeGeneral=%d WHERE Nombre='%s'", Mute[playerid], Digito1Mute[playerid], Digito2Mute[playerid], Encarcelado[playerid], Digito1Jail[playerid], Digito2Jail[playerid], DineroJugador[playerid], dia, mes, ano, Muertes[playerid], PuntajeJugador[playerid], ScoreGeneralJugador[playerid], GetName(playerid));
    mysql_function_query(Conexion, queryx, true, "OnQueryFinish", "ii", 2, playerid);
    EstadisticasRangoAsesino(playerid);
    //Ponemos el icono de salida en la tabla de muertes:
    SendDeathMessage(INVALID_PLAYER_ID, playerid, 201);
    //Si está en un minijuego:
    if(EnGameJuego[playerid] == 1) JugadoresCantidadMinijuegos[0] -= 1;
    if(EnGameJuego[playerid] == 2) JugadoresCantidadMinijuegos[1] -= 1;
    if(EnGameJuego[playerid] == 3) JugadoresCantidadMinijuegos[2] -= 1;
    if(EnGameJuego[playerid] == 4) JugadoresCantidadMinijuegos[3] -= 1;
    if(EnGameJuego[playerid] == 5) JugadoresCantidadMinijuegos[4] -= 1;
    if(EnGameJuego[playerid] == 6) JugadoresCantidadMinijuegos[5] -= 1;
    if(EnGameJuego[playerid] == 7) JugadoresCantidadMinijuegos[6] -= 1;
    if(EnGameJuego[playerid] == 8) JugadoresCantidadMinijuegos[7] -= 1;
    if(EnGameJuego[playerid] == 9) JugadoresCantidadMinijuegos[8] -= 1;
    if(EnGameJuego[playerid] == 10) JugadoresCantidadMinijuegos[9] -= 1;
    if(EnGameJuego[playerid] == 11) JugadoresCantidadMinijuegos[10] -= 1;
    if(EnGameJuego[playerid] == 12) JugadoresCantidadMinijuegos[11] -= 1;
    if(EnGameJuego[playerid] == 13) JugadoresCantidadMinijuegos[12] -= 1;
    if(EnGameJuego[playerid] == 14) JugadoresCantidadMinijuegos[13] -= 1;
    if(EnGameJuego[playerid] == 15) JugadoresCantidadMinijuegos[14] -= 1;
    if(EnGameJuego[playerid] == 16) JugadoresCantidadMinijuegos[15] -= 1;
    //Si está en eventos, ya sea normales o deathmatch:
    if(EnEventoPlayer[playerid] == 1) ParticipantesEvento--, EnEventoPlayer[playerid] = 0;
    if(JugadorEnDMM[playerid] == true)
    {
        ResetearVariablesM(playerid);
		JugadoresDentro--;
		JugadorEnDMM[playerid] = false;
        if(JugadoresDentro >= JugadoresNecesariosDM)
		{
		    StopMapa();
  		}
	}
	//Funciones Varias:
	JugadorIdentificado[playerid] = 0;
	KillTimerEx(playerid, 2);
 	IPActualizar[playerid] = 0;
	KillTimerEx(playerid, 22);
	//Si estaba dentro de un auto con el TextDraw activado lo destruimos:
	HideProgressBarForPlayer(playerid, VelocimetroL[playerid]);
 	if(IsPlayerInAnyVehicle(playerid))
 	{
	    KillTimer(VelocimetroTimer[playerid]);
        DestroyProgressBar(VelocimetroL[playerid]);
		VelocimetroL[playerid] = INVALID_BAR_ID;
		PlayerTextDrawHide(playerid, VelocidadKMH);
	}
	//Enviamos un mensaje a los administradores de la razón de salida:
	switch(reason)
	{
	    case 0: format(stringj, sizeof(stringj), "* AdminInfo SALIÓ: %s ha dejado el servidor. (Crash)", GetName(playerid));
	    case 1: format(stringj, sizeof(stringj), "* AdminInfo SALIÓ: %s ha dejado el servidor. (Quit)", GetName(playerid));
	    case 2: format(stringj, sizeof(stringj), "* AdminInfo SALIÓ: %s ha dejado el servidor. (Kickeado/Baneado)", GetName(playerid));
    }
	AdminInfoOtro(stringj);
	//Sistema de carreras:
	if(playerid == DueloID1 || playerid == DueloID2)	{	DueloEnProgreso = 0;	}
	if(Joined[playerid] == true)
    {
		JoinCount--;
		Joined[playerid] = false;
		DestroyVehicle(CreatedRaceVeh[playerid]);
		DisablePlayerRaceCheckpoint(playerid);
		CPProgess[playerid] = 0;
		KillTimer(InfoTimer[playerid]);
		#if defined RACE_IN_OTHER_WORLD
		SetPlayerVirtualWorld(playerid, 0);
		#endif
	}
	if(BuildRace == playerid+1) BuildRace = 0;
	// Reseteamos todas las variables para el próximo jugador con ese ID:
	ResetarVariables(playerid); 
	return 1;
}

funcion Spawn(playerid){
	SpawnPlayer(playerid);
	SetCameraBehindPlayer(playerid);
	JugadorYaSpawneado1vez[playerid] = 2;
	KillTimerEx(playerid, 1);
	return 1;
}

public OnPlayerSpawn(playerid)
{
	KillTimerEx(playerid, Cargar_DatosTimer[playerid]);
	GameTextForPlayer(playerid,"~g~~h~~h~Spawneando...", 1200, 3);
    OnPlayerSpawnFunctions(playerid);
    EstadisticasInfo(playerid);
    EstadisticasRangoAsesino(playerid);
    return 1;
}

funcion ComprobarGame(playerid)
{
	if(EnGameJuego[playerid] == 1){
    SetTimerXP(playerid, 15, "JuegoRegresar0", 900);}
    else if(EnGameJuego[playerid] == 2){
    SetTimerXP(playerid, 15, "JuegoRegresar1", 900);}
    else if(EnGameJuego[playerid] == 3){
    SetTimerXP(playerid, 15, "JuegoRegresar2", 900);}
    else if(EnGameJuego[playerid] == 4){
    SetTimerXP(playerid, 15, "JuegoRegresar3", 900);}
    else if(EnGameJuego[playerid] == 5){
    SetTimerXP(playerid, 15, "JuegoRegresar4", 900);}
    else if(EnGameJuego[playerid] == 6){
    SetTimerXP(playerid, 15, "JuegoRegresar5", 900);}
    else if(EnGameJuego[playerid] == 7){
    SetTimerXP(playerid, 15, "JuegoRegresar6", 900);}
	else if(EnGameJuego[playerid] == 8){
    SetTimerXP(playerid, 15, "JuegoRegresar7", 900);}
    else if(EnGameJuego[playerid] == 9){
    SetTimerXP(playerid, 15, "JuegoRegresar8", 900);}
    else if(EnGameJuego[playerid] == 10){
    SetTimerXP(playerid, 15, "JuegoRegresar9", 900);}
    else if(EnGameJuego[playerid] == 11){
    SetTimerXP(playerid, 15, "JuegoRegresar10", 900);}
    else if(EnGameJuego[playerid] == 12){
    SetTimerXP(playerid, 15, "JuegoRegresar11", 900);}
    else if(EnGameJuego[playerid] == 13){
    SetTimerXP(playerid, 15, "JuegoRegresar12", 900);}
    else if(EnGameJuego[playerid] == 14){
    SetTimerXP(playerid, 15, "JuegoRegresar13", 900);}
    else if(EnGameJuego[playerid] == 15){
    SetTimerXP(playerid, 15, "JuegoRegresar14", 900);}
    else if(EnGameJuego[playerid] == 16){
    SetTimerXP(playerid, 15, "JuegoRegresar15", 900);}
	return 1;
}
funcion OnPlayerSpawnFunctions(playerid) {
	Niveles(playerid);
	ComprobarGame(playerid);
	if(JugadorRegistrado[playerid] == 0) NIVEL_KILLS[playerid] = 0, MAX_KILLSASESINO[playerid] = 1, KillsAsesino[playerid] = 0;
	SetPlayerWeather(playerid, 0);
	EstadisticasRangoAsesino(playerid);
	IPActualizar[playerid] = 0;
	if(TieneSpawnJugador[playerid] == 1) SpawnearEnOtroLadoSpawn(playerid);
	if(TieneSpawnJugador[playerid] == 0) FuncionesLogeo(playerid);
   	SetPlayerTime(playerid, 12, 0);
    TogglePlayerClock(playerid, 1);
    JugadorIdentificado[playerid] = 1;
    GetPlayerIp(playerid, IPa[playerid], 16);
    //CagarTextLabel(playerid);
   	if(DarAntiSpawnKill[playerid] == false) AJugadorSpawnKill(playerid);
	if(QuitarMusicaInicio[playerid] == 1) StopAudioStreamForPlayer(playerid);	QuitarMusicaInicio[playerid] = 0;
	KillTimerEx(playerid, 8);
	PTDHide(playerid, INICIOTD0[playerid]); PTDHide(playerid, INICIOTD1[playerid]); TDHide(playerid, EquipoTD0); TDHide(playerid, EquipoTD1);
	ResetPlayerMoney(playerid);
	SetPlayerScore(playerid, ScoreGeneralJugador[playerid]);
	GivePlayerMoney(playerid, DineroJugador[playerid]);
	PTDHide(playerid, AYUDAINICIO[0]);
 	PTDHide(playerid, AYUDAINICIO[1]);
 	PTDHide(playerid, AYUDAINICIO[2]);
	if(CArma[playerid][20] == 0){
	    if(JugadorYaSpawneado1vez[playerid] == 0){
	    //SendClientMessage(playerid, -1, "{FFBA00}Escribe: /carmas si deseas de cambiar de armas. Usa: /mis armas para editar tus armas.");
	    JugadorYaSpawneado1vez[playerid] = 1;}
	    ResetPlayerWeapons(playerid);
	    GivePlayerWeapon(playerid, 24, 50);
    	GivePlayerWeapon(playerid, 26, 3500);
    	GivePlayerWeapon(playerid, 31, 250);
    	GivePlayerWeapon(playerid, 34, 10);
 	}
 	if(CArma[playerid][20] == 1){
 	    ResetPlayerWeapons(playerid);
    	GivePlayerWeapon(playerid, CArma[playerid][0], 70);
    	GivePlayerWeapon(playerid, CArma[playerid][1], 70);
    	GivePlayerWeapon(playerid, CArma[playerid][2], 250);
    	GivePlayerWeapon(playerid, CArma[playerid][3], 250);
    	GivePlayerWeapon(playerid, CArma[playerid][4], 50);
        if(JugadorYaSpawneado1vez[playerid] == 0){
    	//SendClientMessage(playerid, -1, "{FFBA00}Escribe: /carmas si deseas de cambiar de armas. Usa: /mis armas para editar tus armas.");
    	JugadorYaSpawneado1vez[playerid] = 1;}
    	CArma[playerid][20] = 1;
 	}
 	if(CArma[playerid][20] == 2){
 	    ResetPlayerWeapons(playerid);
    	GivePlayerWeapon(playerid, CArma[playerid][5], 70);
    	GivePlayerWeapon(playerid, CArma[playerid][6], 70);
    	GivePlayerWeapon(playerid, CArma[playerid][7], 250);
    	GivePlayerWeapon(playerid, CArma[playerid][8], 250);
    	GivePlayerWeapon(playerid, CArma[playerid][9], 50);
    	if(JugadorYaSpawneado1vez[playerid] == 0){
    	//SendClientMessage(playerid, -1, "{FFBA00}Escribe: /carmas si deseas de cambiar de armas. Usa: /mis armas para editar tus armas.");
    	JugadorYaSpawneado1vez[playerid] = 1;}
    	CArma[playerid][20] = 2;
 	}
 	if(CArma[playerid][20] == 3){
 	    ResetPlayerWeapons(playerid);
    	GivePlayerWeapon(playerid, CArma[playerid][10], 70);
    	GivePlayerWeapon(playerid, CArma[playerid][11], 70);
    	GivePlayerWeapon(playerid, CArma[playerid][12], 250);
    	GivePlayerWeapon(playerid, CArma[playerid][13], 250);
    	GivePlayerWeapon(playerid, CArma[playerid][14], 50);
    	if(JugadorYaSpawneado1vez[playerid] == 0){
    	//SendClientMessage(playerid, -1, "{FFBA00}Escribe: /carmas si deseas de cambiar de armas. Usa: /mis armas para editar tus armas.");
    	JugadorYaSpawneado1vez[playerid] = 1;}
    	CArma[playerid][20] = 3;
 	}
    if(Administrador[playerid] >= 1 && MandarMensajeAdmin[playerid] == 1)
	{
	    new Z[120];
		format(Z, sizeof(Z), "* AdminInfo: %s(id:%d) se identifico como Administrador nivel %d.", GetName(playerid), playerid, Administrador[playerid]);
   		AdminInfoOtro(Z);
   		MandarMensajeAdmin[playerid] = 0;
   	}
   	if(PonerSkin[playerid] == 1)
	{
 		SkinPlayer[playerid] = GetPlayerSkin(playerid);
		PonerSkin[playerid] = 0;
		NoSALTO[playerid] = 1;
		DineroJugador[playerid] = 5000;
		ResetPlayerMoney(playerid);
		GivePlayerMoney(playerid, DineroJugador[playerid]);
		EstadisticasInfo(playerid);
	}
	else
	{
	    SetPlayerSkin(playerid, SkinPlayer[playerid]);
	}
 	if(EnClan[playerid] == 1)
 	{
		if(SkinClan[playerid] > -1)
		    SetPlayerSkin(playerid, SkinClan[playerid]);
  		else
  		    SkinClan[playerid] = -1;
  		    
    	if(ColorClan[playerid] != -1)
		    SetPlayerColor(playerid, ColorClan[playerid]);
  		else
  		    ColorClan[playerid] = -1;
	}
	else
	{
		EnClan[playerid] = 0;
		SetPlayerSkin(playerid, SkinPlayer[playerid]);
	}
	if(JugadorEnDMM[playerid] == true && DeathMatch == true && msvv == 0)
	{
		RegresarAlJuego(playerid);
	}
	HSc[playerid] = true;
	if(EnClan[playerid] == 0){ SetPlayerSkin(playerid, SkinPlayer[playerid]); }
	if(Encarcelado[playerid] == 1) stringTime2Jail[playerid] = SetTimerEx("RegresarJugadorJail", 1000, false, "i", playerid);
	if(Mute[playerid] == 1) stringTime2Mute[playerid] = SetTimerEx("RegresarJugadorMute", 1000, false, "i", playerid);
    //if(SiSumar[playerid] == 1){ JugadorMurio(playerid); SiSumar[playerid] = 0; return 1; }
    if(MODO_PELEA[playerid] == 0){
   	SetPlayerFightingStyle (playerid, FIGHT_STYLE_NORMAL);
   	}
   	else if(MODO_PELEA[playerid] == 1){
   	SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING);
   	}
   	else if(MODO_PELEA[playerid] == 2){
   	SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU);
   	}
   	else if(MODO_PELEA[playerid] == 3){
   	SetPlayerFightingStyle (playerid, FIGHT_STYLE_ELBOW);
   	}
   	else if(MODO_PELEA[playerid] == 4){
   	SetPlayerFightingStyle (playerid, FIGHT_STYLE_GRABKICK);
   	}
    return 1;
 }

 //REGRESAR A LOS MINIJUGOS
funcion JuegoRegresar0(playerid)
{
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~w~"a_xa"mini-juego ~n~~r~~h~ minigun~w~!", 8000, 5);
	new rand = random(sizeof(M1));
	SetPlayerInterior(playerid, 1);
	SetPlayerVirtualWorld(playerid, 90);
	ResetPlayerWeapons(playerid);
	EstaDM[playerid] = 1;
	EnGameJuego[playerid] = 1;
	GivePlayerWeapon(playerid, 38, 1500);
	SetPlayerPos(playerid, M1[rand][0], M1[rand][1], M1[rand][2]);
 	//JugadoresCantidadMinijuegos[0] += 1;
	SendClientMessage(playerid, -1,"{FFFF00}* ¡Has regresado al Minijuego donde moriste por última vez!");
	SendClientMessage(playerid, -1,"{FFFF00} - Recuerda que para salir del Minijuego debes escribir: /salir.");
	KillTimerEx(playerid, 15);
	return 1;
}

funcion JuegoRegresar1(playerid)
{
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~w~"a_xa"mini-juego ~n~~r~~h~ minigun 2~w~!", 8000, 5);
	new rand = random(sizeof(M2));
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 92);
	ResetPlayerWeapons(playerid);
	EstaDM[playerid] = 1;
	EnGameJuego[playerid] = 2;
	GivePlayerWeapon(playerid, 38, 1500);
	SetPlayerPos(playerid, M2[rand][0], M2[rand][1], M2[rand][2]);
 	//JugadoresCantidadMinijuegos[1] += 1;
 	SendClientMessage(playerid, -1,"{FFFF00}* ¡Has regresado al Minijuego donde moriste por última vez!");
	SendClientMessage(playerid, -1,"{FFFF00} - Recuerda que para salir del Minijuego debes escribir: /salir.");
	KillTimerEx(playerid, 15);
	return 1;
}

funcion JuegoRegresar2(playerid)
{
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~w~"a_xa"mini-juego ~n~~r~~h~ minigun 3~w~!", 8000, 5);
	new rand = random(sizeof(RW2));
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 93);
	ResetPlayerWeapons(playerid);
	EstaDM[playerid] = 1;
	EnGameJuego[playerid] = 3;
	GivePlayerWeapon(playerid, 38, 1500);
	SetPlayerPos(playerid, RW2[rand][0], RW2[rand][1], RW2[rand][2]);
 	//JugadoresCantidadMinijuegos[2] += 1;
 	SendClientMessage(playerid, -1,"{FFFF00}* ¡Has regresado al Minijuego donde moriste por última vez!");
	SendClientMessage(playerid, -1,"{FFFF00} - Recuerda que para salir del Minijuego debes escribir: /salir.");
	KillTimerEx(playerid, 15);
	return 1;
}

funcion JuegoRegresar3(playerid)
{
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~w~"a_xa"mini-juego ~n~~r~~h~ sniper~w~!", 8000, 5);
	new rand = random(sizeof(SNP));
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 94);
	ResetPlayerWeapons(playerid);
	EstaDM[playerid] = 1;
	EnGameJuego[playerid] = 4;
	GivePlayerWeapon(playerid, 34, 1500);
	SetPlayerPos(playerid, SNP[rand][0], SNP[rand][1], SNP[rand][2]);
 	//JugadoresCantidadMinijuegos[3] += 1;
 	SendClientMessage(playerid, -1,"{FFFF00}* ¡Has regresado al Minijuego donde moriste por última vez!");
	SendClientMessage(playerid, -1,"{FFFF00} - Recuerda que para salir del Minijuego debes escribir: /salir.");
	KillTimerEx(playerid, 15);
	return 1;
}

funcion JuegoRegresar4(playerid)
{
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~w~"a_xa"mini-juego ~n~~r~~h~ motosierra~w~!", 8000, 5);
	new rand = random(sizeof(MS1));
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 96);
	ResetPlayerWeapons(playerid);
	EstaDM[playerid] = 1;
	EnGameJuego[playerid] = 5;
	GivePlayerWeapon(playerid, 9, 1);
	SetPlayerPos(playerid, MS1[rand][0], MS1[rand][1], MS1[rand][2]);
 	//JugadoresCantidadMinijuegos[4] += 1;
 	SendClientMessage(playerid, -1,"{FFFF00}* ¡Has regresado al Minijuego donde moriste por última vez!");
	SendClientMessage(playerid, -1,"{FFFF00} - Recuerda que para salir del Minijuego debes escribir: /salir.");
	KillTimerEx(playerid, 15);
	return 1;
}

funcion JuegoRegresar5(playerid)
{
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~w~"a_xa"mini-juego ~n~~r~~h~ Rocket~w~!", 8000, 5);
	new rand = random(sizeof(RC2));
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 97);
	ResetPlayerWeapons(playerid);
	EstaDM[playerid] = 1;
	EnGameJuego[playerid] = 6;
	GivePlayerWeapon(playerid, 36, 9999);
	SetPlayerPos(playerid, RC2[rand][0], RC2[rand][1], RC2[rand][2]);
 	SendClientMessage(playerid, -1,"{FFFF00}* ¡Has regresado al Minijuego donde moriste por última vez!");
	SendClientMessage(playerid, -1,"{FFFF00} - Recuerda que para salir del Minijuego debes escribir: /salir.");
	KillTimerEx(playerid, 15);
	return 1;
}

funcion JuegoRegresar6(playerid)
{
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~w~"a_xa"mini-juego ~n~~r~~h~ paintball~w~!", 8000, 5);
	new rand = random(sizeof(M1));
	SetPlayerInterior(playerid, 1);
	SetPlayerVirtualWorld(playerid, 90);
	ResetPlayerWeapons(playerid);
	SetPlayerHealth(playerid, 15.0);
	SetPlayerArmour(playerid, 0.0);
	EstaDM[playerid] = 1;
	EnGameJuego[playerid] = 7;
 	//JugadoresCantidadMinijuegos[6] += 1;
	DarAntiSpawnKill[playerid] = true;
	GivePlayerWeapon(playerid, 24, 1500);
	GivePlayerWeapon(playerid, 25, 1500);
	GivePlayerWeapon(playerid, 34, 1500);
	GivePlayerWeapon(playerid, 31, 1500);
	SetPlayerPosEx(playerid, PBSpawnsRand[rand][0], PBSpawnsRand[rand][1], PBSpawnsRand[rand][2], PBSpawnsRand[rand][3], 10, 0);
 	//JugadoresCantidadMinijuegos[8] += 1;
 	SendClientMessage(playerid, -1,"{FFFF00}* ¡Has regresado al Minijuego donde moriste por última vez!");
	SendClientMessage(playerid, -1,"{FFFF00} - Recuerda que para salir del Minijuego debes escribir: /salir.");
	KillTimerEx(playerid, 15);
	return 1;
}

//ZONAS DM
funcion JuegoRegresar9(playerid)
{
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~w~"a_xa"mini-juego ~n~~r~~h~ Zona DM~w~!", 8000, 5);
	new rand = random(sizeof(ZDM1));
	ResetPlayerWeapons(playerid);
	SetPlayerHealth(playerid, 99.0);
	SetPlayerArmour(playerid, 99.0);
	EstaDM[playerid] = 1;
	EnGameJuego[playerid] = 10;
	DarAntiSpawnKill[playerid] = true;
	GivePlayerWeapon(playerid, 24, 1500);
	GivePlayerWeapon(playerid, 25, 1500);
	GivePlayerWeapon(playerid, 34, 1500);
	GivePlayerWeapon(playerid, 31, 1500);
	SetPlayerPosEx(playerid, ZDM1[rand][0], ZDM1[rand][1], ZDM1[rand][2], ZDM1[rand][3], 1, 94);
 	//JugadoresCantidadMinijuegos[9] += 1;
 	SendClientMessage(playerid, -1,"{FFFF00}* ¡Has regresado al Minijuego donde moriste por última vez!");
	SendClientMessage(playerid, -1,"{FFFF00} - Recuerda que para salir del Minijuego debes escribir: /salir.");
	KillTimerEx(playerid, 15);
	return 1;
}

funcion JuegoRegresar10(playerid)
{
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~w~"a_xa"mini-juego ~n~~r~~h~ Zona DM2~w~!", 8000, 5);
	new rand = random(sizeof(ZDM2));
	ResetPlayerWeapons(playerid);
	SetPlayerHealth(playerid, 99.0);
	SetPlayerArmour(playerid, 99.0);
	EstaDM[playerid] = 1;
	EnGameJuego[playerid] = 11;
	DarAntiSpawnKill[playerid] = true;
	GivePlayerWeapon(playerid, 24, 1500);
	GivePlayerWeapon(playerid, 25, 1500);
	GivePlayerWeapon(playerid, 34, 1500);
	GivePlayerWeapon(playerid, 31, 1500);
	SetPlayerPosEx(playerid, ZDM2[rand][0], ZDM2[rand][1], ZDM2[rand][2], ZDM2[rand][3], 18, 96);
 	SendClientMessage(playerid, -1,"{FFFF00}* ¡Has regresado al Minijuego donde moriste por última vez!");
	SendClientMessage(playerid, -1,"{FFFF00} - Recuerda que para salir del Minijuego debes escribir: /salir.");
	KillTimerEx(playerid, 15);
	return 1;
}

funcion JuegoRegresar11(playerid)
{
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~w~"a_xa"mini-juego ~n~~r~~h~ Zona DM3~w~!", 8000, 5);
	new rand = random(sizeof(ZDM3));
	ResetPlayerWeapons(playerid);
	SetPlayerHealth(playerid, 99.0);
	SetPlayerArmour(playerid, 99.0);
	EstaDM[playerid] = 1;
	EnGameJuego[playerid] = 12;
	DarAntiSpawnKill[playerid] = true;
	GivePlayerWeapon(playerid, 24, 1500);
	GivePlayerWeapon(playerid, 25, 1500);
	GivePlayerWeapon(playerid, 34, 1500);
	GivePlayerWeapon(playerid, 31, 1500);
	SetPlayerPosEx(playerid, ZDM3[rand][0], ZDM3[rand][1], ZDM3[rand][2], ZDM3[rand][3], 16, 97);
 	SendClientMessage(playerid, -1,"{FFFF00}* ¡Has regresado al Minijuego donde moriste por última vez!");
	SendClientMessage(playerid, -1,"{FFFF00} - Recuerda que para salir del Minijuego debes escribir: /salir.");
	KillTimerEx(playerid, 15);
	return 1;
}

funcion JuegoRegresar12(playerid)
{
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~w~"a_xa"mini-juego ~n~~r~~h~ Zona DM4~w~!", 8000, 5);
	new rand = random(sizeof(ZDM4));
	ResetPlayerWeapons(playerid);
	SetPlayerHealth(playerid, 99.0);
	SetPlayerArmour(playerid, 99.0);
	EstaDM[playerid] = 1;
	EnGameJuego[playerid] = 13;
	DarAntiSpawnKill[playerid] = true;
	GivePlayerWeapon(playerid, 24, 1500);
	GivePlayerWeapon(playerid, 25, 1500);
	GivePlayerWeapon(playerid, 34, 1500);
	GivePlayerWeapon(playerid, 31, 1500);
	SetPlayerPosEx(playerid, ZDM4[rand][0], ZDM4[rand][1], ZDM4[rand][2], ZDM4[rand][3], 7, 98);
 	SendClientMessage(playerid, -1,"{FFFF00}* ¡Has regresado al Minijuego donde moriste por última vez!");
	SendClientMessage(playerid, -1,"{FFFF00} - Recuerda que para salir del Minijuego debes escribir: /salir.");
	KillTimerEx(playerid, 15);
	return 1;
}

funcion JuegoRegresar13(playerid)
{
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~w~"a_xa"mini-juego ~n~~r~~h~ Zona DM5~w~!", 8000, 5);
	new rand = random(sizeof(ZDM1));
	ResetPlayerWeapons(playerid);
	SetPlayerHealth(playerid, 99.0);
	SetPlayerArmour(playerid, 99.0);
	EstaDM[playerid] = 1;
	EnGameJuego[playerid] = 14;
	DarAntiSpawnKill[playerid] = true;
	GivePlayerWeapon(playerid, 22, 1500);
	GivePlayerWeapon(playerid, 26, 6500);
	GivePlayerWeapon(playerid, 28, 1500);
	SetPlayerPosEx(playerid, ZDM1[rand][0], ZDM1[rand][1], ZDM1[rand][2], ZDM1[rand][3], 1, 194);
 	SendClientMessage(playerid, -1,"{FFFF00}* ¡Has regresado al Minijuego donde moriste por última vez!");
	SendClientMessage(playerid, -1,"{FFFF00} - Recuerda que para salir del Minijuego debes escribir: /salir.");
	KillTimerEx(playerid, 15);
	return 1;
}

funcion JuegoRegresar14(playerid)
{
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~w~"a_xa"mini-juego ~n~~r~~h~ Zona DM6~w~!", 8000, 5);
	new rand = random(sizeof(ZDM2));
	ResetPlayerWeapons(playerid);
	SetPlayerHealth(playerid, 99.0);
	SetPlayerArmour(playerid, 99.0);
	EstaDM[playerid] = 1;
	EnGameJuego[playerid] = 15;
	DarAntiSpawnKill[playerid] = true;
	GivePlayerWeapon(playerid, 22, 1500);
	GivePlayerWeapon(playerid, 26, 6500);
	GivePlayerWeapon(playerid, 28, 1500);
	SetPlayerPosEx(playerid, ZDM2[rand][0], ZDM2[rand][1], ZDM2[rand][2], ZDM2[rand][3], 18, 195);
 	SendClientMessage(playerid, -1,"{FFFF00}* ¡Has regresado al Minijuego donde moriste por última vez!");
	SendClientMessage(playerid, -1,"{FFFF00} - Recuerda que para salir del Minijuego debes escribir: /salir.");
	KillTimerEx(playerid, 15);
	return 1;
}

funcion JuegoRegresar15(playerid)
{
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~w~"a_xa"mini-juego ~n~~r~~h~ Zona DM7~w~!", 8000, 5);
	new rand = random(sizeof(ZDM3));
	ResetPlayerWeapons(playerid);
	SetPlayerHealth(playerid, 99.0);
	SetPlayerArmour(playerid, 99.0);
	EstaDM[playerid] = 1;
	EnGameJuego[playerid] = 16;
	DarAntiSpawnKill[playerid] = true;
	GivePlayerWeapon(playerid, 22, 1500);
	GivePlayerWeapon(playerid, 26, 6500);
	GivePlayerWeapon(playerid, 28, 1500);
	SetPlayerPosEx(playerid, ZDM3[rand][0], ZDM3[rand][1], ZDM3[rand][2], ZDM3[rand][3], 16, 197);
 	SendClientMessage(playerid, -1,"{FFFF00}* ¡Has regresado al Minijuego donde moriste por última vez!");
	SendClientMessage(playerid, -1,"{FFFF00} - Recuerda que para salir del Minijuego debes escribir: /salir.");
	KillTimerEx(playerid, 15);
	return 1;
}

 funcion CagarTextLabel(playerid)
 {
	if(Cabecero[playerid] == 0) Delete3DTextLabel(LabelCabecero[playerid]);
	if(Cabecero[playerid] == 1) CabeceroAgregar(playerid, 0xFFFF00F4, TEXTO_CABECERO[playerid]);
	if(Cabecero[playerid] == 2) CabeceroAgregar(playerid, 0xFF0000F4, TEXTO_CABECERO[playerid]);
	if(Cabecero[playerid] == 3) CabeceroAgregar(playerid, 0x00DEE6BE, TEXTO_CABECERO[playerid]);
	if(Cabecero[playerid] == 4) CabeceroAgregar(playerid, 0x00EE00BE, TEXTO_CABECERO[playerid]);
	if(Cabecero[playerid] == 5) CabeceroAgregar(playerid, 0x00000000, TEXTO_CABECERO[playerid]);
	if(Cabecero[playerid] == 6) CabeceroAgregar(playerid, 0x97AABFFF, TEXTO_CABECERO[playerid]);
	if(Cabecero[playerid] == 7) CabeceroAgregar(playerid, 0xE7FF55FF, TEXTO_CABECERO[playerid]);
 	return 1;
 }

funcion RegresarJugadorEvento(playerid)
{
	KillTimer(RegresarEvento[playerid]);
	if(EventoEnCurso == 1){
	if(RoAEquipo[playerid] == EQUIPO_ROJO)
	{
		//new rand = random(sizeof(PosicionesRojos));
		switch(random(2))//Evita salir en la misma posición y hacer que se inmovilicen otros
		{
			case 0: SetPlayerPosEx(playerid, -1927.916748, -2874.566650 + 3, 4.686317, 66.405227, 0, 50494);
			case 1: SetPlayerPosEx(playerid, -1927.916748 + 3, -2874.566650, 4.686317, 66.405227, 0, 50494);
		}
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 24, 1000);
		GivePlayerWeapon(playerid, 34, 100);
		GivePlayerWeapon(playerid, 31, 1000);
		GivePlayerWeapon(playerid, 25, 100);
		SetPlayerColor(playerid, 0xB30000FF);
	}
	else if(RoAEquipo[playerid] == EQUIPO_AZUL)
	{
		switch(random(2))
		{
			case 0: SetPlayerPosEx(playerid, -1801.379150, -2802.111816 + 3, 4.627378, 60.600730, 0, 50494);
			case 1: SetPlayerPosEx(playerid, -1801.379150 + 3, -2802.111816, 4.627378, 60.600730, 0, 50494);
		}
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 24, 1000);
		GivePlayerWeapon(playerid, 34, 100);
		GivePlayerWeapon(playerid, 31, 1000);
		GivePlayerWeapon(playerid, 25, 100);
		SetPlayerColor(playerid, 0x0084FFFF);
	}
	}
	else if(EventoEnCurso == 2)
	{
	if(RoAEquipo[playerid] == EQUIPO_ROJO)
	{
		//GameTextForPlayer(playerid, "_~n~_~n~_~n~_~n~_~g~~h~~h~Eres del equipo Grove!", 1000, 6);
		//ShowPlayerDialog(playerid, AYUDAEVENTO, DIALOG_STYLE_MSGBOX, "{009FFF}Ayuda Eventos:", "{FFFFFF}Entraste al evento {00BE03}Grove v{DD0095}s Ballas.\n{FFFFFF}En este evento tendrás que llegar a 100 kills para poder ganar.\n{FFFFFF}El primer Equipo en llegar a los 100 kills ganará..\n{FFFFFF}Habrá dos Equipos, {00BE03}Grove {FFFFFF}y {DD0095}Balla{FFFFFF} y serás elegidos al azar por el sistema.", "Aceptar", "");
		PlayerTextDrawShow(playerid, TeamKills[0][playerid]);
		PlayerTextDrawShow(playerid, TeamKills[1][playerid]);
		switch(random(3))//Evita salir en la misma posición y hacer que se inmovilicen otros
		{
			case 0: SetPlayerPosEx(playerid, 2536.292480, -1664.624877, 15.155521, 182.285507, 0, 203);
			case 1: SetPlayerPosEx(playerid, 2511.974365, -1705.536865, 13.432870, 14.671751, 0, 203);
			case 2: SetPlayerPosEx(playerid, 2503.652099, -1640.858398, 13.515241, 171.256103, 0, 203);
		}
		switch(random(3))//Evita salir en la misma posición y hacer que se inmovilicen otros
		{
			case 0: SetPlayerSkin(playerid, 105);
			case 1: SetPlayerSkin(playerid, 106);
			case 2: SetPlayerSkin(playerid, 107);
		}
		SendClientMessage(playerid, -1, "{FFE900}*** ¡Recibiste un skin Grove al azar! Puedes cambiarlo si no te sientes comodo, usa: /skin [modelo].");
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 24, 1000);
		GivePlayerWeapon(playerid, 34, 100);
		GivePlayerWeapon(playerid, 31, 1000);
		GivePlayerWeapon(playerid, 25, 100);
		SetPlayerColor(playerid, 0x00BE03FF);
		PlayerTextDrawShow(playerid, TeamKills[3][playerid]);
	}
	else if(RoAEquipo[playerid] == EQUIPO_AZUL)
	{
		//GameTextForPlayer(playerid, "_~n~_~n~_~n~_~n~_~b~~h~~h~Eres del equipo Balla!", 1000, 6);
		//ShowPlayerDialog(playerid, AYUDAEVENTO, DIALOG_STYLE_MSGBOX, "{009FFF}Ayuda Eventos:", "{FFFFFF}Entraste al evento {00BE03}Grove v{DD0095}s Ballas.\n{FFFFFF}En este evento tendrás que llegar a 100 kills para poder ganar.\n{FFFFFF}El primer Equipo en llegar a los 100 kills ganará..\n{FFFFFF}Habrá dos Equipos, {00BE03}Grove {FFFFFF}y {DD0095}Balla{FFFFFF} y serás elegidos al azar por el sistema.", "Aceptar", "");
		PlayerTextDrawShow(playerid, TeamKills[0][playerid]);
		PlayerTextDrawShow(playerid, TeamKills[1][playerid]);
		switch(random(3))//Evita salir en la misma posición y hacer que se inmovilicen otros
		{
			case 0: SetPlayerPosEx(playerid, 2362.344238, -1678.398193, 13.547405, 3.518918, 0, 203);
			case 1: SetPlayerPosEx(playerid, 2357.182617, -1639.988037, 13.496489, 180.530822, 0, 203);
			case 2: SetPlayerPosEx(playerid, 2385.394775, -1636.728149, 13.492415, 179.193984, 0, 203);
		}
		switch(random(3))//Evita salir en la misma posición y hacer que se inmovilicen otros
		{
			case 0: SetPlayerSkin(playerid, 102);
			case 1: SetPlayerSkin(playerid, 103);
			case 2: SetPlayerSkin(playerid, 104);
		}
		SendClientMessage(playerid, -1, "{FFE900}*** ¡Recibiste un skin Balla al azar! Puedes cambiarlo si no te sientes comodo, usa: /skin [modelo].");
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 24, 1000);
		GivePlayerWeapon(playerid, 34, 100);
		GivePlayerWeapon(playerid, 31, 1000);
		GivePlayerWeapon(playerid, 25, 100);
		SetPlayerColor(playerid, 0xDD0095FF);
		PlayerTextDrawShow(playerid, TeamKills[3][playerid]);
	}
	}
	return 1;
}

funcion SpawnearEnOtroLadoSpawn(playerid){
	SetPlayerPosEx(playerid, MiSpawn[0][playerid], MiSpawn[1][playerid], MiSpawn[2][playerid], 0, MiSpawnInt[playerid], 0);
	if(JugadorYaSpawneado1vez[playerid] == 0){
	JugadorYaSpawneado1vez[playerid] = 1; }
	return 1;
}

funcion AJugadorSpawnKill(playerid){
	JugadorSpawnKill[playerid] = 1;
	SetPlayerHealth(playerid, 10000);
	TogglePlayerControllable(playerid, false);
	if(EnEvento[playerid] == 1) RegresarEvento[playerid] = SetTimerEx("RegresarJugadorEvento", 100, false, "d", playerid);
	SetTimerXP(playerid, 28, "QuitarProteccion", 9230);
	SetTimerXP(playerid, 27, "Descongelar", 1200);
	return 1;
}

funcion QuitarProteccion(playerid){
	SetPlayerHealth(playerid, 99.9);
	PlayerTextDrawHide(playerid, ASKO[playerid]);
	JugadorSpawnKill[playerid] = 0;
	KillTimerEx(playerid, 28);
	return 1;
}

funcion Descongelar(playerid){
	KillTimerEx(playerid, 27);
	TogglePlayerControllable(playerid, true);
	return 1;
}

funcion FuncionesLogeo(playerid){
	JugadorIngresado[playerid] = 0;
    SpawnsRand(playerid);
	SetPlayerInterior(playerid, 0);
	return 1;
}

funcion Niveles(playerid)
{
 	if(NIVEL_KILLS[playerid] == 1){
		SetPlayerHealth(playerid, 99.9);
		SetPlayerArmour(playerid, 10.0);
		COLOR_TEXTO[playerid] = 1;
 		DescuentoArmasNivel(playerid, 300, 1, 500, 25000, 7000, 50, 900, 10000, 6000, 7000);
    	return 1;
	}
	if(NIVEL_KILLS[playerid] == 2){
		SetPlayerHealth(playerid, 99.9);
		SetPlayerArmour(playerid, 15.0);
		COLOR_TEXTO[playerid] = 2;
		DescuentoArmasNivel(playerid, 500, 2, 10000, 21000, 12000, 200, 1000, 12000, 6500, 7500);
    	return 1;
	}
    if(NIVEL_KILLS[playerid] == 3){
		SetPlayerHealth(playerid, 99.9);
		SetPlayerArmour(playerid, 20.0);
		COLOR_TEXTO[playerid] = 3;
		DescuentoArmasNivel(playerid, 700, 3, 15000, 19000, 25000, 500, 1900, 20000, 27000, 28000);
    	return 1;
	}
	if(NIVEL_KILLS[playerid] == 4){
		SetPlayerHealth(playerid, 99.9);
		SetPlayerArmour(playerid, 25.0);
		DescuentoArmasNivel(playerid, 1000, 4, 25000, 25000, 17000, 800, 2200, 27000, 29000, 30000);
    	return 1;
	}
	if(NIVEL_KILLS[playerid] == 5){
		SetPlayerHealth(playerid, 99.9);
		SetPlayerArmour(playerid, 30.0);
		COLOR_TEXTO[playerid] = 4;
		DescuentoArmasNivel(playerid, 1500, 5, 50000, 14000, 60000, 1000, 2800, 33000, 31000, 33000);
    	return 1;
	}
	if(NIVEL_KILLS[playerid] == 6){
		SetPlayerHealth(playerid, 99.9);
		SetPlayerArmour(playerid, 40.0);
		DescuentoArmasNivel(playerid, 2500, 6, 60000, 10000, 80000, 1500, 3800, 50000, 41000, 43000);
    	return 1;
	}
	if(NIVEL_KILLS[playerid] == 7){
		SetPlayerHealth(playerid, 99.9);
		SetPlayerArmour(playerid, 50.0);
		COLOR_TEXTO[playerid] = 4;
		DescuentoArmasNivel(playerid, 6500, 7, 160000, 8000, 280000, 3000, 40000, 50000, 45000, 46000);
		Premium[playerid] = 1;
    	return 1;
	}
	if(NIVEL_KILLS[playerid] == 8){
		SetPlayerHealth(playerid, 99.9);
		SetPlayerArmour(playerid, 60.0);
		DescuentoArmasNivel(playerid, 6500, 8, 360000, 6000, 480000, 3800, 45000, 55000, 55000, 56000);
		Premium[playerid] = 2;
    	return 1;
	}
	if(NIVEL_KILLS[playerid] == 9){
		SetPlayerHealth(playerid, 99.9);
		SetPlayerArmour(playerid, 70.0);
		DescuentoArmasNivel(playerid, 7000, 9, 460000, 5000, 580000, 5000, 45000, 55000, 65000, 66000);
		Premium[playerid] = 3;
    	return 1;
	}
	if(NIVEL_KILLS[playerid] == 10){
		SetPlayerHealth(playerid, 99.9);
		SetPlayerArmour(playerid, 80.0);
		DescuentoArmasNivel(playerid, 8000, 10, 460000, 5000, 580000, 8000, 45000, 55000, 70000, 72000);
		Premium[playerid] = 3;
		Legendario[playerid] = 1;
    	return 1;
	}
	if(NIVEL_KILLS[playerid] == 11){
		SetPlayerHealth(playerid, 99.9);
		SetPlayerArmour(playerid, 90.0);
		DescuentoArmasNivel(playerid, 8500, 11, 760000, 2000, 580000, 10000, 75000, 155000, 72000, 73000);
		Premium[playerid] = 3;
		Vip[playerid] = 1;
		COLOR_TEXTO[playerid] = 5;
		Legendario[playerid] = 2;
    	return 1;
	}
	if(NIVEL_KILLS[playerid] == 12){
		SetPlayerHealth(playerid, 99.9);
		SetPlayerArmour(playerid, 99.9);
		DescuentoArmasNivel(playerid, 9500, 12, 760000, 2000, 280000, 0, 75000, 155000, 12000, 22000);
		Premium[playerid] = 3;
		Vip[playerid] = 2;
		Legendario[playerid] = 3;
		COLOR_TEXTO[playerid] = 6;
		if(Legendario[playerid] == 3)
 		{
 		PlayerTextDrawSetString(playerid, VelocidadKMH, "   Legendario");
 		PlayerTextDrawColor(playerid, VelocidadKMH, 0xFFD700FF);
 		SetProgressBarColor(VelocimetroL[playerid], 0xFFD700FF);
 		SetProgressBarMaxValue(VelocimetroL[playerid], 100);
 		SetProgressBarValue(VelocimetroL[playerid], 100);
 		UpdateProgressBar(VelocimetroL[playerid], playerid);
 		}
    	return 1;
	}
   	return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{
    PlayerPlaySound(issuerid, 17802, 0.0, 0.0, 0.0);
    PlayerPlaySound(playerid, 17802, 0.0, 0.0, 0.0);
    if(issuerid != INVALID_PLAYER_ID && HSc[playerid] == true && weaponid == 34 && bodypart == 9)
    {
        PlayAudioStreamForPlayer(playerid, "http://www.myinstants.com/media/sounds/boomheadshot.swf.mp3");
        PlayAudioStreamForPlayer(issuerid, "http://www.myinstants.com/media/sounds/boomheadshot.swf.mp3");
		GameTextForPlayer(playerid, "~r~~h~~h~Booom ~n~~r~~h~~h~headshot~w~!", 6000, 5);
		GameTextForPlayer(issuerid, "~r~~h~~h~Booom ~n~~r~~h~~h~headshot~w~!", 6000, 5);
        SetPlayerHealth(playerid, 0.0);
        HSH[issuerid]++;
    }
    return 1;
}

stock RespawnEventoFinalizado(playerid)
{
	SendClientMessage(playerid, -1, "{FF9B00}Has sido respawneado después de haber participado en el Evento.");
	for(new b; b < MP; b++)
    {
    	if(EnEvento[b] == 1)
    	{
    		SpawnearEvento(b);
    	}
    }
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	SendDeathMessage(killerid, playerid, reason);
	//Muerte
	Muertes[playerid]++;
	EstadisticasInfo(playerid);
	PuntosDM[playerid]--;
	DineroJugador[playerid] -= DINERO_MUERTE[playerid];
	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid, DineroJugador[playerid]);
	//Si el jugador muere por otro:
	if(killerid != INVALID_PLAYER_ID)
	{
    	PuntajeJugador[killerid]++;
    	ScoreGeneralJugador[killerid] += PuntajeJugador[killerid];
    	SetPlayerScore(killerid, ScoreGeneralJugador[killerid]);
    	KillsAsesino[killerid]++;
    	PuntosDM[killerid]++;
    	GameTextForPlayer(killerid,MensajeAsesinato[random(sizeof(MensajeAsesinato))], 3000, 6);
    	EstadisticasInfo(killerid);
    	EstadisticasRangoAsesino(killerid);
		DineroJugador[killerid] += DINERO_ASESINATO[killerid];
	}
	
	////////////////////////////////////////////////////////////////////////////////////////
	//SISTEMAS DEATHMATCH INDIVIDUAL:
	if(JugadorEnDMM[playerid] == true && msvv == 0)
	{
	    if(killerid != INVALID_PLAYER_ID)
	    {
			KillsEnMapaDM[killerid]++;
			DarAntiSpawnKill[playerid] = true;
			//KillsGeneralesMAPA++;
			ObtenerTOP();
		}
	}
	if(JugadorEnDMM[playerid] == true && msvv == 0)
	{
		if(KillsEnMapaDM[killerid] >= mmk)
		{
			AcabarRonda(killerid);
		}
	}
	//SISTEMA SURVIVAL:
	if(JugadorEnDMM[playerid] == true && msvv == 1)
	{
		JugadoresDentro--;
		JugadorPerdio(playerid);
		new Float:x, Float:y, Float:z, nameplayer[30], idplayer, stringh[100];
		GetPlayerPos(playerid, x, y, z);
		GetPlayerName(playerid, nameplayer, sizeof(nameplayer));
		idplayer = playerid;
		for(new i; i < MP; i++)
		{
			if(MochilaObjecto[i] == 0)
			{
				SurvivalPosx[i] = x;
		 		SurvivalPosy[i] = y;
		 		SurvivalPosz[i] = z;
		 		strmid(NameBolsa, nameplayer, 0, strlen(nameplayer), 30);
				MochilaObjecto[i] = CreateDynamicObject(371, x, y, z - 0.8, 0, 0, 0, mworld);
				format(stringh, sizeof(stringh), "%s(ID:%d)\nID Mochila: %d\nPulsa 'C' para invertigarla\nPulsa 'BIR' para cogerla", nameplayer, idplayer, i);
				MochilaLabel[i] = Create3DTextLabel(stringh, 0x95B7FFFF, x, y, z - 0.8, 5.0, mworld, 0);
				GetPlayerWeaponData(playerid, 2, ArmaSurvival[i][0], AmmoSurvival[i][0]);
				GetPlayerWeaponData(playerid, 3, ArmaSurvival[i][1], AmmoSurvival[i][1]);
				GetPlayerWeaponData(playerid, 4, ArmaSurvival[i][2], AmmoSurvival[i][2]);
				GetPlayerWeaponData(playerid, 5, ArmaSurvival[i][3], AmmoSurvival[i][3]);
				GetPlayerWeaponData(playerid, 6, ArmaSurvival[i][4], AmmoSurvival[i][4]);
				break;
			}
			continue;
		}
	}
	if(JugadorEnDMM[playerid] == true && msvv == 1)
	{
	    if(killerid != INVALID_PLAYER_ID)
	    {
			KillsEnMapaDM[killerid]++;
			ObtenerTOP();
		}
	}
	if(JugadoresDentro <= 1)
	{
		AcabarRondaSurvival();
	}
	///////////////////////////////////////////////////////////////////////////////////////////
	
	//Sistema otro
	if(EnEvento[killerid] == 1)
    {
    	if(EventoEnCurso == 2)
    	{
    	new string[90];
    	if(RoAEquipo[killerid] == EQUIPO_AZUL)
    	{
    		new stryng[40];
    		TeamKillsSuma[1]++;
    		if(TeamKillsSuma[1] >= MAX_GVSB){
    		for(new b; b < MP; b++){
    		RespawnEventoFinalizado(b);}
    		format(string, sizeof(string), "{FFE900}*** ¡Equipo Ballas ganó la ronda vs los Grove y termino con %d de %d!", TeamKillsSuma[1], TeamKillsSuma[0]); }
    		SendClientMessageToAll(-1, string);
    		for(new b; b < MP; b++)
    		{
    			format(stryng, sizeof(stryng), "Ballas: %d", TeamKillsSuma[1]);
    			PlayerTextDrawSetString(b, TeamKills[1][b], stryng);
    			PlayerTextDrawShow(b, TeamKills[1][b]);
    		}
    	}
    	else if(RoAEquipo[killerid] == EQUIPO_ROJO)
    	{
    		new stryng[40];
    		TeamKillsSuma[0]++;
    		{
    		if(TeamKillsSuma[0] >= MAX_GVSB){
    		for(new b; b < MP; b++){
    		RespawnEventoFinalizado(b);}
    		format(string, sizeof(string), "{FFE900}*** ¡Equipo Grove ganó la ronda vs los Ballas y termino con %d de %d!", TeamKillsSuma[0], TeamKillsSuma[1]);}
    		SendClientMessageToAll(-1, string);
    		for(new b; b < MP; b++)
    		{
    			format(stryng, sizeof(stryng), "Grove: %d", TeamKillsSuma[0]);
    			PlayerTextDrawSetString(b, TeamKills[0][b], stryng);
    			PlayerTextDrawShow(b, TeamKills[0][b]);
    		}
    	}
    }
	}
    }
	ResetPlayerMoney(killerid);
	GivePlayerMoney(killerid, DineroJugador[killerid]);
	//SISTEMA DE MINIGUN
	if(GetPlayerWeapon(killerid) == 38)
	{
		if(EnGameJuego[killerid] == 0)
		{
			format(VZ2, sizeof(VZ2), "* AdminInfo Minigun: se detectó a %s(ID:%d) matando con Minigun sin estar en juego.", GetName(killerid), killerid);
			AdminInfoOtro(VZ2);
		}
	}
   	//RACHA DE JUHADOR SIN MORIR
   	KillsRacha[killerid]++;
	new Memoria[90];
	if(KillsRacha[killerid]==Multikills) {
		format(Memoria,sizeof(Memoria),"{0097FF}* Racha: %s a matado a %d sin morir!",GetName(killerid), Multikills);
		SendClientMessageToAll(-1,Memoria);
		GivePlayerMoney(killerid,1500);
		DineroMK[killerid] += 1000;
		DineroJugador[killerid] += DineroMK[killerid];
		ResetPlayerMoney(killerid);
		GivePlayerMoney(killerid, DineroMK[playerid]);
		mysql_format(Conexion, queryx, sizeof(queryx), "UPDATE `jugadores` SET MultiKills=%d WHERE Nombre='%s'", MK[killerid], GetName(killerid));
		mysql_function_query(Conexion, queryx, true, "OnQueryFinish", "ii", 0, killerid);
	}
	if(KillsRacha[killerid]==DevilKill) {
    	format(Memoria,sizeof(Memoria),"{0097FF}* Racha: %s a matado a %d sin morir!",GetName(killerid), DevilKill);
		SendClientMessageToAll(-1, Memoria);
		GivePlayerMoney(killerid,6000);
		DineroMK[killerid] += 3000;
		DineroJugador[killerid] += DineroMK[killerid];
		ResetPlayerMoney(killerid);
		GivePlayerMoney(killerid, DineroMK[playerid]);
	}
	if(KillsRacha[killerid]==MonsterKill) {
    	format(Memoria,sizeof(Memoria),"{0097FF}* Racha: %s a matado a %d sin morir!",GetName(killerid), MonsterKill);
		SendClientMessageToAll(-1, Memoria);
		DineroJugador[killerid] += DineroMK[killerid];
		ResetPlayerMoney(killerid);
		GivePlayerMoney(killerid, DineroMK[playerid]);
	}
	if(KillsRacha[killerid]==HolyShit) {
    	format(Memoria,sizeof(Memoria),"{0097FF}* Racha: %s a matado a %d sin morir!",GetName(killerid), HolyShit);
		SendClientMessageToAll(-1, Memoria);
		DineroJugador[killerid] += DineroHS[killerid];
		ResetPlayerMoney(killerid);
		GivePlayerMoney(killerid, DineroHS[playerid]);
		GameTextForPlayer(killerid, "~r~~h~~h~HolyShit!", 4000, 5);
		mysql_format(Conexion, queryx, sizeof(queryx), "UPDATE `jugadores` SET HolyShit=%d WHERE Nombre='%s'", HS[killerid], GetName(killerid));
		mysql_function_query(Conexion, queryx, true, "OnQueryFinish", "ii", 0, killerid);
	}
    //SISTEMA DE NIVELES
    if(KillsAsesino[killerid] == MAX_KILLSASESINO[killerid]){
	if(NIVEL_KILLS[killerid] == 0){
	SendClientMessage(killerid, -1, "");
    SendClientMessage(killerid, -1, "{00FF1D}* Has alcanzado el nivel 1 de Asesino.");
    SendClientMessage(killerid, -1, "{00FF1D} Usa: {FFFFFF}/ayuda rangos{00FF1D} para obtener ayuda de tu nuevo rango.");
    SendClientMessage(killerid, -1, "{FFFFFF} Ahora dispones de nuevas ventajas de uso exclusivo de tu nivel.");
    GameTextForPlayer(killerid, "~n~~g~~h~~h~Nivel 1~n~~g~~h~~h~desbloqueado!", 4000, 3);
    DescuentoArmasNivel(killerid, 300, 1, 500, 25000, 7000, 50, 900, 10000, 6000, 7000);
    KillsAsesino[killerid] = 0;
    COLOR_TEXTO[killerid] = 1;
    EstadisticasRangoAsesino(killerid);
    }
    }
    if(KillsAsesino[killerid] == MAX_KILLSASESINO[killerid]){
	if(NIVEL_KILLS[killerid] == 1){
    SendClientMessage(killerid, -1, "");
    SendClientMessage(killerid, -1, "{00FF1D}* Has alcanzado el nivel 2 de Asesino.");
    SendClientMessage(killerid, -1, "{00FF1D} Usa: {FFFFFF}/ayuda rangos{00FF1D} para obtener ayuda de tu nuevo rango.");
    SendClientMessage(killerid, -1, "{FFFFFF} Ahora dispones de nuevas ventajas de uso exclusivo de tu nivel.");
    GameTextForPlayer(killerid, "~n~~g~~h~~h~Nivel 2~n~~g~~h~~h~desbloqueado!", 4000, 3);
    DescuentoArmasNivel(killerid, 500, 2, 10000, 21000, 12000, 200, 1000, 12000, 6500, 7500);
    KillsAsesino[killerid] = 0;
    COLOR_TEXTO[killerid] = 2;
    EstadisticasRangoAsesino(killerid);
    }
    }
    if(KillsAsesino[killerid] == MAX_KILLSASESINO[killerid]){
	if(NIVEL_KILLS[killerid] == 2){
   	SendClientMessage(killerid, -1, "");
    SendClientMessage(killerid, -1, "{00FF1D}* Has alcanzado el nivel 3 de Asesino.");
    SendClientMessage(killerid, -1, "{00FF1D} Usa: {FFFFFF}/ayuda rangos{00FF1D} para obtener ayuda de tu nuevo rango.");
    SendClientMessage(killerid, -1, "{FFFFFF} Ahora dispones de nuevas ventajas de uso exclusivo de tu nivel.");
    GameTextForPlayer(killerid, "~n~~g~~h~~h~Nivel 3~n~~g~~h~~h~desbloqueado!", 4000, 3);
    DescuentoArmasNivel(killerid, 700, 3, 15000, 19000, 25000, 500, 1900, 20000, 27000, 28000);
    KillsAsesino[killerid] = 0;
    COLOR_TEXTO[killerid] = 3;
    EstadisticasRangoAsesino(killerid);
    }
    }
    if(KillsAsesino[killerid] == MAX_KILLSASESINO[killerid]){
	if(NIVEL_KILLS[killerid] == 3){
   	SendClientMessage(killerid, -1, "");
    SendClientMessage(killerid, -1, "{00FF1D}* Has alcanzado el nivel 4 de Asesino.");
    SendClientMessage(killerid, -1, "{00FF1D} Usa: {FFFFFF}/ayuda rangos{00FF1D} para obtener ayuda de tu nuevo rango.");
    SendClientMessage(killerid, -1, "{FFFFFF} Ahora dispones de nuevas ventajas de uso exclusivo de tu nivel.");
    GameTextForPlayer(killerid, "~n~~g~~h~~h~Nivel 4~n~~g~~h~~h~desbloqueado!", 4000, 3);
    DescuentoArmasNivel(killerid, 1000, 4, 25000, 25000, 17000, 800, 2200, 27000, 29000, 30000);
    KillsAsesino[killerid] = 0;
    EstadisticasRangoAsesino(killerid);
    }
    }
    if(KillsAsesino[killerid] == MAX_KILLSASESINO[killerid]){
	if(NIVEL_KILLS[killerid] == 4){
   	SendClientMessage(killerid, -1, "");
    SendClientMessage(killerid, -1, "{00FF1D}* Has alcanzado el nivel 5 de Asesino.");
    SendClientMessage(killerid, -1, "{00FF1D} Usa: {FFFFFF}/ayuda rangos{00FF1D} para obtener ayuda de tu nuevo rango.");
    SendClientMessage(killerid, -1, "{FFFFFF} Ahora dispones de nuevas ventajas de uso exclusivo de tu nivel.");
    SendClientMessage(killerid, -1, "{F7FF90} Desbloqueaste el Headshot(Sniper). Ahora podrás hacer Headshot a otros jugadores!");
    GameTextForPlayer(killerid, "~n~~g~~h~~h~Nivel 5~n~~g~~h~~h~desbloqueado!", 4000, 3);
    DescuentoArmasNivel(killerid, 1500, 5, 50000, 14000, 60000, 1000, 2800, 33000, 31000, 33000);
    KillsAsesino[killerid] = 0;
    COLOR_TEXTO[killerid] = 4;
    EstadisticasRangoAsesino(killerid);
    }
    }
    if(KillsAsesino[killerid] == MAX_KILLSASESINO[killerid]){
	if(NIVEL_KILLS[killerid] == 5){
   	SendClientMessage(killerid, -1, "");
    SendClientMessage(killerid, -1, "{00FF1D}* Has alcanzado el nivel 6 de Asesino.");
    SendClientMessage(killerid, -1, "{00FF1D} Usa: {FFFFFF}/ayuda rangos{00FF1D} para obtener ayuda de tu nuevo rango.");
    SendClientMessage(killerid, -1, "{FFFFFF} Ahora dispones de nuevas ventajas de uso exclusivo de tu nivel.");
    GameTextForPlayer(killerid, "~n~~g~~h~~h~Nivel 6~n~~g~~h~~h~desbloqueado!", 4000, 3);
    DescuentoArmasNivel(killerid, 2500, 6, 60000, 10000, 80000, 1500, 3800, 50000, 41000, 43000);
    KillsAsesino[killerid] = 0;
    EstadisticasRangoAsesino(killerid);
    }
    }
    if(KillsAsesino[killerid] == MAX_KILLSASESINO[killerid]){
	if(NIVEL_KILLS[killerid] == 6){
   	SendClientMessage(killerid, -1, "");
    SendClientMessage(killerid, -1, "{00FF1D}* Has alcanzado el nivel 7 de Asesino.");
    SendClientMessage(killerid, -1, "{00FF1D} Usa: {FFFFFF}/ayuda rangos{00FF1D} para obtener ayuda de tu nuevo rango.");
    SendClientMessage(killerid, -1, "{FFFFFF} Ahora dispones de nuevas ventajas de uso exclusivo de tu nivel.");
    SendClientMessage(killerid, -1, "{FFFFFF} Enhorabuena has recibido {EEF700}Premium1{FFFFFF}. Escribe: /pcmds para ver tus nuevos comandos!");
    GameTextForPlayer(killerid, "~n~~g~~h~~h~Nivel 7~n~~g~~h~~h~desbloqueado!", 4000, 3);
    DescuentoArmasNivel(killerid, 6500, 7, 160000, 8000, 280000, 3000, 40000, 50000, 45000, 46000);
    KillsAsesino[killerid] = 0;
    COLOR_TEXTO[killerid] = 5;
    Premium[playerid] = 1;
    EstadisticasRangoAsesino(killerid);
    }
    }
    if(KillsAsesino[killerid] == MAX_KILLSASESINO[killerid]){
	if(NIVEL_KILLS[killerid] == 7){
   	SendClientMessage(killerid, -1, "");
    SendClientMessage(killerid, -1, "{00FF1D}* Has alcanzado el nivel 8 de Asesino.");
    SendClientMessage(killerid, -1, "{00FF1D} Usa: {FFFFFF}/ayuda rangos{00FF1D} para obtener ayuda de tu nuevo rango.");
    SendClientMessage(killerid, -1, "{FFFFFF} Ahora dispones de nuevas ventajas de uso exclusivo de tu nivel.");
    SendClientMessage(killerid, -1, "{FFFFFF} Enhorabuena has recibido {EEF700}Premium2{FFFFFF}. Escribe: /pcmds para ver tus nuevos comandos!");
    GameTextForPlayer(killerid, "~n~~g~~h~~h~Nivel 8~n~~g~~h~~h~desbloqueado!", 4000, 3);
    DescuentoArmasNivel(killerid, 6500, 8, 360000, 6000, 480000, 3800, 45000, 55000, 55000, 56000);
    KillsAsesino[killerid] = 0;
    Premium[playerid] = 2;
    EstadisticasRangoAsesino(killerid);
    }
    }
    if(KillsAsesino[killerid] == MAX_KILLSASESINO[killerid]){
	if(NIVEL_KILLS[killerid] == 8){
   	SendClientMessage(killerid, -1, "");
    SendClientMessage(killerid, -1, "{00FF1D}* Has alcanzado el nivel 9 de Asesino.");
    SendClientMessage(killerid, -1, "{00FF1D} Usa: {FFFFFF}/ayuda rangos{00FF1D} para obtener ayuda de tu nuevo rango.");
    SendClientMessage(killerid, -1, "{FFFFFF} Ahora dispones de nuevas ventajas de uso exclusivo de tu nivel.");
    SendClientMessage(killerid, -1, "{FFFFFF} Enhorabuena has recibido {EEF700}Premium3{FFFFFF}. Escribe: /pcmds para ver tus nuevos comandos!");
    GameTextForPlayer(killerid, "~n~~g~~h~~h~Nivel 9~n~~g~~h~~h~desbloqueado!", 4000, 3);
    DescuentoArmasNivel(killerid, 7000, 9, 460000, 5000, 580000, 5000, 45000, 55000, 65000, 66000);
    KillsAsesino[killerid] = 0;
    Premium[playerid] = 3;
    EstadisticasRangoAsesino(killerid);
    }
    }
    if(KillsAsesino[killerid] == MAX_KILLSASESINO[killerid]){
	if(NIVEL_KILLS[killerid] == 9){
	new stringl[70];
   	SendClientMessage(killerid, -1, "");
    SendClientMessage(killerid, -1, "{00FF1D}* Has alcanzado el nivel 10 Legendario de Asesino.");
    SendClientMessage(killerid, -1, "{00FF1D} Usa: {FFFFFF}/ayuda rangos{00FF1D} para obtener ayuda de tu nuevo rango.");
    SendClientMessage(killerid, -1, "{FFFFFF} Ahora dispones de nuevas ventajas de uso exclusivo de tu nivel.");
    SendClientMessage(killerid, -1, "{FFFFFF} Enhorabuena has alcanzado el Rango {929294}Legendario{FFFFFF}. Escribe: /lcmds para ver tus nuevos comandos!");
    format(stringl, sizeof(stringl), "*** %s alcanzó el Rango {929294}Legendario{FFFFFF}!", GetName(killerid));
    SendClientMessageToAll(-1, stringl);
    GameTextForPlayer(killerid, "~n~~g~~h~~h~Nivel 10~n~~g~~h~~h~desbloqueado!", 4000, 3);
    DescuentoArmasNivel(killerid, 8000, 10, 460000, 5000, 580000, 8000, 45000, 55000, 70000, 72000);
    KillsAsesino[killerid] = 0;
    Legendario[playerid] = 1;
    EstadisticasRangoAsesino(killerid);
    }
    }
    if(KillsAsesino[killerid] == MAX_KILLSASESINO[killerid]){
	if(NIVEL_KILLS[killerid] == 10){
   	SendClientMessage(killerid, -1, "");
    SendClientMessage(killerid, -1, "{00FF1D}* Has alcanzado el nivel 11 Legendario de Asesino.");
    SendClientMessage(killerid, -1, "{00FF1D} Usa: {FFFFFF}/ayuda rangos{00FF1D} para obtener ayuda de tu nuevo rango.");
    SendClientMessage(killerid, -1, "{FFFFFF} Ahora dispones de nuevas ventajas de uso exclusivo de tu nivel.");
    SendClientMessage(killerid, -1, "{FFFFFF} Enhorabuena has recibido {00BFFD}VIP1{FFFFFF}. Escribe: /vcmds para ver tus nuevos comandos!");
    GameTextForPlayer(killerid, "~n~~g~~h~~h~Nivel 11~n~~g~~h~~h~desbloqueado!", 4000, 3);
    DescuentoArmasNivel(killerid, 8500, 11, 760000, 2000, 580000, 10000, 75000, 155000, 72000, 73000);
    KillsAsesino[killerid] = 0;
    Legendario[killerid] = 2;
    COLOR_TEXTO[killerid] = 5;
    Vip[killerid] = 1;
    EstadisticasRangoAsesino(killerid);
    }
    }
    if(KillsAsesino[killerid] == MAX_KILLSASESINO[killerid]){
	if(NIVEL_KILLS[killerid] == 11){
	new stringl[70];
   	SendClientMessage(killerid, -1, "");
    SendClientMessage(killerid, -1, "{00FF1D}* Has alcanzado el nivel 12 Legendario Oro de Asesino.");
    SendClientMessage(killerid, -1, "{00FF1D} Usa: {FFFFFF}/ayuda rangos{00FF1D} para obtener ayuda de tu nuevo rango.");
    SendClientMessage(killerid, -1, "{FFFFFF} Ahora dispones de nuevas ventajas de uso exclusivo de tu nivel.");
    SendClientMessage(killerid, -1, "{FFFFFF} Enhorabuena has recibido {00BFFD}VIP2{FFFFFF}. Escribe: /vcmds para ver tus nuevos comandos!");
    SendClientMessage(killerid, -1, "{FFFFFF} Enhorabuena has alcanzado el Rango {FFD700}Legendario Oro{FFFFFF}. Escribe: /ncmds para ver tus nuevos comandos!");
    SendClientMessage(killerid, -1, "{FFFFFF} Felicitaciones, has logrado el nivel supremo. Puedes usar: /ntag para habilitar el tag exclusivo(chat).");
    format(stringl, sizeof(stringl), "*** %s alcanzó el Rango {FFD700}Legendario Oro{FFFFFF}!", GetName(killerid));
    KillsAsesino[killerid] = 0;
    SendClientMessageToAll(-1, stringl);
    GameTextForPlayer(killerid, "~n~~n~~n~~g~~h~~h~~h~Nivel 12~n~~g~~h~~h~~h~legendario oro desbloqueado!", 4000, 3);
    DescuentoArmasNivel(killerid, 9500, 12, 760000, 2000, 280000, 0, 75000, 155000, 12000, 22000);
    Legendario[killerid] = 3;
    Vip[killerid] = 2;
    COLOR_TEXTO[killerid] = 6;
    TAGLN[killerid] = 1;
    EstadisticasRangoAsesino(killerid);
    }
    }
	//CLF SIN TERMINAR
    KillsRacha[playerid] = 0;
    if(EnEvento[playerid] == 1)
    {
    	if(RoAEquipo[playerid] == EQUIPO_AZUL)
    	{
    		//TeamKillsSuma[1] += 1;
    		//format(stryng, sizeof(stryng), "Equipo Azul: ~w~~h~%d", TeamKillsSuma[1]);
    		//PlayerTextDrawSetString(playerid, TeamKills[1][playerid], stryng);
    		if(JugadorTieneLaFlagRojo[playerid] == 1)
    		{
    			new Float:X, Float:Y, Float:Z;
    			GameTextForAll("_~n~_~n~_~n~~b~~h~~h~Equipo Azul ~n~~b~~h~~h~perdio la bandera!", 1200, 6);
    			GetPlayerPos(playerid, X, Y, Z);
    			FlagRoja = CreatePickup(2914, 1, X, Y, Z, 50494);
    			TextRoja = Create3DTextLabel("¡Bandera del Equipo Rojo!\n", 0xFF0000FF, X, Y, Z, 30.0, 50494, 0);
    			Update3DTextLabelText(TextRoja, 0xFF0000FF, "¡Bandera del Equipo Rojo!\n");
    			JugadorTieneLaFlagAzul[playerid] = 0;
    			return 1;
    		}
    	}
    	if(RoAEquipo[playerid] == EQUIPO_ROJO)
    	{
    		//TeamKillsSuma[0] += 1;
    		//format(stryng, sizeof(stryng), "Equipo Rojo: ~w~~h~%d", TeamKillsSuma[0]);
    		//PlayerTextDrawSetString(playerid, TeamKills[0][playerid], stryng);
    		if(JugadorTieneLaFlagAzul[playerid] == 1)
    		{
    			GameTextForAll("_~n~_~n~_~n~~r~~h~~h~Equipo Rojo ~n~~r~~h~~h~perdio la bandera!", 1200, 6);
    			new Float:X, Float:Y, Float:Z;
    			GetPlayerPos(playerid, X, Y, Z);
    			FlagAzul = CreatePickup(2914, 1, X, Y, Z, 50494);
    			TextAzul = Create3DTextLabel("¡Bandera del Equipo Azul!\n", 0x006EFFFF, X, Y, Z, 30.0, 50494, 0);
    			Update3DTextLabelText(TextAzul, 0x006EFFFF, "¡Bandera del Equipo Azul!\n");
    			JugadorTieneLaFlagRojo[playerid] = 0;
    			return 1;
    		}
    	}
    }
 	//Duelos
	new sString[128], Float:Health, Float:Armor;
   	if(JugadorEnElDuelo[playerid] == 1 && JugadorEnElDuelo[killerid] == 1)
   	{
		GetPlayerHealth(killerid, Health);
		GetPlayerArmour(killerid, Armor);
  		if(IsPlayerConnected(killerid) && killerid != INVALID_PLAYER_ID)
		{
			format(sString, sizeof(sString),"{00FF00}* DueloInfo: %s ganó el duelo contra %s y quedó con %.2f de vida y %.2f de blindaje.", GetName(killerid), GetName(playerid), Health, Armor);
  			SendClientMessageToAll(-1, sString);
    		InvitadoAlDuelo[killerid] = 1000000000;
			HasInvitadoAlDuelo[killerid] = 0;
  			InvitacionActiva[killerid] = 0;
    		JugadorEnElDuelo[killerid]  = 0;
     		DueloEnProgreso = 0;
     		DuelosG[killerid]++;
      		SetPlayerInterior(killerid, 0);
       		SetPlayerVirtualWorld(killerid, 0);
        	SpawnPlayer(killerid);
        	mysql_format(Conexion, queryx, sizeof(queryx), "UPDATE `jugadores` SET DuelosGanados=%d WHERE Nombre='%s'", DuelosG[killerid], GetName(killerid));
			mysql_function_query(Conexion, queryx, true, "OnQueryFinish", "ii", 0, killerid);
		}
		InvitacionActiva[playerid] = 0;
		InvitadoAlDuelo[playerid] = 1000000000;
		HasInvitadoAlDuelo[playerid] = 0;
		JugadorEnElDuelo[playerid]  = 0;
 		DuelosP[playerid]++;
  		mysql_format(Conexion, queryx, sizeof(queryx), "UPDATE `jugadores` SET DuelosPerdidos=%d WHERE Nombre='%s'", DuelosP[playerid], GetName(playerid));
		mysql_function_query(Conexion, queryx, true, "OnQueryFinish", "ii", 0, playerid);
	}
 //CLAN:
    new Query[80],
    killst,
    muertest,
    Cache:result;

	if(EnClan[killerid] == 1)
    {
    	if(IsPlayerConnected(killerid))
    	{
    		mysql_format(Conexion, Query, sizeof(Query), "SELECT KillsClan FROM Clanes WHERE IDClan=%d", Clan_ID[killerid]);
    		result = mysql_query(Conexion, Query);
    		killst = cache_get_field_content_int(0, "KillsClan", Conexion);
    		muertest = cache_get_field_content_int(0, "MuertesClan", Conexion);
    		cache_delete(result, Conexion);
      		mysql_format(Conexion, Query, sizeof(Query), "UPDATE Clanes SET KillsClan=%d WHERE IDClan=%d", killst+1, Clan_ID[killerid]);
      		mysql_query(Conexion, Query, false);
      	}
    }
    if(EnClan[playerid] == 1)
   	{
  		if(IsPlayerConnected(playerid) && JugadorLogeado[playerid][0] == 1)
  		{
      		mysql_format(Conexion, Query, sizeof(Query), "SELECT MuertesClan FROM Clanes WHERE IDClan=%d", Clan_ID[playerid]);
      		result = mysql_query(Conexion, Query);
    		muertest = cache_get_field_content_int(0, "MuertesClan", Conexion);
    		cache_delete(result, Conexion);
      		mysql_format(Conexion, Query, sizeof(Query), "UPDATE Clanes SET MuertesClan=%d WHERE IDClan=%d", muertest+1, Clan_ID[playerid]);
      		mysql_query(Conexion, Query, false);
        }
    }
	return 1;
}

stock DescuentoArmasNivel(playerid, const descuento, const nivel, const kill, const carmas, const muerte, const maxkills, const mk, const hs, const cvida, const carm)
{
	ARMA[0][playerid] -= descuento;
	PrecioArma[0][playerid] = ARMA[0][playerid];
	ARMA[1][playerid] -= descuento;
	PrecioArma[1][playerid] = ARMA[1][playerid];
	ARMA[2][playerid] -= descuento;
	PrecioArma[2][playerid] = ARMA[2][playerid];
	ARMA[3][playerid] -= descuento;
	PrecioArma[3][playerid] = ARMA[3][playerid];
	ARMA[4][playerid] -= descuento;
	PrecioArma[4][playerid] = ARMA[4][playerid];
	ARMA[5][playerid] -= descuento;
	PrecioArma[5][playerid] = ARMA[5][playerid];
	ARMA[6][playerid] -= descuento;
	PrecioArma[6][playerid] = ARMA[6][playerid];

	NIVEL_KILLS[playerid] = nivel;
	DINERO_ASESINATO[playerid] = kill;
	COSTO_CARMAS[playerid] = carmas;
	DINERO_MUERTE[playerid] = muerte;
	MAX_KILLSASESINO[playerid] = maxkills;
	//KillsAsesino[playerid] = 0;
	PrecioVidaArm[0][playerid] = cvida;
	PrecioVidaArm[1][playerid] = carm;
	DineroMK[playerid] = mk;
	DineroHS[playerid] = hs;
}

funcion JugadorMurio(playerid)
{
	Muertes[playerid]++;
	EstadisticasInfo(playerid);
	PuntosDM[playerid]--;
	DineroJugador[playerid] -= DINERO_MUERTE[playerid];
	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid, DineroJugador[playerid]);
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
    ActivarComponentes[0] = SetTimer("TunearAuto0", 1000, 0);
    ActivarComponentes[1] = SetTimer("TunearAuto1", 1000, 0);
    ActivarComponentes[2] = SetTimer("TunearAuto2", 1000, 0);
	return 1;
}

funcion RespawnVeh0()
{
    SetVehicleToRespawn(AutoBase[0]);
    SetVehicleToRespawn(AutoBase[1]);
    SetVehicleToRespawn(AutoBase[2]);
    KillTimer(RespawnVeh);
    return 1;
}

funcion TunearAuto0()
{
	AddVehicleComponent(AutoBase[0], 1169); // Parachoques delantero(Alien)
	AddVehicleComponent(AutoBase[0], 1140); //Parachoques trasero(X-flow)
	AddVehicleComponent(AutoBase[0], 1032); //roof
	AddVehicleComponent(AutoBase[0], 1059); //Escape
	AddVehicleComponent(AutoBase[0], 1058); //Spoiler
	AddVehicleComponent(AutoBase[0], 1029); //X-Flow
	AddVehicleComponent(AutoBase[0], 1080); //Ruedas Switch
	ChangeVehiclePaintjob(AutoBase[0], 0); //PaintJob
	KillTimer(ActivarComponentes[0]);
	return 1;
}

funcion TunearAuto1()
{
	AddVehicleComponent(AutoBase[1], 1169); // Parachoques delantero(Alien)
	AddVehicleComponent(AutoBase[1], 1140); //Parachoques trasero(X-flow)
	AddVehicleComponent(AutoBase[1], 1032); //roof
	AddVehicleComponent(AutoBase[1], 1059); //Escape
	AddVehicleComponent(AutoBase[1], 1058); //Spoiler
	AddVehicleComponent(AutoBase[1], 1029); //X-Flow
	AddVehicleComponent(AutoBase[1], 1080); //Ruedas Switch
	ChangeVehiclePaintjob(AutoBase[1], 1); //PaintJob
	KillTimer(ActivarComponentes[1]);
	return 1;
}

funcion TunearAuto2()
{
	AddVehicleComponent(AutoBase[2], 1169); // Parachoques delantero(Alien)
	AddVehicleComponent(AutoBase[2], 1140); //Parachoques trasero(X-flow)
	AddVehicleComponent(AutoBase[2], 1032); //roof
	AddVehicleComponent(AutoBase[2], 1059); //Escape
	AddVehicleComponent(AutoBase[2], 1058); //Spoiler
	AddVehicleComponent(AutoBase[2], 1029); //X-Flow
	AddVehicleComponent(AutoBase[2], 1080); //Ruedas Switch
	ChangeVehiclePaintjob(AutoBase[2], 2); //PaintJob
	KillTimer(ActivarComponentes[2]);
	return 1;
}
public OnVehicleDeath(vehicleid, killerid)
{
	return 1;
}

//FUNCION EN PROGRESO
/*public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart)
{
    if(damagedid >= 0)
    {
        if(GetPlayerTeam(playerid) == GetPlayerTeam(damagedid) || AntiTeamKill[playerid] == 1 && AntiTeamKill[damagedid] == 1)
        {
            GameTextForPlayer(playerid, "~r~~h~~n~~n~No puedes atacar a tu clan!", 1000, 3);
        }
        else if(GetPlayerTeam(playerid) == 0 && GetPlayerTeam(damagedid) == 0)
        {

        }
    }
    return 1;
}*/

stock AntiSpam(SPAM[])
{
    new AS[290];
    for(new i; i < strlen(SPAM); i++)
    {
        switch(SPAM[i])
        {
            case '1': AS[i] = '*';
            case '2': AS[i] = '*';
            case '3': AS[i] = '*';
            case '4': AS[i] = '*';
            case '5': AS[i] = '*';
            case '6': AS[i] = '*';
            case '7': AS[i] = '*';
            case '8': AS[i] = '*';
            case '9': AS[i] = '*';
            case '0': AS[i] = '*';
            default: AS[i] = SPAM[i];
        }
    }
    return AS;
}

public OnPlayerText(playerid, text[])
{
	if(Mute[playerid] != 0){
	new stringcondena2[128];
	if(Encarcelado[playerid] == 1)
	{
		format(stringcondena2, sizeof(stringcondena2), "{AA0000}*** No podrás escribir hasta pasar los %dmin/s y %dseg de tu sanción.", Digito1Jail[playerid], Digito2Jail[playerid]);
		SendClientMessage(playerid, -1, stringcondena2);
	}
	else
	{
	    format(stringcondena2, sizeof(stringcondena2), "{AA0000}*** No podrás escribir hasta pasar los %dmin/s y %dseg de tu sanción.", Digito1Mute[playerid], Digito2Mute[playerid]);
		SendClientMessage(playerid, -1, stringcondena2);
	}
	return 0;
	}

    new string[160];
    if(text[0] == '!' && Administrador[playerid] >= 1) {
    format(string,sizeof(string),"{F10075}<Chat Admin> %s(%d)[%d]: %s", GetName(playerid), playerid, Administrador[playerid], text[1]);
	XatAdmin(string);
	return 0;
	}

	new string45[160];
    if(text[0] == '#' && Vip[playerid] >= 1) {
    format(string45,sizeof(string45),"{00E477}<Chat Vip> %s: %s", GetName(playerid), text[1]);
	XatVip(string45);
	return 0;
	}

	static LastPrivmsg[MP][128];

    new szText[170], szName[MAX_PLAYER_NAME];
	if(EnClan[playerid] == 1 && TAG_Escribir[playerid] == 1){
	if(strfind(LastPrivmsg[playerid], text, false) != -1) return SendClientMessage(playerid, -1, "{FFFF00}* No escribas el mismo texto, se considera flood de mensajes."), 0;
	strmid(LastPrivmsg[playerid], text, 0, strlen(text), sizeof(LastPrivmsg[]));
    	GetPlayerName(playerid, szName, MAX_PLAYER_NAME);
    	format(szText, 170, "%d {%06x}[%s]%s: {FFFFFF}%s", playerid, GetPlayerColor(playerid) >>> 8, Clan_TAG[playerid], szName, text);
    	SendClientMessageToAll(-1, szText);
    	printf("%s(%d): %s", GetName(playerid), playerid, text);
   	}
   	else
   	{
		if(strfind(LastPrivmsg[playerid], text, false) != -1) return SendClientMessage(playerid, -1, "{FFFF00}* No escribas el mismo texto, se considera flood de mensajes."), 0;
		strmid(LastPrivmsg[playerid], text, 0, strlen(text), sizeof(LastPrivmsg[]));
    	GetPlayerName(playerid, szName, MAX_PLAYER_NAME);
    	format(szText, 170, "%d {%06x}%s: {FFFFFF}%s", playerid, GetPlayerColor(playerid) >>> 8, szName, text);
    	SendClientMessageToAll(-1, szText);
    	printf("%s(%d): %s", GetName(playerid), playerid, text);
    }
    /*if(TAGLN[playerid] == 1 && Legendario[playerid] == 3)
    {
    	GetPlayerName(playerid, szName, MAX_PLAYER_NAME);
    	format(szText, 170, "%d {FFD700}[LN]{%06x}%s: {FFFFFF}%s", playerid, GetPlayerColor(playerid) >>> 8, szName, AntiSpam(text));
    	SendClientMessageToAll(-1, szText);
    }
    else
   	{
    	GetPlayerName(playerid, szName, MAX_PLAYER_NAME);
    	format(szText, 170, "%d {%06x}%s: {FFFFFF}%s", playerid, GetPlayerColor(playerid) >>> 8, szName, AntiSpam(text));
    	SendClientMessageToAll(-1, szText);
    }*/
	return 0;
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
    if (strcmp(cmdtext, "/ccontraseña", true) == 0 || strcmp(cmdtext, "/mp", true) == 0 || strcmp(cmdtext, "/pm", true) == 0 ||
	strcmp(cmdtext, "/asay", true) == 0
	|| strcmp(cmdtext, "/expulsar", true) == 0 || strcmp(cmdtext, "/ban", true) == 0 || strcmp(cmdtext, "/lsay", true) == 0
	|| strcmp(cmdtext, "/nsay", true) == 0 || strcmp(cmdtext, "/login", true) == 0 || strcmp(cmdtext, "/c", true) == 0)
    {

	}
	else
	{
		GetPlayerName(playerid, nombre, sizeof(nombre));
		format(stringj,sizeof(stringj),"* AdminInfo CMD: %s(%d) %s", nombre, playerid, cmdtext);
		AdminInfo(stringj);
	}

    if(!success)
	{
	    format(stringj,sizeof(stringj),"~n~~h~~h~%s~n~comando no v"a_a"lido!", cmdtext);
		GameTextForPlayer(playerid, stringj, 3000, 3);
    }

    if(IsPlayerFlooding(playerid))
	{
		//SendClientMessage(playerid, -1, "Para usar comandos de nuevo por favor espere 10 segundos.");
		return 1;
	}
	CMDTIME[playerid] = GetTickCount();
    return 1;
}

stock IsPlayerFlooding(playerid)
{
	if(GetTickCount() - CMDTIME[playerid] < 20000)
	    return 1;
	return 0;
}

//LISTA DE TELEPORTS Y MINIJUEGOS/EVENTOS
YCMD:comandos(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
 	new iString[1500];
 	strcat(iString, "{00C7FF}/register: registrate en nuestro servidor.\n");
    strcat(iString, "{00C7FF}/admins: lista de admins.\n");
    strcat(iString, "{00C7FF}/vips: lista de VIPs.\n");
    strcat(iString, "{00C7FF}/teles: lista de teleports.\n");
    strcat(iString, "{00C7FF}/reglas: lista de reglas del servidor.\n");
    strcat(iString, "{00C7FF}/stats: mira tus estadisticas generales/jugador.\n");
    strcat(iString, "{00C7FF}/reportar: reportar a un jugador.\n");
    strcat(iString, "{00C7FF}/deathtmatch: unete a un deathmatch.\n");
    strcat(iString, "{00C7FF}/clan: comandos del modo clan.\n");
    strcat(iString, "{00C7FF}/ccontraseña: combia tu contraseña (cuenta).\n");
    strcat(iString, "{00C7FF}/dardinero: envia dinero a un jugador.\n");
    strcat(iString, "{00C7FF}/ayuda: obten ayuda del servidor.\n");
    strcat(iString, "{00C7FF}/duda: envia una duda a los administradores.\n");
    strcat(iString, "{00C7FF}/misautos: personaliza tus autos.\n");
    strcat(iString, "{00C7FF}/acciones: mira las acciones disponibles.\n");
    strcat(iString, "{00C7FF}/ir: ve hacia un jugador.\n");
    strcat(iString, "{00C7FF}/bloquear: nadie puede ir hacía ti(/ir).\n");
    strcat(iString, "{00C7FF}/bloquearir: bloquea a un jugador(/ir).\n");
    strcat(iString, "{00C7FF}/misarmas: edita tus armas.\n");
    strcat(iString, "{00C7FF}/carmas [1-3]: extrae tus armas por slot.\n");
    strcat(iString, "{00C7FF}/v: menú de vehículos.\n");
    strcat(iString, "{00C7FF}/autos: menú de vehículos.\n");
    strcat(iString, "{00C7FF}/auto: obtén un infernus.\n");
    strcat(iString, "{00C7FF}/moto: obtén una NRG-500.\n");
    strcat(iString, "{00C7FF}/control: controles de vehículos.\n\n");
    strcat(iString, "{FFFFFF}* Clic en siguiente para la lista 2.\n");
    ShowPlayerDialog(playerid,COMANDOS, DIALOG_STYLE_MSGBOX, "{00FFBD}Lista de comandos 1/3:", iString, "Siguiente", "Cancelar");
    PlayerPlaySound(playerid,1139,0.0,0.0,0.0);
 	return 1;
}

YCMD:comandos2(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
 	new iString[1500];
 	strcat(iString, "{00C7FF}/kill: acción para morir.\n");
 	strcat(iString, "{00C7FF}/paracaidas: obten un paracaidas.\n");
    strcat(iString, "{00C7FF}/jetpack: obten un jetpack.\n");
    strcat(iString, "{00C7FF}/mispawn: establece tu lugar de spawn.\n");
    strcat(iString, "{00C7FF}/tops: ve los tops en tiempo real de jugadores.\n");
    strcat(iString, "{00C7FF}/topclanes: ver los tops de clanes en tiempo real.\n");
    strcat(iString, "{00C7FF}/fp: voltea tu vehículo.\n");
    strcat(iString, "{00C7FF}/rotar80: rota tu vehículo 80 grados.\n");
    strcat(iString, "{00C7FF}/rotar90: rota tu vehículo 90 grados.\n");
    strcat(iString, "{00C7FF}/afix: repara tu vehículo automáticamente.\n");
    strcat(iString, "{00C7FF}/mp: envía un mensaje privado a un jugador.\n");
    strcat(iString, "{00C7FF}/pm: envía un mensaje privado a un jugador.\n");
    strcat(iString, "{00C7FF}/nomps: no recibir mps.\n");
    strcat(iString, "{00C7FF}/simps: recibir mps.\n");
    strcat(iString, "{00C7FF}/s: guarda una posición.\n");
    strcat(iString, "{00C7FF}/l: regresa a tu posición.\n");
    strcat(iString, "{00C7FF}/ap: ve a la posición guardad por un admin.\n");
    strcat(iString, "{00C7FF}/texto: agrega un texto en tu cabeza.\n");
    strcat(iString, "{00C7FF}/notexto: quita tu texto.\n");
    strcat(iString, "{00C7FF}/join: entra a una carrera.\n");
    strcat(iString, "{00C7FF}/exit: sal de una carrera.\n");
    strcat(iString, "{00C7FF}/skin: cambia tu skin.\n");
    strcat(iString, "{00C7FF}/colores: cambia tu color.\n");
    strcat(iString, "{00C7FF}/dia: cambia tu hora a día.\n");
    strcat(iString, "{00C7FF}/noche: cambia tu hora a noche.\n\n");
    strcat(iString, "{FFFFFF}* Clic en siguiente para la lista 3.\n");
    ShowPlayerDialog(playerid,COMANDOS2, DIALOG_STYLE_MSGBOX, "{00FFBD}Lista de comandos 2/3:", iString, "Siguiente", "Cancelar");
    PlayerPlaySound(playerid,1139,0.0,0.0,0.0);
 	return 1;
}

YCMD:comandos3(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
 	new iString[1500];
 	strcat(iString, "{00C7FF}/claninfo: estadisticas de un clan especifico.\n");
 	strcat(iString, "{00C7FF}/evento: unete a un evento.\n");
    strcat(iString, "{00C7FF}/verduelos: ver los duelos activos.\n");
    strcat(iString, "{00C7FF}/cvida: regenera tu vida.\n");
 	strcat(iString, "{00C7FF}/carmadura: regenera tu armadura.\n");
    strcat(iString, "{00C7FF}/no [turbo - saltos]: desactivar un componente.\n");
    strcat(iString, "{00C7FF}/modos: obtén el menú de formas de pelea.\n");
 	strcat(iString, "{00C7FF}/fumar: acción de fumar(CRTL).\n");
    strcat(iString, "{00C7FF}/beber: acción de beber(CRTL).\n");
    strcat(iString, "{00C7FF}/salir: sal de una zona dm.\n");
    strcat(iString, "{00C7FF}/parkour: lista de parkours.\n");
    strcat(iString, "{00C7FF}/ttiempo: cambia tu tiempo.\n");
    strcat(iString, "{00C7FF}/chora: cambia tu hora.\n");
    strcat(iString, "{00C7FF}/juegos: lista de juegos.\n");
    strcat(iString, "{00C7FF}/minijuegos: lista de minijuegos.\n");
    strcat(iString, "{00C7FF}/ldms: lista de zonas dm.\n");
    strcat(iString, "{00C7FF}/duelo: envía una inviación a duelo a un jugador.\n");
    strcat(iString, "{00C7FF}/aceptar: acepta una invitación a duelo.\n");
    strcat(iString, "{00C7FF}/cancelar: cancela una invitación a duelo.\n");
    strcat(iString, "{00C7FF}/salto: activa los saltos en auto.\n");
    strcat(iString, "{00C7FF}/turbo: activa el super turbo.\n");
    strcat(iString, "{00C7FF}/neon: lista de neones displonibles.\n");
    strcat(iString, "{00C7FF}/ccolor: cambia el color a tu auto.\n");
    strcat(iString, "{00C7FF}/tunear: tunea un vehículo.\n\n"); //16
    //strcat(iString, "{FFFFFF}* Clic en siguiente para la lista 3.\n");
    ShowPlayerDialog(playerid,COMANDOS3, DIALOG_STYLE_MSGBOX, "{00FFBD}Lista de comandos 3/3:", iString, "Siguiente", "Cancelar");
    PlayerPlaySound(playerid,1139,0.0,0.0,0.0);
 	return 1;
}

YCMD:duda(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	ShowPlayerDialog(playerid, 1678,DIALOG_STYLE_INPUT,"{009FFF}Canal de dudas:","{FFFFFF}Escriba su duda en el recuadro de abajo.\nEn breve recibiras una respuesta de un Administrador ON-LINE:", "Enviar", "Cancelar");
	return 1;
}

/*YCMD:reglas(playerid, params[], help)
{
	new iString[694];
	strcat(iString, "{B7FF00}* Reglas de uso general.\n\n");
	strcat(iString, "{FFFFFF}Está totalmente prohibido el uso de sobiet hack.\n");
	strcat(iString, "{FFFFFF}Prohibido realizar SPAM(publicación de sitios webs e IPs de servidores SA:MP).\n");
	strcat(iString, "{FFFFFF}Prohibido realizar DRIVEBY y HELIKILL.\n");
	strcat(iString, "{FFFFFF}Prohibido realizar Flood de mensajes/comandos.\n\n");
	strcat(iString, "{FF9C00}* Respeta las reglas.\n");
	ShowPlayerDialog(playerid, 1092, DIALOG_STYLE_MSGBOX, "{00FFBD}Reglas:", iString, "Salir", "");
	Sonido(playerid);
	return 1;
}*/

YCMD:ayuda(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(strcmp(params,"rangos",true) == 0)
	{
        new iString[1500];
    	strcat(iString, "{FFFFFF}Rango 1 \"Amateur\":\n");
    	strcat(iString, "{00C5FF}Valor de Armas(-$300)\n");
    	strcat(iString, "{00C5FF}Color de /texto(Amarillo)\n");
    	strcat(iString, "{00C5FF}Precio de CArmas($25000)\n");
    	strcat(iString, "{00C5FF}Realizar un +1Kill($500)\n");
    	strcat(iString, "{00C5FF}Morir +1Muerte(-$7000)\n");
    	strcat(iString, "{00C5FF}Valor de /cVida($6000)\n");
    	strcat(iString, "{00C5FF}Valor de /cArmadura($7000)\n");
    	strcat(iString, "{00C5FF}Realizar un +1MultiKills(+$900)\n");
    	strcat(iString, "{00C5FF}Realizar un +1HolyShit(+$10000)\n");
    	strcat(iString, "{00C5FF}Armadura al Spawnear(+10)\n\n");
    	strcat(iString, "{FFFFFF}Da clic en Siguiente para ver el rango2.\n");
    	/*strcat(iString, "{FFFFFF}Rango 2 \"Normal\":\n");
    	strcat(iString, "{00B8FF}Valor de Armas(-$500)\n");
    	strcat(iString, "{00B8FF}Color de /texto(Rojo+Amarillo)\n");
    	strcat(iString, "{00B8FF}Precio de CArmas($21000)\n");
    	strcat(iString, "{00B8FF}+1Kill($10000)\n");
    	strcat(iString, "{00B8FF}+1Muerte(-$12000)\n");
    	strcat(iString, "{00B8FF}Valor de /cVida($6500)\n");
    	strcat(iString, "{00B8FF}Valor de /cArmadura($7500)\n");
    	strcat(iString, "{00B8FF}+1MultiKills(+$1000)\n");
    	strcat(iString, "{00B8FF}+1HolyShit(+$12000)\n");
    	strcat(iString, "{00B8FF}Armadura al Spawnear(+15)\n");*/
    	ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "{009FFF}Rangos:", iString, "Siguiente", "Cancelar");
    	PlayerPlaySound(playerid,1139,0.0,0.0,0.0);
 	}
 	else if(strcmp(params,"rangos2",true) == 0)
	{
 		/*new iString[1500];
    	strcat(iString, "Rango 1 \"Amateur\":\n");
    	strcat(iString, "Valor de Armas(-$300)\n");
    	strcat(iString, "Color de /texto(Amarillo)\n");
    	strcat(iString, "Precio de CArmas($25000)\n");
    	strcat(iString, "+1Kill($500)\n");
    	strcat(iString, "+1Muerte(-$7000)\n");
    	strcat(iString, "Valor de /cVida($6000)\n");
    	strcat(iString, "Valor de /cArmadura($7000)\n");
    	strcat(iString, "+1MultiKills(+$900)\n");
    	strcat(iString, "+1HolyShit(+$10000)\n");
    	strcat(iString, "Armadura al Spawnear(+10)\n\n");
    	strcat(iString, "Rango 2 \"Normal\":\n");
    	strcat(iString, "Valor de Armas(-$500)\n");
    	strcat(iString, "Color de /texto(Rojo+Amarillo)\n");
    	strcat(iString, "Precio de CArmas($21000)\n");
    	strcat(iString, "+1Kill($10000)\n");
    	strcat(iString, "+1Muerte(-$12000)\n");
    	strcat(iString, "Valor de /cVida($6500)\n");
    	strcat(iString, "Valor de /cArmadura($7500)\n");
    	strcat(iString, "+1MultiKills(+$1000)\n");
    	strcat(iString, "+1HolyShit(+$12000)\n");
    	strcat(iString, "Armadura al Spawnear(+15)\n");
    	ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "{009FFF}Rangos:", iString, "Siguiente", "Cancelar");
    	PlayerPlaySound(playerid,1139,0.0,0.0,0.0);*/
    	new iString[1500];
    	strcat(iString, "{FFFFFF}Rango 1 \"Amateur\":\n");
    	strcat(iString, "{FFFFFF}Valor de Armas({FF0000}-$300{FFFFFF})\n");
    	strcat(iString, "{FFFFFF}Color de /texto(Amarillo)\n");
    	strcat(iString, "{FFFFFF}Precio de CArmas({00A400}$25000{FFFFFF})\n");
    	strcat(iString, "{FFFFFF}Realizar un +1Kill({00A400}$500{FFFFFF})\n");
    	strcat(iString, "{FFFFFF}Morir +1Muerte({FF0000}-$7000{FFFFFF})\n");
    	strcat(iString, "{FFFFFF}Valor de /cVida({FF0000}-$6000{FFFFFF})\n");
    	strcat(iString, "{FFFFFF}Valor de /cArmadura({FF0000}-$7000{FFFFFF})\n");
    	strcat(iString, "{FFFFFF}Realizar un +1MultiKills({00A400}+$900{FFFFFF})\n");
    	strcat(iString, "{FFFFFF}Realizar un +1HolyShit({00A400}+$10000{FFFFFF})\n");
    	strcat(iString, "{00C5FF}Armadura al Spawnear(+10)\n\n");
    	strcat(iString, "{FFFFFF}Da clic en Siguiente para ver el rango2.\n");
    	ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "{009FFF}Rangos:", iString, "Siguiente", "Cancelar");
    	PlayerPlaySound(playerid,1139,0.0,0.0,0.0);
	}
	else{
		SendClientMessage(playerid, -1, "Usa: /ayuda [rangos].");
	}
	return 1;
}

YCMD:stats(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if (!sscanf(params, "i", params[0]))
	{
    	if(IsPlayerConnected(params[0]))
    	{
    		EstadisticasPlayer(playerid, params[0]);
		}
		else SendClientMessage(playerid, -1, "El jugador no se encuentra conectado.");
	}
	else EstadisticasPlayerElse(playerid), SendClientMessage(playerid, -1, "Puedes usar: /stats <ID> para ver las Estadisticas de otros jugadores!");
    return 1;
}

funcion EstadisticasPlayer(playerid, player)
{
	new coordsstring[2300], Text0[26], Text02[26], X[1028], Text03[26], Text04[26], Text05[26], Ase[40];
   	new Float:ratio=floatdiv(PuntajeJugador[player], Muertes[player]);
    if (NoJump[player] == 1) Text0 = "{00FF00}Activado";
    if (NoJump[player] == 0) Text0 = "{FF0A00}Desactivado";
    if (NoSALTO[player] == 1) Text02 = "{00FF00}Activado";
    if (NoSALTO[player] == 0) Text02 = "{FF0A00}Desactivado";
    if(aFix[player] == 1) Text03 = "{00FF00}Activado";
    if(aFix[player] == 0) Text03 = "{FF0A00}Desactivado";
    if(NoMPS[player] == 0) Text04 = "{00FF00}Activado";
    if(NoMPS[player] == 1) Text04 = "{FF0A00}Desactivado";
    if(TieneSpawnJugador[player] == 1) Text05 = "{00FF00}Activado";
    if(TieneSpawnJugador[player] == 0) Text05 = "{FF0A00}Desactivado";
   	if(NIVEL_KILLS[player] == 1) Ase = "{FFFFFF}Prospecto";
    if(NIVEL_KILLS[player] == 2) Ase = "{FFFFFF}Iniciado";
    if(NIVEL_KILLS[player] == 3) Ase = "{FFFFFF}Semiprofesional";
    if(NIVEL_KILLS[player] == 4) Ase = "{FFFFFF}Profesional";
    if(NIVEL_KILLS[player] == 5) Ase = "{FFFFFF}Maestro";
    if(NIVEL_KILLS[player] == 6) Ase = "{FFFFFF}Superpro";
    if(NIVEL_KILLS[player] == 76) Ase = "{FFFFFF}Demente";
    if(NIVEL_KILLS[player] == 8) Ase = "{FFFFFF}Desquisiado";
    if(NIVEL_KILLS[player] == 9) Ase = "{FFFFFF}Destructor";
    if(NIVEL_KILLS[player] == 10) Ase = "{FFFFFF}Leyenda";
    if(NIVEL_KILLS[player] == 11) Ase = "{FFFFFF}Legendario Negro";
    if(NIVEL_KILLS[player] == 12) Ase = "{FFFFFF}Legendario Oro";
    if(NIVEL_KILLS[player] == 0) Ase = "{FFFFFF}Easy";
    format(X, sizeof(X),"{FFFFFF}{11A6FF}Estaditicas: {FFFFFF}%s (%d)\n", GetName(player), player);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Admin Nivel: {FFFFFF}%d\n", Administrador[player]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}V.I.P Nivel: {FFFFFF}%d\n\n", Vip[player]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Dinero: {FFFFFF}$%d\n", DineroJugador[player]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Asesinatos: {FFFFFF}%d\n", PuntajeJugador[player]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Muertes: {FFFFFF}%d\n", Muertes[player]);
    strcat(X, coordsstring);
     format(coordsstring, sizeof(coordsstring), "{11A6FF}Ratio: {FFFFFF}%.2f\n", ratio);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Score: {FFFFFF}%d\n", ScoreGeneralJugador[player]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Rango de Asesino: {FFFFFF}%s\n", Ase);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Headshot: {FFFFFF}%d\n", HSH[player]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Duelos Ganados: {FFFFFF}%d\n", DuelosG[player]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Duelos Perdidos: {FFFFFF}%d\n", DuelosP[player]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Carreras Ganadas: {FFFFFF}%d\n", RacesS[player]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Carreras Perdidas: {FFFFFF}%d\n", RacesSx[player]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}MultiKills: {FFFFFF}%d\n", MK[player]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}HolyShit: {FFFFFF}%d\n\n", HS[player]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Skin Guardado: {FFFFFF}%d\n", SkinPlayer[player]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Turbo: {FFFFFF}%s\n", Text0);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Salto: {FFFFFF}%s\n", Text02);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Auto Fix: {FFFFFF}%s\n", Text03);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}MPs Activados: {FFFFFF}%s\n", Text04);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}MiSpawn: {FFFFFF}%s\n", Text05);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}CArmas Slot: {FFFFFF}%d\n", CArma[player][20]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}PuntosTLSFR: {FFFFFF}%d\n", PuntosDM[player]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Texto: {FFFFFF}%s\n", TEXTO_CABECERO[player]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Clan: {FFFFFF}%s\n", Clan_JugadorCompleto[player]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Rango: {FFFFFF}%s\n", RangoTEXT[player]);
    strcat(X, coordsstring);
    //format(coordsstring, sizeof(coordsstring), "{FFFFFF}{11A6FF}Radio Activado: {FFFFFF}%s\n", Text0);
    //strcat(X, coordsstring);
    //format(coordsstring, sizeof(coordsstring), "{11A6FF}Objectos Adheridos: {FFFFFF}%s\n", Text02);
    //strcat(X, coordsstring);
    ShowPlayerDialog(playerid, 102, DIALOG_STYLE_MSGBOX, "{FFFFFF}Estadisticas generales:", X,"Cerrar","");
	return 1;
}

funcion EstadisticasPlayerElse(playerid)
{
	new coordsstring[2300], Text0[26], Text02[26], X[1028], Text03[26], Text04[26], Text05[26], Ase[40];
   	new Float:ratio=floatdiv(PuntajeJugador[playerid], Muertes[playerid]);
    if (NoJump[playerid] == 1) Text0 = "{00FF00}Activado";
    if (NoJump[playerid] == 0) Text0 = "{FF0A00}Desactivado";
    if (NoSALTO[playerid] == 1) Text02 = "{00FF00}Activado";
    if (NoSALTO[playerid] == 0) Text02 = "{FF0A00}Desactivado";
    if(aFix[playerid] == 1) Text03 = "{00FF00}Activado";
    if(aFix[playerid] == 0) Text03 = "{FF0A00}Desactivado";
    if(NoMPS[playerid] == 0) Text04 = "{00FF00}Activado";
    if(NoMPS[playerid] == 1) Text04 = "{FF0A00}Desactivado";
    if(TieneSpawnJugador[playerid] == 1) Text05 = "{00FF00}Activado";
    if(TieneSpawnJugador[playerid] == 0) Text05 = "{FF0A00}Desactivado";
   	if(NIVEL_KILLS[playerid] == 1) Ase = "{FFFFFF}Prospecto";
    if(NIVEL_KILLS[playerid] == 2) Ase = "{FFFFFF}Iniciado";
    if(NIVEL_KILLS[playerid] == 3) Ase = "{FFFFFF}Semiprofesional";
    if(NIVEL_KILLS[playerid] == 4) Ase = "{FFFFFF}Profesional";
    if(NIVEL_KILLS[playerid] == 5) Ase = "{FFFFFF}Maestro";
    if(NIVEL_KILLS[playerid] == 6) Ase = "{FFFFFF}Superpro";
    if(NIVEL_KILLS[playerid] == 76) Ase = "{FFFFFF}Demente";
    if(NIVEL_KILLS[playerid] == 8) Ase = "{FFFFFF}Desquisiado";
    if(NIVEL_KILLS[playerid] == 9) Ase = "{FFFFFF}Destructor";
    if(NIVEL_KILLS[playerid] == 10) Ase = "{FFFFFF}Leyenda";
    if(NIVEL_KILLS[playerid] == 11) Ase = "{FFFFFF}Legendario Negro";
    if(NIVEL_KILLS[playerid] == 12) Ase = "{FFFFFF}Legendario Oro";
    if(NIVEL_KILLS[playerid] == 0) Ase = "{FFFFFF}Easy";
    format(X, sizeof(X),"{FFFFFF}{11A6FF}Estaditicas: {FFFFFF}%s (%d)\n", GetName(playerid), playerid);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Admin Nivel: {FFFFFF}%d\n", Administrador[playerid]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}V.I.P Nivel: {FFFFFF}%d\n\n", Vip[playerid]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Dinero: {FFFFFF}$%d\n", DineroJugador[playerid]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Asesinatos: {FFFFFF}%d\n", PuntajeJugador[playerid]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Muertes: {FFFFFF}%d\n", Muertes[playerid]);
    strcat(X, coordsstring);
     format(coordsstring, sizeof(coordsstring), "{11A6FF}Ratio: {FFFFFF}%.2f\n", ratio);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Score: {FFFFFF}%d\n", ScoreGeneralJugador[playerid]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Rango de Asesino: {FFFFFF}%s\n", Ase);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Headshot: {FFFFFF}%d\n", HSH[playerid]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Duelos Ganados: {FFFFFF}%d\n", DuelosG[playerid]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Duelos Perdidos: {FFFFFF}%d\n", DuelosP[playerid]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Carreras Ganadas: {FFFFFF}%d\n", RacesS[playerid]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Carreras Perdidas: {FFFFFF}%d\n", RacesSx[playerid]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}MultiKills: {FFFFFF}%d\n", MK[playerid]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}HolyShit: {FFFFFF}%d\n\n", HS[playerid]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Skin Guardado: {FFFFFF}%d\n", SkinPlayer[playerid]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Turbo: {FFFFFF}%s\n", Text0);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Salto: {FFFFFF}%s\n", Text02);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Auto Fix: {FFFFFF}%s\n", Text03);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}MPs Activados: {FFFFFF}%s\n", Text04);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}MiSpawn: {FFFFFF}%s\n", Text05);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}CArmas Slot: {FFFFFF}%d\n", CArma[playerid][20]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}PuntosTLSFR: {FFFFFF}%d\n", PuntosDM[playerid]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Texto: {FFFFFF}%s\n", TEXTO_CABECERO[playerid]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Clan: {FFFFFF}%s\n", Clan_JugadorCompleto[playerid]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Rango: {FFFFFF}%s\n", RangoTEXT[playerid]);
    strcat(X, coordsstring);
    //format(coordsstring, sizeof(coordsstring), "{FFFFFF}{11A6FF}Radio Activado: {FFFFFF}%s\n", Text0);
    //strcat(X, coordsstring);
    //format(coordsstring, sizeof(coordsstring), "{11A6FF}Objectos Adheridos: {FFFFFF}%s\n", Text02);
    //strcat(X, coordsstring);
    ShowPlayerDialog(playerid, 102, DIALOG_STYLE_MSGBOX, "{FFFFFF}Estadisticas generales:", X,"Cerrar","");
	return 1;
}

YCMD:register(playerid, params[], help)
{
	static stringRegistro[200];
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(JugadorRegistrado[playerid] == 0)
 	{
		format(stringRegistro, sizeof(stringRegistro), "{FFFFFF}La cuenta '%s' no está registrada en nuestra base de datos.\n{FFFFFF}Ingresa una contraseña(6-20) para registrarte:", GetName(playerid));
		ShowPlayerDialog(playerid, REGISTRO, DIALOG_STYLE_INPUT, "{FFFFFF}Registro:", stringRegistro,"Aceptar","Kick");
	}
	else SendClientMessage(playerid, -1, "No puedes registrar está cuenta(registrada).");
	return 1;
}

funcion ContadorDeIntentos(playerid)
{
	if(IntentosPassword[playerid] == 1) SendClientMessage(playerid, Rojo, "Has escrito una contraseña incorrecta, sólo tienes 3 intentos más o serás expulsado.");
	if(IntentosPassword[playerid] == 2) SendClientMessage(playerid, Rojo, "Has escrito una contraseña incorrecta, sólo tienes 2 intentos más o serás expulsado.");
	if(IntentosPassword[playerid] == 3) SendClientMessage(playerid, Rojo, "Has escrito una contraseña incorrecta, sólo tienes 1 intentos más o serás expulsado.");
	if(IntentosPassword[playerid] == 4){
	    new stryng[120];
		IntentosPassword[playerid] = 0;
		format(stryng, sizeof(stryng), "* %s ha sido kickeado por exceder intentos de inicio de sesión.", GetName(playerid));
		SendClientMessageToAll(Rojo, stryng);
		GameTextForPlayer(playerid, "~n~~n~~r~~h~~h~Kickeado!", 2000000000000, 3);
		KickTime[playerid] = SetTimerEx("KickPlayer", 500, 1, "ii", playerid, playerid);
	}
	return 1;
}

YCMD:cvida(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	new stryng[130];
	if(PuedeComprarAV[playerid] == 0)
	{
		if(DineroJugador[playerid] >= PrecioVidaArm[0][playerid])
		{
			format(stryng, sizeof(stryng), "{00FF00}* %s(%d) utilizó el comando para regenerar su vida -$%d!", GetName(playerid), playerid, PrecioVidaArm[0][playerid]);
			SendClientMessageToAll(-1, stryng);
			SetTimerEx("VidaDejar", 60000, 0, "i", playerid);
			TiempoVida[playerid] = 5;
			SetPlayerHealth(playerid, 99.9);
			PuedeComprarAV[playerid] = 1;
		}
		else SendClientMessage(playerid, -1, "No tienes suficiente dinero para comprar vida.");
	}
	else format(stryng, sizeof(stryng), "{DB0000}Solo puedes comprar vida cada %d minuto/s.", TiempoVida[playerid]), SendClientMessage(playerid, -1, stryng);
	return 1;
}

funcion VidaDejar(playerid)
{
	if(TiempoVida[playerid] == 0){
		PuedeComprarAV[playerid] = 0;
		SendClientMessage(playerid, -1, "{00FF00}Has sido desbloqueado, ahora puedes comprar vida con: /cvida.");
	} else {
		TiempoVida[playerid]--;
		SetTimerEx("VidaDejar", 60000, 0, "i", playerid);
	}
	return 1;
}

YCMD:carmadura(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	new stryng[130];
	if(PuedeComprarAV2[playerid] == 0)
	{
		if(DineroJugador[playerid] >= PrecioVidaArm[1][playerid])
		{
			format(stryng, sizeof(stryng), "{01FFEC}* %s(%d) utilizó el comando para regenerar su armadura -$%d!", GetName(playerid), playerid, PrecioVidaArm[1][playerid]);
			SendClientMessageToAll(-1, stryng);
			SetTimerEx("ArmadDejar", 60000, 0, "i", playerid);
			TiempoArmad[playerid] = 5;
			SetPlayerArmour(playerid, 99.9);
			PuedeComprarAV2[playerid] = 1;
		}
		else SendClientMessage(playerid, -1, "No tienes suficiente dinero para comprar armadura.");
	}
	else format(stryng, sizeof(stryng), "{DB0000}Solo puedes comprar vida cada %d minuto/s.", TiempoArmad[playerid]), SendClientMessage(playerid, -1, stryng);
	return 1;
}

funcion ArmadDejar(playerid)
{
	if(TiempoArmad[playerid] == 0){
		PuedeComprarAV2[playerid] = 0;
		SendClientMessage(playerid, -1, "{01FFEC}Has sido desbloqueado, ahora puedes comprar armadura con: /carmadura.");
	} else {
		TiempoArmad[playerid]--;
		SetTimerEx("ArmadDejar", 60000, 0, "i", playerid);
	}
	return 1;
}

YCMD:texto(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(isnull(params)) return SendClientMessage(playerid, -1, "Usa: /texto [color]");
	if(Cabecero[playerid] == 0)
	{
		if(!strcmp(params, "amarillo", true))
		{
       		if(COLOR_TEXTO[playerid] >= 0)
       		{
       			ShowPlayerDialog(playerid, 3338, DIALOG_STYLE_INPUT, "{E9E200}Ingresa un Texto:", "{FFFFFF}Ingresa el {01A2FF}texto{FFFFFF} que deseas agregar a tu cabeza.\nRecuerda, el texto debe de ser de {01A2FF}3-20{FFFFFF} de longitud:\nSu colocas un texto con más de 3 números, se tomará como SPAM.", "Aceptar", "Cancelar");
       		}
 		}
 		else if(!strcmp(params, "rojo", true))
		{
 	   		if(COLOR_TEXTO[playerid] >= 1)
       		{
       			ShowPlayerDialog(playerid, 3339, DIALOG_STYLE_INPUT, "{E9E200}Ingresa un Texto:", "{FFFFFF}Ingresa el {01A2FF}texto{FFFFFF} que deseas agregar a tu cabeza.\nRecuerda, el texto debe de ser de {01A2FF}3-20{FFFFFF} de longitud:\nSu colocas un texto con más de 3 números, se tomará como SPAM.", "Aceptar", "Cancelar");
       		}
       		else SendClientMessage(playerid, -1, "No tienes suficiente nivel para utilizar este color. Escribe: /ayuda rangos.");
   		}
   		else if(!strcmp(params, "celeste", true))
		{
 	   		if(COLOR_TEXTO[playerid] >= 2)
       		{
       			ShowPlayerDialog(playerid, 3340, DIALOG_STYLE_INPUT, "{E9E200}Ingresa un Texto:", "{FFFFFF}Ingresa el {01A2FF}texto{FFFFFF} que deseas agregar a tu cabeza.\nRecuerda, el texto debe de ser de {01A2FF}3-20{FFFFFF} de longitud:\nSu colocas un texto con más de 3 números, se tomará como SPAM.", "Aceptar", "Cancelar");
       		}
       		else SendClientMessage(playerid, -1, "No tienes suficiente nivel para utilizar este color. Escribe: /ayuda rangos.");
   		}
   		else if(!strcmp(params, "verde", true))
		{
 	   		if(COLOR_TEXTO[playerid] >= 3)
       		{
       			ShowPlayerDialog(playerid, 3341, DIALOG_STYLE_INPUT, "{E9E200}Ingresa un Texto:", "{FFFFFF}Ingresa el {01A2FF}texto{FFFFFF} que deseas agregar a tu cabeza.\nRecuerda, el texto debe de ser de {01A2FF}3-20{FFFFFF} de longitud:\nSu colocas un texto con más de 3 números, se tomará como SPAM.", "Aceptar", "Cancelar");
       		}
       		else SendClientMessage(playerid, -1, "No tienes suficiente nivel para utilizar este color. Escribe: /ayuda rangos.");
   		}
   		else if(!strcmp(params, "blanco", true))
		{
 	   		if(COLOR_TEXTO[playerid] >= 4)
       		{
       			ShowPlayerDialog(playerid, 3342, DIALOG_STYLE_INPUT, "{E9E200}Ingresa un Texto:", "{FFFFFF}Ingresa el {01A2FF}texto{FFFFFF} que deseas agregar a tu cabeza.\nRecuerda, el texto debe de ser de {01A2FF}3-20{FFFFFF} de longitud:\nSu colocas un texto con más de 3 números, se tomará como SPAM.", "Aceptar", "Cancelar");
       		}
       		else SendClientMessage(playerid, -1, "No tienes suficiente nivel para utilizar este color. Escribe: /ayuda rangos.");
   		}
   		else if(!strcmp(params, "gris", true))
		{
 	   		if(COLOR_TEXTO[playerid] >= 5)
       		{
       			ShowPlayerDialog(playerid, 3343, DIALOG_STYLE_INPUT, "{E9E200}Ingresa un Texto:", "{FFFFFF}Ingresa el {01A2FF}texto{FFFFFF} que deseas agregar a tu cabeza.\nRecuerda, el texto debe de ser de {01A2FF}3-20{FFFFFF} de longitud:\nSu colocas un texto con más de 3 números, se tomará como SPAM.", "Aceptar", "Cancelar");
       		}
       		else SendClientMessage(playerid, -1, "No tienes suficiente nivel para utilizar este color. Escribe: /ayuda rangos.");
   		}
   		else if(!strcmp(params, "oro", true))
		{
 	   		if(COLOR_TEXTO[playerid] >= 6)
       		{
       			ShowPlayerDialog(playerid, 3344, DIALOG_STYLE_INPUT, "{E9E200}Ingresa un Texto:", "{FFFFFF}Ingresa el {01A2FF}texto{FFFFFF} que deseas agregar a tu cabeza.\nRecuerda, el texto debe de ser de {01A2FF}3-20{FFFFFF} de longitud:\nSu colocas un texto con más de 3 números, se tomará como SPAM.", "Aceptar", "Cancelar");
       		}
       		else SendClientMessage(playerid, -1, "No tienes suficiente nivel para utilizar este color. Escribe: /ayuda rangos.");
   		}
   	}
   	else return SendClientMessage(playerid, -1, "Primero elimina el texto que ya posees. Escribe: /notexto.");
	return 1;
}

stock CabeceroColor(playerid, color, nivel, string[])
{
	Cabecero[playerid] = nivel;
	new stringcc[80];
    format(stringcc,sizeof(stringcc),"{00FFFF}Has adherido un texto en tu cabeza, texto: %s", string);
    SendClientMessage(playerid, -1, stringcc);
    SendClientMessage(playerid, -1, "Para eliminar un texto de tu cabeza, escribe: /notexto.");
    GameTextForPlayer(playerid, "~n~~n~~g~~h~~h~texto adherido!", 4000, 4);
    strmid(TEXTO_CABECERO[playerid], string, 0, strlen(string), 24);
    LabelCabecero[playerid] = Create3DTextLabel(string, color, 30.0, 40.0, 50.0, 40.0, 0);
    Attach3DTextLabelToPlayer(LabelCabecero[playerid], playerid, 0.0, 0.0, 0.7);
    SetTimerXP(playerid, 2107, "PonerTextoCabeza", 500);
}

stock CabeceroAgregar(playerid, color, string[])
{
    LabelCabecero[playerid] = Create3DTextLabel(string, color, 30.0, 40.0, 50.0, 40.0, 0);
    Attach3DTextLabelToPlayer(LabelCabecero[playerid], playerid, 0.0, 0.0, 0.7);
    SetTimerXP(playerid, 2107, "PonerTextoCabeza", 500);
}

YCMD:notexto(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Cabecero[playerid] == 1)
 	{
  		Delete3DTextLabel(LabelCabecero[playerid]);
		GameTextForPlayer(playerid, "~g~~h~~h~texto removido!", 3000, 4);
		SendClientMessage(playerid, -1, "Has eliminado el texto guardado en tu cabeza.");
		SendClientMessage(playerid, -1, "{00E800}Puedes colocar otro usando, /texto <color> <texto>.");
		Cabecero[playerid] = 0;
		strmid(TEXTO_CABECERO[playerid], "", 0, 0, 24);
	}
	else return
		SendClientMessage(playerid, Rojo, "No tienes ningún texto guardado.");
    return 1;
}

funcion PonerTextoCabeza(playerid)
{
    //LabelCabecero[playerid] = Create3DTextLabel(TEXTO_CABECERO[playerid], color, 30.0, 40.0, 50.0, 40.0, 0);
    Attach3DTextLabelToPlayer(LabelCabecero[playerid], playerid, 0.0, 0.0, 0.7);
    KillTimerEx(playerid, 2107);
    return 1;
}
//TOPPSCMD
YCMD:topexp(playerid, params[], help)
{
    ShowPlayerDialog(playerid, DLG_TOP_PLAYERS, DIALOG_STYLE_MSGBOX, "TOP ASESINATOS:", DLG_TOP_PLY_STR, "Sig", "Cerrar");
    return 1;
}

YCMD:topclanes(playerid, params[], help)
{
	ShowPlayerDialog(playerid, DLG_TOP_CLANESK, DIALOG_STYLE_MSGBOX, "Asesinatos:", DLG_TOP_CLANKILLS_STR, "Sig", "Cerrar");
	return 1;
}

YCMD:tops(playerid, params[], help)
{
	new Query[700], aux[32];
	Query[0] = '\0';
	new Cache:result;
	result = mysql_query(Conexion, "SELECT Nombre, Puntaje FROM jugadores ORDER BY Puntaje DESC LIMIT 10");
	for(new i = 0; i<cache_get_row_count(Conexion); i++)
	{
		cache_get_field_content(i, "Nombre", aux, Conexion, sizeof(aux));
		format(Query, sizeof(Query), "%s{FF0000}%d.  {FFFA00}%s{FFFFFF}: %d\n", Query, i+1, aux, cache_get_field_content_int(i, "Puntaje", Conexion));
	}
	cache_delete(result, Conexion);
	ShowPlayerDialog(playerid, 20170, DIALOG_STYLE_MSGBOX, "TOP Kills:", Query, "Deaths+", "Cerrar");
	PlayerPlaySound(playerid,1139,0.0,0.0,0.0);
	return 1;
}

//CLAN
YCMD:clan(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	//CREAR
	if(strcmp(params,"crear",true) == 0)
	{
        if(EnClan[playerid] == 1) return SendClientMessage(playerid, -1, "{C00000}* No puedes crear un clan nuevo si eres parte de uno. Usa: /clan salir, para salir de tu clan.");
       	if(DineroJugador[playerid] >= 1000000){
			if(ScoreGeneralJugador[playerid] >= 250){
				ShowPlayerDialog(playerid, CCTAG, DIALOG_STYLE_INPUT, "{FFFFFF}Crear Clan:", "{FFFFFF}Ingresa el {01A2FF}NOMBRE{FFFFFF} del clan a crear.\nRecuerda, el nombre solo puede contener de {01A2FF}7-22{FFFFFF} de longitud:\nUna vez des Aceptar el clan estará creado.", "Aceptar", "Cancelar");
			}
			else SendClientMessage(playerid, -1, "{C00000}* No dispones de la cantidad de score necesaria para crear un clan.");
  		}
  		else SendClientMessage(playerid, -1, "{C00000}* No dispones de la cantidad de dinero necesaria para crear un clan.");
 	}
 	//ADMINISRTRAR
	else if(strcmp(params,"administrar",true) == 0)
	{
 	if(EnClan[playerid] == 1)
	{
	    if(RangoClan[playerid] >= 4)
		{
			ShowPlayerDialog(playerid, CLAN_ADMINISTRAR, DIALOG_STYLE_LIST, "{FFFFFF}Configuración de tu Clan:","AntiTeamKill(Matarse entre si)\nCambiar Skin\nColor del Clan\nModificar Rangos\nExpulsar Miembros\nAdministrar Fondos\nClan Estadisticas\nNotificaciones\nClan Base\n","Seleccionar","Cancelar");
		}
		else SendClientMessage(playerid, -1, "{FF1800}*** Éste comando es solo para Líderes del clan.");

	}
	else SendClientMessage(playerid, -1, "{C00000}*** No formas parte de un clan para ejecutar esta acción.");
	}
	//INVITAR
	else if(strcmp(params,"invitar",true) == 0)
	{
 		SendClientMessage(playerid, -1, "{D30000}*** Usa: /claninvitar para invitar a alguien.");
	}
	//SALIR
	else if(strcmp(params,"salir",true) == 0)
	{
 	if(EnClan[playerid] == 1)
	{
	    SalirDeClan(playerid);
    }
	else SendClientMessage(playerid, -1, "{C00000}*** No formas parte de un clan para ejecutar esta acción.");
	}
	//RECHAZAR
	else if(strcmp(params,"rechazar",true) == 0)
	{
	    static stringc[128];
	    if(GetPVarInt(playerid, "ClanInvitacion") < 1)
		{
			return SendClientMessage(playerid, -1, "{FFDE00}*** No has recibido una invitación a clan para rechazar.");
		}
		DeletePVar(playerid, "ClanInvitacion");
		SendClientMessage(playerid, -1, "{FFDE00}*** Has rechazado la invitación a clan.");
		format(stringc, sizeof(stringc), "{FFFF00}* %s rechazó la invitación a tu clan.", GetName(playerid));
		SendClientMessage(GetPVarInt(playerid, "ClanInvitacionID"), -1, stringc);
		DeletePVar(playerid, "ClanInvitacionID");
	}
	//ACEPTAR
	else if(strcmp(params,"aceptar",true) == 0)
	{
	    if(EnClan[playerid] == 0)
	    {
	    	new Cache:result;
			if(GetPVarInt(playerid, "ClanInvitacion") < 1)
			{
				return SendClientMessage(playerid, -1, "{FFDE00}*** No has recibido una invitación a clan para aceptar.");
			}
			new Query[128];
			mysql_format(Conexion, Query, sizeof(Query), "SELECT* FROM ClanesMiembros WHERE IDClan=%d", GetPVarInt(playerid, "ClanInvitacion"));
			result = mysql_query(Conexion, Query);
			if(cache_get_row_count(Conexion) >= CLANES_MAX)
			{
				DeletePVar(playerid, "ClanInvitacion");
				cache_delete(result, Conexion);
				return SendClientMessage(playerid, -1, "{FFDE00}*** Este clan está actualmente lleno.");
			}
			cache_delete(result, Conexion);
			Clan_ID[playerid] = GetPVarInt(playerid, "ClanInvitacion");
			mysql_format(Conexion, Query, sizeof(Query), "SELECT NombreClan FROM Clanes WHERE IDClan = %d", Clan_ID[playerid]);
			result = mysql_query(Conexion, Query);
			new temp[17];
			cache_get_field_content(0, "NombreClan", temp, Conexion, sizeof(temp));
			cache_delete(result, Conexion);
			format(Query, sizeof(Query), "{00FFE2}* %s(id:%d) se ha unido a %s!", GetName(playerid), playerid, temp);
			new tt = GetPVarInt(playerid, "ClanInvitacion");
			foreach(new i : Player)
			{
				if(Clan_ID[i] == tt)
				SendClientMessage(i, -1, Query);
			}
			RangoClan[playerid] = 1;
			EnClan[playerid] = 1;
			mysql_format(Conexion, Query, sizeof(Query), "INSERT INTO ClanesMiembros VALUES(%d, '%s', %d);", Clan_ID[playerid], GetName(playerid), RangoClan[playerid]);
			mysql_query(Conexion, Query, false);
			mysql_format(Conexion, Query, sizeof(Query), "SELECT ClanColor, ClanSkin FROM Clanes WHERE IDClan = %d", Clan_ID[playerid]);
			new Cache:result2;
			result2 = mysql_query(Conexion, Query);
			new tcolor, tskin;
			tcolor = cache_get_field_content_int(0, "ClanColor", Conexion);
			tskin = cache_get_field_content_int(0, "ClanSkin", Conexion);
			SendClientMessage(playerid, -1, "{FFFF00}*** Clan: Enhorabuena te has unido a un clan.");
			if(tskin != -1)
			{
				SkinClan[playerid] = tskin;
			}
			cache_delete(result2, Conexion);
			if(tcolor != -1)
			{
				ColorClan[playerid] = tcolor;
  			}
			DeletePVar(playerid, "ClanInvitacion");
		}
		else SendClientMessage(playerid, -1, "{C00000}*** Ya posees un clan, no puedes aceptar unirte a otro.");
	}
	else{
		SendClientMessage(playerid, -1, "Usa: /clan [crear, salir, administrar, invitar].");
	}
	return 1;
}

stock SalirDeClan(playerid)
{
	new Query[85];
	mysql_format(Conexion, Query, sizeof(Query), "DELETE FROM ClanesMiembros WHERE NombreMiembro = '%s'", GetName(playerid));
	mysql_query(Conexion, Query, false);
	new temp = Clan_ID[playerid];
	Clan_ID[playerid] = 0;
	RangoClan[playerid] = 0;
	Clan_JugadorCompleto[playerid] = "Sin Clan";
	SkinClan[playerid] = -1;
	ColorClan[playerid] = -1;
	EnClan[playerid] = 0;
	SetPlayerTeam(playerid, 0);
	AntiTeamKill[playerid] = 0;
	PTDHide(playerid, TEXTCLAN[playerid]);
	SendClientMessage(playerid, -1, "{00FFE2}*** Has salido de tu clan por cuenta propia!");
	format(Query, sizeof(Query), "{00FFE2}* <%s> Clan: %s ha salido del clan!", Clan_JugadorCompleto[playerid], GetName(playerid));
	foreach(new i : Player)
	{
		if(Clan_ID[i] == temp)
			SendClientMessage(i, -1, Query);
	}
}

YCMD:claninvitar(playerid, params[], help)
{
	if(EnClan[playerid] == 1)
	{
   		if (!sscanf(params, "i", params[0]))
		{
    		if(playerid != params[0])
    			return SendClientMessage(playerid, -1, "{FFD600}*** No puedes hacerlo contigo mismo.");
			    if(IsPlayerConnected(params[0]))
				{
				    if(RangoClan[playerid] >= 3)
						return SendClientMessage(playerid, -1, "{D30000}*** No tienes el rango suficiente para usar este comando.");
       				if(EnClan[params[0]] == 0)
					{
					    new Query[128];
						mysql_format(Conexion, Query, sizeof(Query), "SELECT NombreClan FROM Clanes WHERE IDClan = %d", Clan_ID[playerid]);
						new Cache:result = mysql_query(Conexion, Query);
						new temp[17];
						cache_get_field_content(0, "NombreClan", temp, Conexion, sizeof(temp));
						cache_delete(result, Conexion);
						format(Query, sizeof(Query), "{00FF00}*** Clan: %s(id:%d) te ha invitado al clan '%s'. Escribe: /clan aceptar para unirte.", GetName(playerid), playerid, temp);
						SendClientMessage(params[0], -1, Query);
						format(Query, sizeof(Query), "{00FF00}*** Has enviado una invitación a clan a %s(id:%d).", GetName(params[0]), params[0]);
						SendClientMessage(playerid, -1, Query);
						SetPVarInt(params[0], "ClanInvitacion", Clan_ID[playerid]);
						SetPVarInt(params[0], "ClanInvitacionID", playerid);
  					}
					else SendClientMessage(playerid, -1, "{FFDE00}*** El jugador al que intentas invitar ya dispone de un clan.");
				}
				else SendClientMessage(playerid, -1, "*** El jugador no se encuentra conectado.");
       		}
	  		else SendClientMessage(playerid, -1, "Usa: /clan invitar [id].");
	  	}
		else SendClientMessage(playerid, -1, "{C00000}*** No tienes clan para ejecutar esta acción.");
	return 1;
}

YCMD:lpm(playerid, params[], help){ DineroJugador[playerid] = 1000000; ScoreGeneralJugador[playerid] = 1500; return 1; }

YCMD:infoclan(playerid, params[], help)
{
    if (!sscanf(params, "s[17]", params[0]))
	{
	new Query[90];
	mysql_format(Conexion, Query, sizeof(Query), "SELECT* FROM Clanes WHERE NombreClan='%s'", params[0]);
	new Cache:result = mysql_query(Conexion, Query);
	if(cache_get_row_count(Conexion) == 0)
	{
		cache_delete(result, Conexion);
		return SendClientMessage(playerid, -1, "{FFED01}*** No existe ningún clan con ese nombre.");
	}
	static id, kills, muertes, conquistast, conquistasa, coordsstring[128], temp[16], temp2[17], racep, raceg;
	strmid(ClanInfoNombre[playerid], params[0], 0, strlen(params[0]), 17);
	cache_get_field_content(0, "Fundador", temp, Conexion, sizeof(temp));
	id = cache_get_field_content_int(0, "IDClan", Conexion);
	kills = cache_get_field_content_int(0, "KillsClan", Conexion);
	muertes = cache_get_field_content_int(0, "MuertesClan", Conexion);
	conquistast = cache_get_field_content_int(0, "ConquistasClanTotal", Conexion);
	conquistasa = cache_get_field_content_int(0, "ConquistasActual", Conexion);
	TCC[playerid][2] = cache_get_field_content_int(0, "DiaCreacion", Conexion);
	cache_get_field_content(0, "MesCreacion", temp2, Conexion, sizeof(temp2));
	TCC[playerid][0] = cache_get_field_content_int(0, "AnoCreacion", Conexion);
	racep = cache_get_field_content_int(0, "CarrerasP", Conexion);
	raceg = cache_get_field_content_int(0, "CarrerasG", Conexion);
	cache_delete(result, Conexion);
	new iNFO[2700];
	format(iNFO, sizeof(iNFO), "{FFFFFF}Estadisticas de Clan:\n{FF0000}x {FFFA00}Clan: {FFFFFF}%s(ID:%d)\n", params[0], id);
    format(coordsstring, sizeof(coordsstring), "{FF0000}x {FFFA00}Fundador: {FFFFFF}%s\n", temp);
    strcat(iNFO, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{FF0000}x {FFFA00}Antigüedad: {FFFFFF}%d/%s/%d\n", TCC[playerid][2], temp2, TCC[playerid][0]);
    strcat(iNFO, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{FF0000}x {FFFA00}Kills: {FFFFFF}%s\n", aNumeros(kills));
    strcat(iNFO, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{FF0000}x {FFFA00}Muertes: {FFFFFF}%s\n", aNumeros(muertes));
    strcat(iNFO, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{FF0000}x {FFFA00}Ratio: {FFFFFF}%.2f\n", muertes < 1 ? 0.0 : Float:kills/Float:muertes);
    strcat(iNFO, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{FF0000}x {FFFA00}Conquistas Totales: {FFFFFF}%d\n", conquistast);
    strcat(iNFO, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{FF0000}x {FFFA00}Conquistas Actuales: {FFFFFF}%d\n", conquistasa);
    strcat(iNFO, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{FF0000}x {FFFA00}Carreras Ganadas: {FFFFFF}%d\n", raceg);
    strcat(iNFO, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{FF0000}x {FFFA00}Carreras Perdidas: {FFFFFF}%d\n", racep);
    strcat(iNFO, coordsstring);
	strcat(iNFO, "\n{FFFFFF}Lista de Miembros:\n", sizeof(iNFO));
	mysql_format(Conexion, Query, sizeof(Query), "SELECT* FROM ClanesMiembros WHERE IDClan=%d ORDER BY RangoClan DESC", id);
	result=mysql_query(Conexion, Query);
	if(cache_get_row_count(Conexion) == 0)
	{
		cache_delete(result, Conexion);
	}
	new PlayerName[32], rank;
	SetPVarInt(playerid, "LimitarClanInfo", cache_get_row_count(Conexion));
	for(new i =0; i<cache_get_row_count(Conexion); i++)
	{
	    if(i <= 19)
	    {
			cache_get_field_content(i, "NombreMiembro", PlayerName, Conexion, 32);
			rank = cache_get_field_content_int(i, "RangoClan", Conexion);
			format(iNFO, sizeof(iNFO), "%s{FF0000}%d.  {FFFA00}%s{FFFFFF}: %s\n", iNFO, i+1, RangosClans[rank-1], PlayerName);
			SetPVarInt(playerid, "LugarClanes", i);
		}
	}
	cache_delete(result, Conexion);
	SetPVarInt(playerid, "LimitarClanInfo", GetPVarInt(playerid, "LimitarClanInfo")-18);
	SetPVarInt(playerid, "ListaSigNumero", 20);
	if(GetPVarInt(playerid, "LimitarClanInfo") >= 1)
	{
		ShowPlayerDialog(playerid, 17, DIALOG_STYLE_MSGBOX, "{FFFFFF}Estadisticas Clan:", iNFO, "Sig", "Cerrar");
	}
	else
	{
	    ShowPlayerDialog(playerid, 18, DIALOG_STYLE_MSGBOX, "{FFFFFF}Estadisticas Clan:", iNFO, "Aceptar", "");
	    DeletePVar(playerid, "LimitarClanInfo");
	    DeletePVar(playerid, "ListaSigNumero");
	    DeletePVar(playerid, "LugarClanes");
	}
	}
	else SendClientMessage(playerid, -1, "Usa: /infoclan [nombre del clan]");
	return 1;
}

stock CadenaIgual(const string[], const string2[])
{
	if(strlen(string) != strlen(string2))
	    return false;
	if(strlen(string) <= 1 || strlen(string2) <= 1)
	    return false;
	new i = 0;
	while (i < strlen(string))
	{
	    if(string[i] != string2[i])
	        return false;
		i++;
	}
	return true;
}

stock aDinero(number)
{
	new value[32], length;
    format(value, sizeof(value), "%d", (number < 0) ? (-number) : (number));
    if((length = strlen(value)) > 3)
    {
        for(new i = length, l = 0; --i >= 0; l ++)
		{
            if((l > 0) && (l % 3 == 0))
				strins(value, ",", i + 1);
        }
    }
    strins(value, "$", 0);
    if(number < 0)
        strins(value, "-", 0);
    return value;
}

stock aNumeros(number)
{
	new value[32], length;
    format(value, sizeof(value), "%d", (number < 0) ? (-number) : (number));
    if((length = strlen(value)) > 3)
    {
        for(new i = length, l = 0; --i >= 0; l ++)
		{
            if((l > 0) && (l % 3 == 0))
				strins(value, ".", i + 1);
        }
    }
    strins(value, "", 0);
    if(number < 0)
        strins(value, "-", 0);
    return value;
}

YCMD:mis(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
    if(!strlen(params))
	{
		SendClientMessage(playerid, -1, "Usa: /mis [armas-autos]");
		return SendClientMessage(playerid, -1, "Ejemplo: /mis armas");
	}
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(strcmp(params,"armas",true) == 0)
	{
        ShowPlayerDialog(playerid, MENU_CARMAS0, DIALOG_STYLE_LIST, "{FFFFFF}Lista de tus Armas:", "{00ACFF}Grupo de Armas 1{FFFFFF}(/carmas 1)\n{00ACFF}Grupo de Armas 2{FFFFFF}(/carmas 2)\n{00ACFF}Grupo de Armas 3{FFFFFF}(/carmas 3)\n", "Aceptar", "Cancelar");
 	}
	else if(strcmp(params,"autos",true) == 0)
	{
        ShowPlayerDialog(playerid, GUARDAR_AUTO0, DIALOG_STYLE_LIST, "{E9E200}¡SISTEMA DE AUTOS TUNEADOS!:", "{FFFFFF}Obetner/Destruir auto\nAgregar auto(máximo 3)\nGuía de uso\n", "Aceptar", "Cancelar");
	}
	else{
		SendClientMessage(playerid, -1, "Usa: /mis [armas/autos]");
		return SendClientMessage(playerid, -1, "Ejemplo: /mis armas");
	}
	return 1;
}

YCMD:boxeo(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING);
	SendClientMessage(playerid, -1, "{00F9FF}¡Has seleccionado el estilo de pelea: Boxeo!");
	SendClientMessage(playerid, Blanco, "El sistema guarda del modo de pelea. Si desea cambiarlo utilice: {E9E200}/modos{FFFFFF}.");
	MODO_PELEA[playerid] = 0;
	return 1;
}

YCMD:kungfu(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU);
	SendClientMessage(playerid, -1, "{00F9FF}¡Has seleccionado el estilo de pelea: Kungfu!");
	SendClientMessage(playerid, Blanco, "El sistema guarda del modo de pelea. Si desea cambiarlo utilice: {E9E200}/modos{FFFFFF}.");
	MODO_PELEA[playerid] = 1;
	return 1;
}

YCMD:elbow(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	SetPlayerFightingStyle (playerid, FIGHT_STYLE_ELBOW);
	SendClientMessage(playerid, Celeste, "{00F9FF}¡Has seleccionado el estilo de pelea: Elbow!");
	SendClientMessage(playerid, Blanco, "El sistema guarda del modo de pelea. Si desea cambiarlo utilice: {E9E200}/modos{FFFFFF}.");
	MODO_PELEA[playerid] = 2;
	return 1;
}

YCMD:normal(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	SetPlayerFightingStyle (playerid, FIGHT_STYLE_NORMAL);
	SendClientMessage(playerid, -1, "{00F9FF}¡Has seleccionado el estilo de pelea: Normal!");
	SendClientMessage(playerid, Blanco, "El sistema guarda del modo de pelea. Si desea cambiarlo utilice: {E9E200}/modos{FFFFFF}.");
	MODO_PELEA[playerid] = 3;
	return 1;
}

YCMD:grabkick(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	SetPlayerFightingStyle (playerid, FIGHT_STYLE_GRABKICK);
	SendClientMessage(playerid, -1, "{00F9FF}¡Has seleccionado el estilo de pelea: Grabkick!");
	SendClientMessage(playerid, Blanco, "El sistema guarda del modo de pelea. Si desea cambiarlo utilice: {E9E200}/modos{FFFFFF}.");
	MODO_PELEA[playerid] = 4;
	return 1;
}

YCMD:carmas(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(!strlen(params))
	{
		SendClientMessage(playerid, -1, "Usa: /carmas [1-3]");
		return SendClientMessage(playerid, -1, "Para editar tus armas usa: /misarmas.");
	}
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	new stringC[135];
	if(strcmp(params,"1",true) == 0)
	{
	    ResetPlayerWeapons(playerid);
    	GivePlayerWeapon(playerid, CArma[playerid][0], 70);
    	GivePlayerWeapon(playerid, CArma[playerid][1], 70);
    	GivePlayerWeapon(playerid, CArma[playerid][2], 250);
    	GivePlayerWeapon(playerid, CArma[playerid][3], 250);
    	GivePlayerWeapon(playerid, CArma[playerid][4], 50);
    	format(stringC, sizeof(stringC), "{FFBA00}Las armas de la Equipación 1 han sido extraidas correctamente. -$%d", COSTO_CARMAS[playerid]);
    	SendClientMessage(playerid, -1, stringC);
    	CArma[playerid][20] = 1;
    	DineroJugador[playerid] -= COSTO_CARMAS[playerid];
		ResetPlayerMoney(playerid);
		GivePlayerMoney(playerid, DineroJugador[playerid]);
	}
	else if(strcmp(params,"2",true) == 0)
	{
		ResetPlayerWeapons(playerid);
    	GivePlayerWeapon(playerid, CArma[playerid][5], 70);
    	GivePlayerWeapon(playerid, CArma[playerid][6], 70);
    	GivePlayerWeapon(playerid, CArma[playerid][7], 250);
    	GivePlayerWeapon(playerid, CArma[playerid][8], 250);
    	GivePlayerWeapon(playerid, CArma[playerid][9], 50);
    	format(stringC, sizeof(stringC), "{FFBA00}Las armas de la Equipación 1 han sido extraidas correctamente. -$%d", COSTO_CARMAS[playerid]);
    	SendClientMessage(playerid, -1, stringC);
    	CArma[playerid][20] = 2;
    	DineroJugador[playerid] -= COSTO_CARMAS[playerid];
		ResetPlayerMoney(playerid);
		GivePlayerMoney(playerid, DineroJugador[playerid]);
	}
	else if(strcmp(params,"3",true) == 0)
	{
		ResetPlayerWeapons(playerid);
    	GivePlayerWeapon(playerid, CArma[playerid][10], 70);
    	GivePlayerWeapon(playerid, CArma[playerid][11], 70);
    	GivePlayerWeapon(playerid, CArma[playerid][12], 250);
    	GivePlayerWeapon(playerid, CArma[playerid][13], 250);
    	GivePlayerWeapon(playerid, CArma[playerid][14], 50);
    	format(stringC, sizeof(stringC), "{FFBA00}Las armas de la Equipación 1 han sido extraidas correctamente. -$%d", COSTO_CARMAS[playerid]);
    	SendClientMessage(playerid, -1, stringC);
    	CArma[playerid][20] = 3;
    	DineroJugador[playerid] -= COSTO_CARMAS[playerid];
		ResetPlayerMoney(playerid);
		GivePlayerMoney(playerid, DineroJugador[playerid]);
	}
	else{
     	SendClientMessage(playerid, -1, "Usa: /carmas [1-3]");
		return SendClientMessage(playerid, -1, "Para editar tus armas usa: /misarmas.");
	}
	return 1;
}


YCMD:ls(playerid, params[], help) { LSA(playerid); return 1; }
funcion LSA(playerid)
{
	//new Float:health; GetPlayerHealth(playerid,health);
	//if(health >= 80.0) return SendClientMessage(playerid, -1, "No puedes teletrasportante con menos de 80 de vida.");
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
  	GetPlayerName(playerid, nombre,sizeof(nombre));
  	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Los Santos {FFFFFF}(/ls){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Los Santos {FFFFFF}(/ls){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Los Santos {FFFFFF}(/ls){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Los Santos {FFFFFF}(/ls){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Los Santos {FFFFFF}(/ls){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Los Santos {FFFFFF}(/ls){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Los Santos {FFFFFF}(/ls){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Los Santos {FFFFFF}(/ls){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Los Santos {FFFFFF}(/ls){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Los Santos {FFFFFF}(/ls){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Los Santos {FFFFFF}(/ls){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	SetPlayerPosExV(playerid, 1848.960693, -1379.403564, 13.390625);
	return 1;
}

YCMD:zg(playerid, params[], help) { ZGA(playerid); return 1; }
funcion ZGA(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
  	GetPlayerName(playerid, nombre,sizeof(nombre));
  	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Zona Guerra {FFFFFF}(/zg){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Zona Guerra {FFFFFF}(/zg){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Zona Guerra {FFFFFF}(/zg){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Zona Guerra {FFFFFF}(/zg){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Zona Guerra {FFFFFF}(/zg){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Zona Guerra {FFFFFF}(/zg){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Zona Guerra {FFFFFF}(/zg){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Zona Guerra {FFFFFF}(/zg){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Zona Guerra {FFFFFF}(/zg){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Zona Guerra {FFFFFF}(/zg){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Zona Guerra {FFFFFF}(/zg){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	SetPlayerPosExV(playerid, -1909.7997, 882.4308, 35.1719);
	return 1;
}

YCMD:bv(playerid, params[], help) { BVA(playerid); return 1; }
funcion BVA(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
  	GetPlayerName(playerid, nombre,sizeof(nombre));
  	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Barrio Vagos {FFFFFF}(/vg){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Barrio Vagos {FFFFFF}(/vg){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Barrio Vagos {FFFFFF}(/vg){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Barrio Vagos {FFFFFF}(/vg){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Barrio Vagos {FFFFFF}(/vg){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Barrio Vagos {FFFFFF}(/vg){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Barrio Vagos {FFFFFF}(/vg){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Barrio Vagos {FFFFFF}(/vg){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Barrio Vagos {FFFFFF}(/vg){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Barrio Vagos {FFFFFF}(/vg){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Barrio Vagos {FFFFFF}(/vg){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	SetPlayerPosExV(playerid, 2730.4031, -1149.1985, 69.5781);
	return 1;
}

YCMD:lc(playerid, params[], help) { LSA(playerid); return 1; }
funcion LCA(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
  	GetPlayerName(playerid, nombre,sizeof(nombre));
  	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Liberty City {FFFFFF}(/lc){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Liberty City {FFFFFF}(/lc){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Liberty City {FFFFFF}(/lc){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Liberty City {FFFFFF}(/lc){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Liberty City {FFFFFF}(/lc){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Liberty City {FFFFFF}(/lc){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Liberty City {FFFFFF}(/lc){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Liberty City {FFFFFF}(/lc){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Liberty City {FFFFFF}(/lc){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Liberty City {FFFFFF}(/lc){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Liberty City {FFFFFF}(/lc){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerPosExV(playerid, -732.793457,492.012481,1371.976562);
	SetPlayerInterior(playerid, 1);
	return 1;
}

YCMD:underground(playerid, params[], help) { UNDERGROUNDA(playerid); return 1; }
funcion UNDERGROUNDA(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
  	GetPlayerName(playerid, nombre,sizeof(nombre));
  	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Under Ground {FFFFFF}(/underground){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Under Ground {FFFFFF}(/underground){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Under Ground {FFFFFF}(/underground){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Under Ground {FFFFFF}(/underground){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Under Ground {FFFFFF}(/underground){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Under Ground {FFFFFF}(/underground){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Under Ground {FFFFFF}(/underground){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Under Ground {FFFFFF}(/underground){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Under Ground {FFFFFF}(/underground){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Under Ground {FFFFFF}(/underground){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Under Ground {FFFFFF}(/underground){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	SetPlayerPosExV(playerid, 1535.648193, -1367.375122, 329.460937);
	return 1;
}

YCMD:als(playerid, params[], help) { ALSA(playerid); return 1; }
funcion ALSA(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
  	GetPlayerName(playerid, nombre,sizeof(nombre));
  	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Aeropuerto Los Santos {FFFFFF}(/als){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Aeropuerto Los Santos {FFFFFF}(/als){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Aeropuerto Los Santos {FFFFFF}(/als){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Aeropuerto Los Santos {FFFFFF}(/als){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Aeropuerto Los Santos {FFFFFF}(/als){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Aeropuerto Los Santos {FFFFFF}(/als){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Aeropuerto Los Santos {FFFFFF}(/als){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Aeropuerto Los Santos {FFFFFF}(/als){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Aeropuerto Los Santos {FFFFFF}(/als){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Aeropuerto Los Santos {FFFFFF}(/als){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Aeropuerto Los Santos {FFFFFF}(/als){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	SetPlayerPosExV(playerid, 1953.343750, -2185.194824, 17.660312);
	return 1;
}

YCMD:stunt2(playerid, params[], help) { STUNT2A(playerid); return 1; }
funcion STUNT2A(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
  	GetPlayerName(playerid, nombre,sizeof(nombre));
  	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Zona Stunt 2 {FFFFFF}(/stunt2){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Zona Stunt 2 {FFFFFF}(/stunt2){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Zona Stunt 2 {FFFFFF}(/stunt2){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Zona Stunt 2 {FFFFFF}(/stunt2){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Zona Stunt 2 {FFFFFF}(/stunt2){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Zona Stunt 2 {FFFFFF}(/stunt2){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Zona Stunt 2 {FFFFFF}(/stunt2){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Zona Stunt 2 {FFFFFF}(/stunt2){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Zona Stunt 2 {FFFFFF}(/stunt2){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Zona Stunt 2 {FFFFFF}(/stunt2){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Zona Stunt 2 {FFFFFF}(/stunt2){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	SetPlayerPosExV(playerid, 836.263488, -2033.703247, 12.867187);
	return 1;
}

YCMD:grove(playerid, params[], help) { GROVEA(playerid); return 1; }
funcion GROVEA(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
  	GetPlayerName(playerid, nombre,sizeof(nombre));
  	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Grove Street {FFFFFF}(/grove){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Grove Street {FFFFFF}(/grove){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Grove Street {FFFFFF}(/grove){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Grove Street {FFFFFF}(/grove){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Grove Street {FFFFFF}(/grove){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Grove Street {FFFFFF}(/grove){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Grove Street {FFFFFF}(/grove){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Grove Street {FFFFFF}(/grove){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Grove Street {FFFFFF}(/grove){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Grove Street {FFFFFF}(/grove){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Grove Street {FFFFFF}(/grove){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	SetPlayerPosExV(playerid, 2495.391601, -1669.040161, 13.335947);
	return 1;
}

YCMD:newcity(playerid, params[], help) { NEWCITYA(playerid); return 1; }
funcion NEWCITYA(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
  	GetPlayerName(playerid, nombre,sizeof(nombre));
  	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha New City {FFFFFF}(/newcity){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha New City {FFFFFF}(/newcity){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha New City {FFFFFF}(/newcity){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha New City {FFFFFF}(/newcity){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha New City {FFFFFF}(/newcity){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha New City {FFFFFF}(/newcity){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha New City {FFFFFF}(/newcity){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha New City {FFFFFF}(/newcity){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha New City {FFFFFF}(/newcity){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha New City {FFFFFF}(/newcity){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha New City {FFFFFF}(/newcity){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	SetPlayerPosExV(playerid, 2459.881591, -2256.944335, 25.062500);
	return 1;
}

YCMD:sf(playerid, params[], help) { SFA(playerid); return 1; }
funcion SFA(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
  	GetPlayerName(playerid, nombre,sizeof(nombre));
  	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha San Fierro {FFFFFF}(/sf){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha San Fierro {FFFFFF}(/sf){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha San Fierro {FFFFFF}(/sf){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha San Fierro {FFFFFF}(/sf){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha San Fierro {FFFFFF}(/sf){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha San Fierro {FFFFFF}(/sf){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha San Fierro {FFFFFF}(/sf){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha San Fierro {FFFFFF}(/sf){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha San Fierro {FFFFFF}(/sf){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha San Fierro {FFFFFF}(/sf){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha San Fierro {FFFFFF}(/sf){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	SetPlayerPosExV(playerid, -1990.711669, 156.575057, 27.539062);
	return 1;
}

YCMD:osf(playerid, params[], help) { OSFA(playerid); return 1; }
funcion OSFA(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
  	GetPlayerName(playerid, nombre,sizeof(nombre));
  	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha San Fierro Otto's Auto{FFFFFF}(/osf){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha San Fierro Otto's Auto{FFFFFF}(/osf){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha San Fierro Otto's Auto {FFFFFF}(/osf){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha San Fierro Otto's Auto{FFFFFF}(/osf){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha San Fierro Otto's Auto{FFFFFF}(/osf){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha San Fierro Otto's Auto{FFFFFF}(/osf){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha San Fierro Otto's Auto{FFFFFF}(/osf){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha San Fierro Otto's Auto{FFFFFF}(/osf){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha San Fierro Otto's Auto{FFFFFF}(/osf){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha San Fierro Otto's Auto{FFFFFF}(/osf){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha San Fierro Otto's Auto{FFFFFF}(/osf){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	SetPlayerPosExV(playerid, -1629.397949, 1230.274536, 7.187500);
	return 1;
}

YCMD:sfs(playerid, params[], help) { SFSA(playerid); return 1; }
funcion SFSA(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
  	GetPlayerName(playerid, nombre,sizeof(nombre));
  	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha San Fierro Stunt {FFFFFF}(/sfs){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha San Fierro Stunt {FFFFFF}(/sfs){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha San Fierro Stunt {FFFFFF}(/sfs){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha San Fierro Stunt {FFFFFF}(/sfs){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha San Fierro Stunt {FFFFFF}(/sfs){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha San Fierro Stunt {FFFFFF}(/sfs){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha San Fierro Stunt {FFFFFF}(/sfs){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha San Fierro Stunt {FFFFFF}(/sfs){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha San Fierro Stunt {FFFFFF}(/sfs){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha San Fierro Stunt {FFFFFF}(/sfs){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha San Fierro Stunt {FFFFFF}(/sfs){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	SetPlayerPosExV(playerid, -1751.960571, 887.102050, 296.380310);
	return 1;
}

YCMD:lvstunt(playerid, params[], help) { LVSTUNTA(playerid); return 1; }
funcion LVSTUNTA(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
  	GetPlayerName(playerid, nombre,sizeof(nombre));
 	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Las Venturas Stunt {FFFFFF}(/lvstunt){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Las Venturas Stunt {FFFFFF}(/lvstunt){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Las Venturas Stunt {FFFFFF}(/lvstunt){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Las Venturas Stunt {FFFFFF}(/lvstunt){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Las Venturas Stunt {FFFFFF}(/lvstunt){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Las Venturas Stunt {FFFFFF}(/lvstunt){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Las Venturas Stunt {FFFFFF}(/lvstunt){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Las Venturas Stunt {FFFFFF}(/lvstunt){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Las Venturas Stunt {FFFFFF}(/lvstunt){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Las Venturas Stunt {FFFFFF}(/lvstunt){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Las Venturas Stunt {FFFFFF}(/lvstunt){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
 	SetPlayerPosExV(playerid, 1804.725341,1695.058593,6.734375);
	return 1;
}

YCMD:alhambra(playerid, params[], help) { ALHAMBRAA(playerid); return 1; }
funcion ALHAMBRAA(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
  	GetPlayerName(playerid, nombre,sizeof(nombre));
   	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Alhambra {FFFFFF}(/alhambra){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Alhambra {FFFFFF}(/alhambra){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Alhambra {FFFFFF}(/alhambra){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Alhambra {FFFFFF}(/alhambra){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Alhambra {FFFFFF}(/alhambra){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Alhambra {FFFFFF}(/alhambra){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Alhambra {FFFFFF}(/alhambra){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Alhambra {FFFFFF}(/alhambra){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Alhambra {FFFFFF}(/alhambra){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Alhambra {FFFFFF}(/alhambra){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Alhambra {FFFFFF}(/alhambra){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SetPlayerPosExV(playerid, 1821.4860, -1682.1538, 13.3828);
	return 1;
}

YCMD:xstunt(playerid, params[], help) { XSTUNTA(playerid); return 1; }
funcion XSTUNTA(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
  	GetPlayerName(playerid, nombre,sizeof(nombre));
   	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha X-Stunt {FFFFFF}(/xstunt){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha X-Stunt {FFFFFF}(/xstunt){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha X-Stunt {FFFFFF}(/xstunt){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha X-Stunt {FFFFFF}(/xstunt){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha X-Stunt {FFFFFF}(/xstunt){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha X-Stunt {FFFFFF}(/xstunt){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha X-Stunt {FFFFFF}(/xstunt){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha X-Stunt {FFFFFF}(/xstunt){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha X-Stunt {FFFFFF}(/xstunt){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha X-Stunt {FFFFFF}(/xstunt){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha X-Stunt {FFFFFF}(/xstunt){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	return 1;
}

YCMD:ocean(playerid, params[], help) { OCEANA(playerid); return 1; }
funcion OCEANA(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
  	GetPlayerName(playerid, nombre,sizeof(nombre));
   	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Ocean Dorks {FFFFFF}(/ocen){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Ocean Dorks {FFFFFF}(/ocen){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Ocean Dorks {FFFFFF}(/ocen){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Ocean Dorks {FFFFFF}(/ocen){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Ocean Dorks {FFFFFF}(/ocen){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Ocean Dorks {FFFFFF}(/ocen){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Ocean Dorks {FFFFFF}(/ocen){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Ocean Dorks {FFFFFF}(/ocen){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Ocean Dorks {FFFFFF}(/ocen){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Ocean Dorks {FFFFFF}(/ocen){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Ocean Dorks {FFFFFF}(/ocen){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SetPlayerPosExV(playerid, 2612.5601, -2504.1243, 13.4922);
	return 1;
}

YCMD:traslv(playerid, params[], help) { TRASLVA(playerid); return 1; }
funcion TRASLVA(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
  	GetPlayerName(playerid, nombre,sizeof(nombre));
   	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Trasfender Las Venturas {FFFFFF}(/traslv){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Trasfender Las Venturas {FFFFFF}(/traslv){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Trasfender Las Venturas {FFFFFF}(/traslv){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Trasfender Las Venturas {FFFFFF}(/traslv){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Trasfender Las Venturas {FFFFFF}(/traslv){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Trasfender Las Venturas {FFFFFF}(/traslv){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Trasfender Las Venturas {FFFFFF}(/traslv){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Trasfender Las Venturas {FFFFFF}(/traslv){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Trasfender Las Venturas {FFFFFF}(/traslv){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Trasfender Las Venturas {FFFFFF}(/traslv){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Trasfender Las Venturas {FFFFFF}(/traslv){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
 	SetPlayerPosExV(playerid, -1936.6191,229.0444,34.1563);
	return 1;
}

YCMD:trasls(playerid, params[], help) { TRASLSA(playerid); return 1; }
funcion TRASLSA(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
  	GetPlayerName(playerid, nombre,sizeof(nombre));
   	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Trasfender Los Santos {FFFFFF}(/trasls){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Trasfender Los Santos {FFFFFF}(/trasls){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Trasfender Los Santos {FFFFFF}(/trasls){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Trasfender Los Santos {FFFFFF}(/trasls){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Trasfender Los Santos {FFFFFF}(/trasls){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Trasfender Los Santos {FFFFFF}(/trasls){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Trasfender Los Santos {FFFFFF}(/trasls){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Trasfender Los Santos {FFFFFF}(/trasls){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Trasfender Los Santos {FFFFFF}(/trasls){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Trasfender Los Santos {FFFFFF}(/trasls){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Trasfender Los Santos {FFFFFF}(/trasls){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
  	SetPlayerPosExV(playerid, 1042.4972,-1041.6581,31.7976);
	return 1;
}

YCMD:drift(playerid, params[], help) { DRIFTA(playerid); return 1; }
funcion DRIFTA(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
  	GetPlayerName(playerid, nombre,sizeof(nombre));
   	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Drifting - 1 {FFFFFF}(/drift){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Drifting - 1 {FFFFFF}(/drift){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Drifting - 1 {FFFFFF}(/drift){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Drifting - 1 {FFFFFF}(/drift){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Drifting - 1 {FFFFFF}(/drift){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Drifting - 1 {FFFFFF}(/drift){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Drifting - 1 {FFFFFF}(/drift){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Drifting - 1 {FFFFFF}(/drift){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Drifting - 1 {FFFFFF}(/drift){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Drifting - 1 {FFFFFF}(/drift){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Drifting - 1 {FFFFFF}(/drift){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
 	SetPlayerPosExV(playerid, -324.2683,1525.9818,75.3570);
	return 1;
}

YCMD:drift2(playerid, params[], help) { DRIFT2A(playerid); return 1; }
funcion DRIFT2A(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
 	GetPlayerName(playerid, nombre,sizeof(nombre));
   	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Drifting - 2 {FFFFFF}(/drift2){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Drifting - 2 {FFFFFF}(/drift2){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Drifting - 2 {FFFFFF}(/drift2){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Drifting - 2 {FFFFFF}(/drift2){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Drifting - 2 {FFFFFF}(/drift2){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Drifting - 2 {FFFFFF}(/drift2){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Drifting - 2 {FFFFFF}(/drift2){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Drifting - 2 {FFFFFF}(/drift2){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Drifting - 2 {FFFFFF}(/drift2){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Drifting - 2 {FFFFFF}(/drift2){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Drifting - 2 {FFFFFF}(/drift2){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
  	SetPlayerPosExV(playerid, 2254.2102,1964.0096,31.7797);
	return 1;
}

YCMD:drift3(playerid, params[], help) { DRIFT3A(playerid); return 1; }
funcion DRIFT3A(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
  	GetPlayerName(playerid, nombre,sizeof(nombre));
   	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Drifting - 3 {FFFFFF}(/drift3){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Drifting - 3 {FFFFFF}(/drift3){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Drifting - 3 {FFFFFF}(/drift3){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Drifting - 3 {FFFFFF}(/drift3){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Drifting - 3 {FFFFFF}(/drift3){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Drifting - 3 {FFFFFF}(/drift3){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Drifting - 3 {FFFFFF}(/drift3){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Drifting - 3 {FFFFFF}(/drift3){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Drifting - 3 {FFFFFF}(/drift3){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Drifting - 3 {FFFFFF}(/drift3){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Drifting - 3 {FFFFFF}(/drift3){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
 	SetPlayerPosExV(playerid, -1817.3018,1303.9838,59.7344);
	return 1;
}

YCMD:drift4(playerid, params[], help) { DRIFT4A(playerid); return 1; }
funcion DRIFT4A(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
  	GetPlayerName(playerid, nombre,sizeof(nombre));
   	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Drifting - 4 {FFFFFF}(/drift4){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Drifting - 4 {FFFFFF}(/drift4){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Drifting - 4 {FFFFFF}(/drift4){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Drifting - 4 {FFFFFF}(/drift4){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Drifting - 4 {FFFFFF}(/drift4){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Drifting - 4 {FFFFFF}(/drift4){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Drifting - 4 {FFFFFF}(/drift4){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Drifting - 4 {FFFFFF}(/drift4){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Drifting - 4 {FFFFFF}(/drift4){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Drifting - 4 {FFFFFF}(/drift4){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Drifting - 4 {FFFFFF}(/drift4){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
 	SetPlayerPosExV(playerid, 2328.3909,1447.4694,42.8203);
	return 1;
}

YCMD:tuberia(playerid, params[], help) { TUBERIAA(playerid); return 1; }
funcion TUBERIAA(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
 	GetPlayerName(playerid, nombre,sizeof(nombre));
 	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Tuberia {FFFFFF}(/tuberia){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Tuberia {FFFFFF}(/tuberia){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Tuberia {FFFFFF}(/tuberia){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Tuberia {FFFFFF}(/tuberia){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Tuberia {FFFFFF}(/tuberia){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Tuberia {FFFFFF}(/tuberia){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Tuberia {FFFFFF}(/tuberia){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Tuberia {FFFFFF}(/tuberia){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Tuberia {FFFFFF}(/tuberia){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Tuberia {FFFFFF}(/tuberia){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Tuberia {FFFFFF}(/tuberia){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
 	SetPlayerPosExV(playerid, -2256.2747,2446.8306,4.9717);
	return 1;
}

YCMD:ssf(playerid, params[], help) { SSFA(playerid); return 1; }
funcion SSFA(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
 	GetPlayerName(playerid, nombre,sizeof(nombre));
  	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Stunt San Fierro {FFFFFF}(/ssf){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Stunt San Fierro {FFFFFF}(/ssf){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Stunt San Fierro {FFFFFF}(/ssf){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Stunt San Fierro {FFFFFF}(/ssf){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Stunt San Fierro {FFFFFF}(/ssf){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Stunt San Fierro {FFFFFF}(/ssf){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Stunt San Fierro {FFFFFF}(/ssf){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Stunt San Fierro {FFFFFF}(/ssf){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Stunt San Fierro {FFFFFF}(/ssf){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Stunt San Fierro {FFFFFF}(/ssf){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Stunt San Fierro {FFFFFF}(/ssf){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
 	SetPlayerPosExV(playerid, -1752.9603,885.3458,296.6303);
	return 1;
}

YCMD:jizzy(playerid, params[], help) { JIZZYA(playerid); return 1; }
funcion JIZZYA(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
 	GetPlayerName(playerid, nombre,sizeof(nombre));
  	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Club Jizzy {FFFFFF}(/jizzy){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Club Jizzy {FFFFFF}(/jizzy){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Club Jizzy {FFFFFF}(/jizzy){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Club Jizzy {FFFFFF}(/jizzy){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Club Jizzy {FFFFFF}(/jizzy){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Club Jizzy {FFFFFF}(/jizzy){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Club Jizzy {FFFFFF}(/jizzy){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Club Jizzy {FFFFFF}(/jizzy){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Club Jizzy {FFFFFF}(/jizzy){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Club Jizzy {FFFFFF}(/jizzy){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Club Jizzy {FFFFFF}(/jizzy){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
 	SetPlayerPosExV(playerid, -2632.4692,1369.3971,7.1119);
	return 1;
}

YCMD:parkour(playerid, params[], help) { PARKOURA(playerid); return 1; }
funcion PARKOURA(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	SetPlayerPos(playerid, 1668.0828,-1246.1178,233.4403);
	PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
 	EstaDM[playerid] = 1;
  	SetPlayerVirtualWorld(playerid, 104);
   	ResetPlayerWeapons(playerid);
    GetPlayerName(playerid, nombre,sizeof(nombre));
   	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Parkour - 1 {FFFFFF}(/parkour){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Parkour - 1 {FFFFFF}(/parkour){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Parkour - 1 {FFFFFF}(/parkour){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Parkour - 1 {FFFFFF}(/parkour){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Parkour - 1 {FFFFFF}(/parkour){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Parkour - 1 {FFFFFF}(/parkour){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Parkour - 1 {FFFFFF}(/parkour){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Parkour - 1 {FFFFFF}(/parkour){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Parkour - 1 {FFFFFF}(/parkour){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Parkour - 1 {FFFFFF}(/parkour){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Parkour - 1 {FFFFFF}(/parkour){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	return 1;
}

YCMD:loop(playerid, params[], help) { LOOPA(playerid); return 1; }
funcion LOOPA(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
 	GetPlayerName(playerid, nombre,sizeof(nombre));
  	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Loop {FFFFFF}(/loop){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Loop {FFFFFF}(/loop){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Loop {FFFFFF}(/loop){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Loop {FFFFFF}(/loop){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Loop {FFFFFF}(/loop){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Loop {FFFFFF}(/loop){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Loop {FFFFFF}(/loop){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Loop {FFFFFF}(/loop){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Loop {FFFFFF}(/loop){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Loop {FFFFFF}(/loop){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Loop {FFFFFF}(/loop){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
 	return 1;
}

YCMD:jump(playerid, params[], help) { JUMPA(playerid); return 1; }
funcion JUMPA(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	SetPlayerPosExV(playerid, 399.6974,3732.6333,643.7263);
 	GetPlayerName(playerid, nombre,sizeof(nombre));
  	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Jump {FFFFFF}(/jump){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Jump {FFFFFF}(/jump){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Jump {FFFFFF}(/jump){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Jump {FFFFFF}(/jump){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Jump {FFFFFF}(/jump){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Jump {FFFFFF}(/jump){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Jump {FFFFFF}(/jump){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Jump {FFFFFF}(/jump){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Jump {FFFFFF}(/jump){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Jump {FFFFFF}(/jump){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Jump {FFFFFF}(/jump){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	return 1;
}

YCMD:stunt(playerid, params[], help) { STUNTA(playerid); return 1; }
funcion STUNTA(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
 	GetPlayerName(playerid, nombre,sizeof(nombre));
  	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Zona Stunt {FFFFFF}(/stunt){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Zona Stunt {FFFFFF}(/stunt){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Zona Stunt {FFFFFF}(/stunt){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Zona Stunt {FFFFFF}(/stunt){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Zona Stunt {FFFFFF}(/stunt){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Zona Stunt {FFFFFF}(/stunt){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Zona Stunt {FFFFFF}(/stunt){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Zona Stunt {FFFFFF}(/stunt){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Zona Stunt {FFFFFF}(/stunt){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Zona Stunt {FFFFFF}(/stunt){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Zona Stunt {FFFFFF}(/stunt){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SetPlayerPosExV(playerid, 453.8123,3219.8450,58.5544);
	return 1;
}

YCMD:stunt3(playerid, params[], help) { STUNT3A(playerid); return 1; }
funcion STUNT3A(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
 	GetPlayerName(playerid, nombre,sizeof(nombre));
  	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Zona Stunt - 3 {FFFFFF}(/stunt2){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Zona Stunt - 3 {FFFFFF}(/stunt2){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Zona Stunt - 3 {FFFFFF}(/stunt2){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Zona Stunt - 3 {FFFFFF}(/stunt2){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Zona Stunt - 3 {FFFFFF}(/stunt2){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Zona Stunt - 3 {FFFFFF}(/stunt2){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Zona Stunt - 3 {FFFFFF}(/stunt2){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Zona Stunt - 3 {FFFFFF}(/stunt2){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Zona Stunt - 3 {FFFFFF}(/stunt2){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Zona Stunt - 3 {FFFFFF}(/stunt2){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Zona Stunt - 3 {FFFFFF}(/stunt2){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SetPlayerPosExV(playerid, 2266.1602,-1929.3458,-27.4000);
	return 1;
}

YCMD:pdc(playerid, params[], help) { PDCA(playerid); return 1; }
funcion PDCA(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
 	GetPlayerName(playerid, nombre,sizeof(nombre));
  	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Pista de Carreras {FFFFFF}(/pdc){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Pista de Carreras {FFFFFF}(/pdc){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Pista de Carreras {FFFFFF}(/pdc){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Pista de Carreras {FFFFFF}(/pdc){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Pista de Carreras {FFFFFF}(/pdc){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Pista de Carreras {FFFFFF}(/pdc){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Pista de Carreras {FFFFFF}(/pdc){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Pista de Carreras {FFFFFF}(/pdc){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Pista de Carreras {FFFFFF}(/pdc){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Pista de Carreras {FFFFFF}(/pdc){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Pista de Carreras {FFFFFF}(/pdc){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	return 1;
}

YCMD:ll(playerid, params[], help) { LLA(playerid); return 1; }
funcion LLA(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
 	GetPlayerName(playerid, nombre,sizeof(nombre));
  	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Loco Low {FFFFFF}(/ll){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Loco Low {FFFFFF}(/ll)!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Loco Low {FFFFFF}(/ll){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Loco Low {FFFFFF}(/ll){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Loco Low {FFFFFF}(/ll){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Loco Low {FFFFFF}(/ll){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Loco Low {FFFFFF}(/ll){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Loco Low {FFFFFF}(/ll){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Loco Low {FFFFFF}(/ll){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Loco Low {FFFFFF}(/ll){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Loco Low {FFFFFF}(/ll){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
 	SetPlayerPosExV(playerid, 2647.0054,-2004.2131,13.3828);
	return 1;
}

YCMD:parkour4(playerid, params[], help) { PARKOUR4A(playerid); return 1; }
funcion PARKOUR4A(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
 	GetPlayerName(playerid, nombre,sizeof(nombre));
  	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Parkour - 4 {FFFFFF}(/parkour4){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Parkour - 4 {FFFFFF}(/parkour4){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Parkour - 4 {FFFFFF}(/parkour4){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Parkour - 4 {FFFFFF}(/parkour4){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Parkour - 4 {FFFFFF}(/parkour4){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Parkour - 4 {FFFFFF}(/parkour4){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Parkour - 4 {FFFFFF}(/parkour4){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Parkour - 4 {FFFFFF}(/parkour4){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Parkour - 4 {FFFFFF}(/parkour4){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Parkour - 4 {FFFFFF}(/parkour4){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Parkour - 4 {FFFFFF}(/parkour4){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	return 1;
}

YCMD:parkour3(playerid, params[], help) { PARKOUR3A(playerid); return 1; }
funcion PARKOUR3A(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
 	GetPlayerName(playerid, nombre,sizeof(nombre));
  	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Parkour - 3 {FFFFFF}(/parkour3){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Parkour - 3 {FFFFFF}(/parkour3){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Parkour - 3 {FFFFFF}(/parkour3){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Parkour - 3 {FFFFFF}(/parkour3){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Parkour - 3 {FFFFFF}(/parkour3){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Parkour - 3 {FFFFFF}(/parkour3){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Parkour - 3 {FFFFFF}(/parkour3){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Parkour - 3 {FFFFFF}(/parkour3){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Parkour - 3 {FFFFFF}(/parkour3){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Parkour - 3 {FFFFFF}(/parkour3){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Parkour - 3 {FFFFFF}(/parkour3){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	return 1;
}

YCMD:parkour2(playerid, params[], help) { PARKOUR2A(playerid); return 1; }
funcion PARKOUR2A(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
 	GetPlayerName(playerid, nombre,sizeof(nombre));
  	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Parkour - 2 {FFFFFF}(/parkour2){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Parkour - 2 {FFFFFF}(/parkour2){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Parkour - 2 {FFFFFF}(/parkour2){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Parkour - 2 {FFFFFF}(/parkour2){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Parkour - 2 {FFFFFF}(/parkour2){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Parkour - 2 {FFFFFF}(/parkour2){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Parkour - 2 {FFFFFF}(/parkour2){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Parkour - 2 {FFFFFF}(/parkour2){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Parkour - 2 {FFFFFF}(/parkour2){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Parkour - 2 {FFFFFF}(/parkour2){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Parkour - 2 {FFFFFF}(/parkour2){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	return 1;
}

YCMD:parkour5(playerid, params[], help) { PARKOUR5A(playerid); return 1; }
funcion PARKOUR5A(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
 	GetPlayerName(playerid, nombre,sizeof(nombre));
  	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Parkour - 5 {FFFFFF}(/parkour5){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Parkour - 5 {FFFFFF}(/parkour5){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Parkour - 5 {FFFFFF}(/parkour5){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Parkour - 5 {FFFFFF}(/parkour5){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Parkour - 5 {FFFFFF}(/parkour5){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Parkour - 5 {FFFFFF}(/parkour5){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Parkour - 5 {FFFFFF}(/parkour5){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Parkour - 5 {FFFFFF}(/parkour5){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Parkour - 5 {FFFFFF}(/parkour5){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Parkour - 5 {FFFFFF}(/parkour5){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Parkour - 5 {FFFFFF}(/parkour5){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	return 1;
}

YCMD:sls(playerid, params[], help) { SLSA(playerid); return 1; }
funcion SLSA(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
 	GetPlayerName(playerid, nombre,sizeof(nombre));
  	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Stunt Los Santos {FFFFFF}(/sls){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Stunt Los Santos {FFFFFF}(/sls){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Stunt Los Santos {FFFFFF}(/sls){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Stunt Los Santos {FFFFFF}(/sls){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Stunt Los Santos {FFFFFF}(/sls){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Stunt Los Santos {FFFFFF}(/sls){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Stunt Los Santos {FFFFFF}(/sls){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Stunt Los Santos {FFFFFF}(/sls){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Stunt Los Santos {FFFFFF}(/sls){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Stunt Los Santos {FFFFFF}(/sls){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Stunt Los Santos {FFFFFF}(/sls){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	return 1;
}

YCMD:cantera(playerid, params[], help) { CANTERAA(playerid); return 1; }
funcion CANTERAA(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
 	GetPlayerName(playerid, nombre,sizeof(nombre));
  	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Cantera {FFFFFF}(/cantera){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Cantera {FFFFFF}(/cantera){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Cantera {FFFFFF}(/cantera){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Cantera {FFFFFF}(/cantera){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Cantera {FFFFFF}(/cantera){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Cantera {FFFFFF}(/cantera){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Cantera {FFFFFF}(/cantera){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Cantera {FFFFFF}(/cantera){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Cantera {FFFFFF}(/cantera){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Cantera {FFFFFF}(/cantera){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Cantera {FFFFFF}(/cantera){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerPosExV(playerid, 611.4616,882.8682,-42.9609);
	return 1;
}

YCMD:playa(playerid, params[], help) { PLAYAA(playerid); return 1; }
funcion PLAYAA(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
 	GetPlayerName(playerid, nombre,sizeof(nombre));
  	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Playa Los Santos {FFFFFF}(/playa){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Playa Los Santos {FFFFFF}(/playa){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Playa Los Santos {FFFFFF}(/playa){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Playa Los Santos {FFFFFF}(/playa){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Playa Los Santos {FFFFFF}(/playa){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Playa Los Santos {FFFFFF}(/playa){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Playa Los Santos {FFFFFF}(/playa){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Playa Los Santos {FFFFFF}(/playa){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Playa Los Santos {FFFFFF}(/playa){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Playa Los Santos {FFFFFF}(/playa){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Playa Los Santos {FFFFFF}(/playa){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerPosExV(playerid, 263.2350,-1828.4753,3.8215);
	return 1;
}

YCMD:ministunt(playerid, params[], help) { MINISTUNTA(playerid); return 1; }
funcion MINISTUNTA(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
 	GetPlayerName(playerid, nombre,sizeof(nombre));
  	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Mini Stunt {FFFFFF}(/minis){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Mini Stunt {FFFFFF}(/minis){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Mini Stunt {FFFFFF}(/minis){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Mini Stunt {FFFFFF}(/minis){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Mini Stunt {FFFFFF}(/minis){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Mini Stunt {FFFFFF}(/minis){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Mini Stunt {FFFFFF}(/minis){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Mini Stunt {FFFFFF}(/minis){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Mini Stunt {FFFFFF}(/minis){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Mini Stunt {FFFFFF}(/minis){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Mini Stunt {FFFFFF}(/minis){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SetPlayerVirtualWorld(playerid, 0);
	return 1;
}

YCMD:xz(playerid, params[], help) { XZA(playerid); return 1; }
funcion XZA(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
 	GetPlayerName(playerid, nombre,sizeof(nombre));
  	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Salto XZ - 1 {FFFFFF}(/xz){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Salto XZ - 1 {FFFFFF}(/xz){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Salto XZ - 1 {FFFFFF}(/xz){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Salto XZ - 1 {FFFFFF}(/xz){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Salto XZ - 1 {FFFFFF}(/xz){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Salto XZ - 1 {FFFFFF}(/xz){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Salto XZ - 1 {FFFFFF}(/xz){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Salto XZ - 1 {FFFFFF}(/xz){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Salto XZ - 1 {FFFFFF}(/xz){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Salto XZ - 1 {FFFFFF}(/xz){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Salto XZ - 1 {FFFFFF}(/xz){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerPosExV(playerid, 1824.9858,-1288.0322,131.7344);
	return 1;
}

YCMD:xz2(playerid, params[], help) { XZ2A(playerid); return 1; }
funcion XZ2A(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
 	GetPlayerName(playerid, nombre,sizeof(nombre));
  	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Salto XZ - 2 {FFFFFF}(/xz2){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Salto XZ - 2 {FFFFFF}(/xz2){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Salto XZ - 2 {FFFFFF}(/xz2){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Salto XZ - 2 {FFFFFF}(/xz2){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Salto XZ - 2 {FFFFFF}(/xz2){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Salto XZ - 2 {FFFFFF}(/xz2){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Salto XZ - 2 {FFFFFF}(/xz2){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Salto XZ - 2 {FFFFFF}(/xz2){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Salto XZ - 2 {FFFFFF}(/xz2){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Salto XZ - 2 {FFFFFF}(/xz2){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Salto XZ - 2 {FFFFFF}(/xz2){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerPosExV(playerid, 1666.0364,-1242.7211,233.3750);
	return 1;
}

YCMD:xz3(playerid, params[], help) { XZ3A(playerid); return 1; }
funcion XZ3A(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
 	GetPlayerName(playerid, nombre,sizeof(nombre));
  	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Salto XZ - 3 {FFFFFF}(/xz3){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Salto XZ - 3 {FFFFFF}(/xz3){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Salto XZ - 3 {FFFFFF}(/xz3){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Salto XZ - 3 {FFFFFF}(/xz3){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Salto XZ - 3 {FFFFFF}(/xz3){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Salto XZ - 3 {FFFFFF}(/xz3){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Salto XZ - 3 {FFFFFF}(/xz3){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Salto XZ - 3 {FFFFFF}(/xz3){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Salto XZ - 3 {FFFFFF}(/xz3){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Salto XZ - 3 {FFFFFF}(/xz3){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Salto XZ - 3 {FFFFFF}(/xz3){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerPosExV(playerid, 1577.0929,-1245.1472,277.8776);
	return 1;
}

YCMD:xz4(playerid, params[], help) { XZ4A(playerid); return 1; }
funcion XZ4A(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
 	GetPlayerName(playerid, nombre,sizeof(nombre));
  	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Salto XZ - 4 {FFFFFF}(/xz4){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Salto XZ - 4 {FFFFFF}(/xz4){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Salto XZ - 4 {FFFFFF}(/xz4){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Salto XZ - 4 {FFFFFF}(/xz4){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Salto XZ - 4 {FFFFFF}(/xz4){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Salto XZ - 4 {FFFFFF}(/xz4){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Salto XZ - 4 {FFFFFF}(/xz4){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Salto XZ - 4 {FFFFFF}(/xz4){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Salto XZ - 4 {FFFFFF}(/xz4){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Salto XZ - 4 {FFFFFF}(/xz4){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Salto XZ - 4 {FFFFFF}(/xz4){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerPosExV(playerid, 2399.1707,1923.2483,76.3745);
	return 1;
}


YCMD:xz5(playerid, params[], help) { XZ5A(playerid); return 1; }
funcion XZ5A(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
 	GetPlayerName(playerid, nombre,sizeof(nombre));
  	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Salto XZ - 5 {FFFFFF}(/xz5){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Salto XZ - 5 {FFFFFF}(/xz5){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Salto XZ - 5 {FFFFFF}(/xz5){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Salto XZ - 5 {FFFFFF}(/xz5){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Salto XZ - 5 {FFFFFF}(/xz5){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Salto XZ - 5 {FFFFFF}(/xz5){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Salto XZ - 5 {FFFFFF}(/xz5){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Salto XZ - 5 {FFFFFF}(/xz5){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Salto XZ - 5 {FFFFFF}(/xz5){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Salto XZ - 5 {FFFFFF}(/xz5){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Salto XZ - 5 {FFFFFF}(/xz5){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerPosExV(playerid, 2059.4338,2430.0925,165.6172);
	return 1;

}
YCMD:xz6(playerid, params[], help) { XZ6A(playerid); return 1; }
funcion XZ6A(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
 	GetPlayerName(playerid, nombre,sizeof(nombre));
  	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Salto XZ - 6 {FFFFFF}(/xz6){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Salto XZ - 6 {FFFFFF}(/xz6){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Salto XZ - 6 {FFFFFF}(/xz6){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Salto XZ - 6 {FFFFFF}(/xz6){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Salto XZ - 6 {FFFFFF}(/xz6){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Salto XZ - 6 {FFFFFF}(/xz6){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Salto XZ - 6 {FFFFFF}(/xz6){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Salto XZ - 6 {FFFFFF}(/xz6){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Salto XZ - 6 {FFFFFF}(/xz6){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Salto XZ - 6 {FFFFFF}(/xz6){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Salto XZ - 6 {FFFFFF}(/xz6){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerPosExV(playerid, -2677.7866,1594.7925,217.2739);
	return 1;
}

YCMD:xz7(playerid, params[], help) { XZ7A(playerid); return 1; }
funcion XZ7A(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
 	GetPlayerName(playerid, nombre,sizeof(nombre));
  	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Salto XZ - 7 {FFFFFF}(/xz7){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Salto XZ - 7 {FFFFFF}(/xz7){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Salto XZ - 7 {FFFFFF}(/xz7){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Salto XZ - 7 {FFFFFF}(/xz7){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Salto XZ - 7 {FFFFFF}(/xz7){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Salto XZ - 7 {FFFFFF}(/xz7){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Salto XZ - 7 {FFFFFF}(/xz7){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Salto XZ - 7 {FFFFFF}(/xz7){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Salto XZ - 7 {FFFFFF}(/xz7){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Salto XZ - 7 {FFFFFF}(/xz7){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Salto XZ - 7 {FFFFFF}(/xz7){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerPosExV(playerid, -2503.6709,-695.5320,279.7314);
	return 1;
}

YCMD:xz8(playerid, params[], help) { XZ8A(playerid); return 1; }
funcion XZ8A(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
 	GetPlayerName(playerid, nombre,sizeof(nombre));
 	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Salto XZ - 8 {FFFFFF}(/xz8){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Salto XZ - 8 {FFFFFF}(/xz8){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Salto XZ - 8 {FFFFFF}(/xz8){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Salto XZ - 8 {FFFFFF}(/xz8){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Salto XZ - 8 {FFFFFF}(/xz8){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Salto XZ - 8 {FFFFFF}(/xz8){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Salto XZ - 8 {FFFFFF}(/xz8){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Salto XZ - 8 {FFFFFF}(/xz8){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Salto XZ - 8 {FFFFFF}(/xz8){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Salto XZ - 8 {FFFFFF}(/xz8){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Salto XZ - 8 {FFFFFF}(/xz8){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerPosExV(playerid, 286.6269,-1608.7111,114.4219);
	return 1;
}

YCMD:asf(playerid, params[], help) { ASFA(playerid); return 1; }
funcion ASFA(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
  	GetPlayerName(playerid, nombre,sizeof(nombre));
  	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Aeropuerto San Fierro {FFFFFF}(/asf){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Aeropuerto San Fierro {FFFFFF}(/asf){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Aeropuerto San Fierro {FFFFFF}(/asf){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Aeropuerto San Fierro {FFFFFF}(/asf){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Aeropuerto San Fierro {FFFFFF}(/asf){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Aeropuerto San Fierro {FFFFFF}(/asf){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Aeropuerto San Fierro {FFFFFF}(/asf){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Aeropuerto San Fierro {FFFFFF}(/asf){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Aeropuerto San Fierro {FFFFFF}(/asf){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Aeropuerto San Fierro {FFFFFF}(/asf){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Aeropuerto San Fierro {FFFFFF}(/asf){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	SetPlayerPosExV(playerid, -1225.159301, 30.931833, 21.310312);
	return 1;
}

YCMD:monte(playerid, params[], help) { MONTEA(playerid); return 1; }
funcion MONTEA(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
  	GetPlayerName(playerid, nombre,sizeof(nombre));
  	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Monte Chilliand {FFFFFF}(/monte){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Monte Chilliand {FFFFFF}(/monte){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Monte Chilliand {FFFFFF}(/monte){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Monte Chilliand {FFFFFF}(/monte){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Monte Chilliand {FFFFFF}(/monte){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Monte Chilliand {FFFFFF}(/monte){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Monte Chilliand {FFFFFF}(/monte){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Monte Chilliand {FFFFFF}(/monte){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Monte Chilliand {FFFFFF}(/monte){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Monte Chilliand {FFFFFF}(/monte){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Monte Chilliand {FFFFFF}(/monte){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	SetPlayerPosExV(playerid, -2326.668212, -1626.296752, 483.705657);
	return 1;
}

YCMD:lv(playerid, params[], help) { LVA(playerid); return 1; }
funcion LVA(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
  	GetPlayerName(playerid, nombre,sizeof(nombre));
   new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Las Venturas {FFFFFF}(/lv){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Las Venturas {FFFFFF}(/lv){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Las Venturas {FFFFFF}(/lv){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Las Venturas {FFFFFF}(/lv){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Las Venturas {FFFFFF}(/lv){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Las Venturas {FFFFFF}(/lv){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Las Venturas {FFFFFF}(/lv){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Las Venturas {FFFFFF}(/lv){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Las Venturas {FFFFFF}(/lv){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Las Venturas {FFFFFF}(/lv){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Las Venturas {FFFFFF}(/lv){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	SetPlayerPosExV(playerid, 2035.291015, 1526.176757, 10.380242);
	return 1;
}

YCMD:aa(playerid, params[], help) { AAA(playerid); return 1; }
funcion AAA(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
  	GetPlayerName(playerid, nombre,sizeof(nombre));
   	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Aeropuerto Abandonado {FFFFFF}(/aa){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Aeropuerto Abandonado {FFFFFF}(/aa){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Aeropuerto Abandonado {FFFFFF}(/aa){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Aeropuerto Abandonado {FFFFFF}(/aa){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Aeropuerto Abandonado {FFFFFF}(/aa){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Aeropuerto Abandonado {FFFFFF}(/aa){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Aeropuerto Abandonado {FFFFFF}(/aa){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Aeropuerto Abandonado {FFFFFF}(/aa){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Aeropuerto Abandonado {FFFFFF}(/aa){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Aeropuerto Abandonado {FFFFFF}(/aa){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Aeropuerto Abandonado {FFFFFF}(/aa){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	SetPlayerPosExV(playerid, 324.2039, 2544.5725, 16.8082);
	return 1;
}

YCMD:alv(playerid, params[], help) { ALVA(playerid); return 1; }
funcion ALVA(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
  	GetPlayerName(playerid, nombre,sizeof(nombre));
   	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Aeropuerto Las Venturas {FFFFFF}(/alv){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Aeropuerto Las Venturas {FFFFFF}(/alv){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Aeropuerto Las Venturas {FFFFFF}(/alv){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Aeropuerto Las Venturas {FFFFFF}(/alv){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Aeropuerto Las Venturas {FFFFFF}(/alv){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Aeropuerto Las Venturas {FFFFFF}(/alv){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Aeropuerto Las Venturas {FFFFFF}(/alv){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Aeropuerto Las Venturas {FFFFFF}(/alv){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Aeropuerto Las Venturas {FFFFFF}(/alv){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Aeropuerto Las Venturas {FFFFFF}(/alv){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Aeropuerto Las Venturas {FFFFFF}(/alv){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	SetPlayerPosExV(playerid, 1319.983520, 1290.765258, 10.380865);
	return 1;
}

YCMD:stunt4(playerid, params[], help) { STUNT4A(playerid); return 1; }
funcion STUNT4A(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
  	GetPlayerName(playerid, nombre,sizeof(nombre));
   	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Zona Stunt 4 {FFFFFF}(/stunt4){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Zona Stunt 4 {FFFFFF}(/stunt4){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Zona Stunt 4 {FFFFFF}(/stunt4){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Zona Stunt 4 {FFFFFF}(/stunt4){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Zona Stunt 4 {FFFFFF}(/stunt4){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Zona Stunt 4 {FFFFFF}(/stunt4){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Zona Stunt 4 {FFFFFF}(/stunt4){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Zona Stunt 4 {FFFFFF}(/stunt4){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Zona Stunt 4 {FFFFFF}(/stunt4){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Zona Stunt 4 {FFFFFF}(/stunt4){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Zona Stunt 4 {FFFFFF}(/stunt4){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	SetPlayerPosExV(playerid, 1606.332397, 2247.553466, 86.432029);
	return 1;
}

YCMD:underwater(playerid, params[], help) { UNDERWATERA(playerid); return 1; }
funcion UNDERWATERA(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Estás encarcelado, no puedes utilizar comandos.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
  	GetPlayerName(playerid, nombre,sizeof(nombre));
   new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Under Water {FFFFFF}(/underwater){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Under Water {FFFFFF}(/underwater){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Under Water {FFFFFF}(/underwater){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Under Water {FFFFFF}(/underwater){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Under Water {FFFFFF}(/underwater){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Under Water {FFFFFF}(/underwater){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Under Water {FFFFFF}(/underwater){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Under Water {FFFFFF}(/underwater){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Under Water {FFFFFF}(/underwater){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Under Water {FFFFFF}(/underwater){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Under Water {FFFFFF}(/underwater){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	SetPlayerPosExV(playerid, 1469.887695, 2922.575195, -27.469688);
	return 1;
}

YCMD:presastunt(playerid, params[], help) { PRESASTUNTA(playerid); return 1; }
funcion PRESASTUNTA(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
  	GetPlayerName(playerid, nombre,sizeof(nombre));
   	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Presa Stunt {FFFFFF}(/ps){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Presa Stunt {FFFFFF}(/ps){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Presa Stunt {FFFFFF}(/ps){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Presa Stunt {FFFFFF}(/ps){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Presa Stunt {FFFFFF}(/ps){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Presa Stunt {FFFFFF}(/ps){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Presa Stunt {FFFFFF}(/ps){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Presa Stunt {FFFFFF}(/ps){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Presa Stunt {FFFFFF}(/ps){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Presa Stunt {FFFFFF}(/ps){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Presa Stunt {FFFFFF}(/ps){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
 	SetPlayerPosExV(playerid, -711.3663,1776.0450,16.4800);
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	SetPlayerPosExV(playerid, -669.118957, 2306.079589, 135.600219);
	return 1;
}

YCMD:area51(playerid, params[], help) { AREA51A(playerid); return 1; }
funcion AREA51A(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
  	GetPlayerName(playerid, nombre,sizeof(nombre));
    new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Area 51 {FFFFFF}(/area51){00FF8E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Area 51 {FFFFFF}(/area51){B2FF20}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Area 51 {FFFFFF}(/area51){FFD446}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Area 51 {FFFFFF}(/area51){FF738E}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Area 51 {FFFFFF}(/area51){9798FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Area 51 {FFFFFF}(/area51){4898FF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Area 51 {FFFFFF}(/area51){48FFFF}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Area 51 {FFFFFF}(/area51){07BA6D}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Area 51 {FFFFFF}(/area51){C10053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Area 51 {FFFFFF}(/area51){FF0053}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Area 51 {FFFFFF}(/area51){DEFF4F}!", nombre);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	SetPlayerPosExV(playerid, 355.942291, 2027.881225, 23.784393);
	return 1;
}

//MINIJUEGOS
YCMD:salir(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
    SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
    return 1;}
    if(EstaDM[playerid] == 0){
    SendClientMessage(playerid, Rojo,"No te encuentras en una zona deathmatch.");
    return 1;}
    if(NoEnRace[playerid] == 1){
    SendClientMessage(playerid, Rojo,"No estás en una carrera para salir.");
    return 1;}
    if(EnGameJuego[playerid] == 1){
    SalirDM(playerid);
    JugadoresCantidadMinijuegos[0] -= 1;
    return 1;}
    if(EnGameJuego[playerid] == 2){
    SalirDM(playerid);
    JugadoresCantidadMinijuegos[1] -= 1;
    return 1;}
    if(EnGameJuego[playerid] == 3){
    SalirDM(playerid);
    JugadoresCantidadMinijuegos[2] -= 1;
    return 1;}
    if(EnGameJuego[playerid] == 4){
    SalirDM(playerid);
    JugadoresCantidadMinijuegos[3] -= 1;
    return 1;}
    if(EnGameJuego[playerid] == 5){
    SalirDM(playerid);
    JugadoresCantidadMinijuegos[4] -= 1;
    return 1;}
    if(EnGameJuego[playerid] == 6){
    SalirDM(playerid);
    JugadoresCantidadMinijuegos[5] -= 1;
    return 1;}
    if(EnGameJuego[playerid] == 7){
    SalirDM(playerid);
    JugadoresCantidadMinijuegos[6] -= 1;
    return 1;}
    if(EnGameJuego[playerid] == 8){
    SalirDM(playerid);
    JugadoresCantidadMinijuegos[7] -= 1;
    return 1;}
    if(EnGameJuego[playerid] == 9){
    SalirDM(playerid);
    JugadoresCantidadMinijuegos[8] -= 1;
    DarAntiSpawnKill[playerid] = false;
    return 1;}
    if(EnGameJuego[playerid] == 10){
    SalirDM(playerid);
    JugadoresCantidadMinijuegos[9] -= 1;
    DarAntiSpawnKill[playerid] = false;
    return 1;}
    if(EnGameJuego[playerid] == 11){
    SalirDM(playerid);
    JugadoresCantidadMinijuegos[10] -= 1;
    DarAntiSpawnKill[playerid] = false;
    return 1;}
    if(EnGameJuego[playerid] == 12){
    SalirDM(playerid);
    JugadoresCantidadMinijuegos[11] -= 1;
    DarAntiSpawnKill[playerid] = false;
    return 1;}
    if(EnGameJuego[playerid] == 13){
    SalirDM(playerid);
    JugadoresCantidadMinijuegos[12] -= 1;
    DarAntiSpawnKill[playerid] = false;
    return 1;}
    if(EnGameJuego[playerid] == 14){
    SalirDM(playerid);
    JugadoresCantidadMinijuegos[13] -= 1;
    DarAntiSpawnKill[playerid] = false;
    return 1;}
    if(EnGameJuego[playerid] == 15){
    SalirDM(playerid);
    JugadoresCantidadMinijuegos[14] -= 1;
    DarAntiSpawnKill[playerid] = false;
    return 1;}
    if(EnGameJuego[playerid] == 16){
    SalirDM(playerid);
    JugadoresCantidadMinijuegos[15] -= 1;
    DarAntiSpawnKill[playerid] = false;
    return 1;}
    if(JugadorEnDMM[playerid] == true)
    {
        ResetearVariablesM(playerid);
		SpawnPlayer(playerid);
        if(JugadoresDentro >= JugadoresNecesariosDM)
		{
		    StopMapa();
  		}
	}
	return 1;
}

funcion SalirDM(playerid)
{
	ResetPlayerWeapons(playerid);
    SpawnPlayer(playerid);
	SetPlayerInterior(playerid, 0);
	EstaDM[playerid] = 0;
	EnGameJuego[playerid] = 0;
	GameTextForPlayer(playerid, "~n~~n~~r~~h~~h~^has salido dm!", 8000, 4);
    SetPlayerVirtualWorld(playerid, 0);
    DarAntiSpawnKill[playerid] = false;
    return 1;
}

YCMD:pb(playerid, params[], help) { PBA(playerid); return 1; }
funcion PBA(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(JugadorSpawnKill[playerid] == 1) return SendClientMessage(playerid, -1, "{FFFF00}Espera los 15 segundos de la protección AntiSpawn-Kill para poder transportarte a un juego.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~w~"a_xa"mini-juego ~n~~r~~h~ paintball~w~!", 8000, 5);
	new rand = random(sizeof(M1));
	SetPlayerInterior(playerid, 1);
	SetPlayerVirtualWorld(playerid, 90);
	ResetPlayerWeapons(playerid);
	SetPlayerHealth(playerid, 15.0);
	SetPlayerArmour(playerid, 0.0);
	EstaDM[playerid] = 1;
	EnGameJuego[playerid] = 7;
 	JugadoresCantidadMinijuegos[6] += 1;
	DarAntiSpawnKill[playerid] = true;
	GivePlayerWeapon(playerid, 24, 1500);
	GivePlayerWeapon(playerid, 25, 1500);
	GivePlayerWeapon(playerid, 34, 1500);
	GivePlayerWeapon(playerid, 31, 1500);
	SetPlayerPosEx(playerid, PBSpawnsRand[rand][0], PBSpawnsRand[rand][1], PBSpawnsRand[rand][2], PBSpawnsRand[rand][3], 10, 0);
 	new name[MAX_PLAYER_NAME];
  	GetPlayerName(playerid, name,sizeof(name));
   	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Minijuego - PaintBall{FFFFFF} (/pb){00FF8E} {FFFFFF}%d{00FF8E})!", name, JugadoresCantidadMinijuegos[6]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Minijuego - PaintBall {FFFFFF}(/pb){B2FF20} {FFFFFF}%d{B2FF20})!", name, JugadoresCantidadMinijuegos[6]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Minijuego - PaintBall{FFFFFF} (/pb){FFD446} (Jugadores: {FFFFFF}%d{FFD446})!", name, JugadoresCantidadMinijuegos[6]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Minijuego - PaintBall{FFFFFF} (/pb){FF738E} (Jugadores: {FFFFFF}%d{FF738E})!", name, JugadoresCantidadMinijuegos[6]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Minijuego - PaintBall{FFFFFF} (/pb){9798FF} (Jugadores: {FFFFFF}%d{9798FF})!", name, JugadoresCantidadMinijuegos[6]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Minijuego - PaintBall{FFFFFF} (/pb){4898FF} (Jugadores: {FFFFFF}%d{4898FF})!", name, JugadoresCantidadMinijuegos[6]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Minijuego - PaintBall{FFFFFF} (/pb){48FFFF} (Jugadores: {FFFFFF}%d{48FFFF})!", name, JugadoresCantidadMinijuegos[6]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Minijuego - PaintBall{FFFFFF} (/pb){07BA6D} (Jugadores: {FFFFFF}%d{07BA6D})!", name, JugadoresCantidadMinijuegos[6]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Minijuego - PaintBall{FFFFFF} (/pb){C10053} (Jugadores: {FFFFFF}%d{C10053})!", name, JugadoresCantidadMinijuegos[6]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Minijuego - PaintBall{FFFFFF} (/pb){FF0053} (Jugadores: {FFFFFF}%d{FF0053})!", name, JugadoresCantidadMinijuegos[6]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Minijuego - PaintBall{FFFFFF} (/pb){DEFF4F} (Jugadores: {FFFFFF}%d{DEFF4F})!", name, JugadoresCantidadMinijuegos[6]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SendClientMessage(playerid, -1, "{FFFF00}* Has entrado a un Minijuego, usa: /salir cuando desees salir!");
	return 1;
}

YCMD:minigun(playerid, params[], help) { MINIGUNA(playerid); return 1; }
funcion MINIGUNA(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(JugadorSpawnKill[playerid] == 1) return SendClientMessage(playerid, -1, "{FFFF00}Espera los 15 segundos de la protección AntiSpawn-Kill para poder transportarte a un juego.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~w~"a_xa"mini-juego ~n~~r~~h~ minigun~w~!", 8000, 5);
	new rand = random(sizeof(M1));
	SetPlayerInterior(playerid, 1);
	SetPlayerVirtualWorld(playerid, 90);
	DarAntiSpawnKill[playerid] = true;
	ResetPlayerWeapons(playerid);
	EstaDM[playerid] = 1;
	EnGameJuego[playerid] = 1;
	GivePlayerWeapon(playerid, 38, 1500);
	SetPlayerPos(playerid, M1[rand][0], M1[rand][1], M1[rand][2]);
 	new name[MAX_PLAYER_NAME];
 	JugadoresCantidadMinijuegos[0] += 1;
  	GetPlayerName(playerid, name,sizeof(name));
   	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Minijuego - Minigun {FFFFFF}(/minigun){00FF8E}!(Jugadores: {FFFFFF}%d{00FF8E}).", name, JugadoresCantidadMinijuegos[0]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Minijuego - Minigun {FFFFFF}(/minigun){B2FF20}!(Jugadores: {FFFFFF}%d{B2FF20}).", name, JugadoresCantidadMinijuegos[0]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Minijuego - Minigun {FFFFFF}(/minigun){FFD446}!(Jugadores: {FFFFFF}%d{FFD446}).", name, JugadoresCantidadMinijuegos[0]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Minijuego - Minigun {FFFFFF}(/minigun){FF738E}!(Jugadores: {FFFFFF}%d{FF738E}).", name, JugadoresCantidadMinijuegos[0]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Minijuego - Minigun {FFFFFF}(/minigun){9798FF}!(Jugadores: {FFFFFF}%d{9798FF}).", name, JugadoresCantidadMinijuegos[0]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Minijuego - Minigun {FFFFFF}(/minigun){4898FF}!(Jugadores: {FFFFFF}%d{4898FF}).", name, JugadoresCantidadMinijuegos[0]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Minijuego - Minigun {FFFFFF}(/minigun){48FFFF}!(Jugadores: {FFFFFF}%d{48FFFF}).", name, JugadoresCantidadMinijuegos[0]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Minijuego - Minigun {FFFFFF}(/minigun){07BA6D}!(Jugadores: {FFFFFF}%d{07BA6D}).", name, JugadoresCantidadMinijuegos[0]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Minijuego - Minigun {FFFFFF}(/minigun){C10053}!(Jugadores: {FFFFFF}%d{C10053}).", name, JugadoresCantidadMinijuegos[0]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Minijuego - Minigun {FFFFFF}(/minigun){FF0053}!(Jugadores: {FFFFFF}%d{FF0053}).", name, JugadoresCantidadMinijuegos[0]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Minijuego - Minigun {FFFFFF}(/minigun){DEFF4F}!(Jugadores: {FFFFFF}%d{DEFF4F}).", name, JugadoresCantidadMinijuegos[0]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SendClientMessage(playerid, -1, "{FFFF00}* Has entrado a un Minijuego, usa: /salir cuando desees salir!");
	return 1;
}

YCMD:minigun2(playerid, params[], help) { MINIGUN2A(playerid); return 1; }
funcion MINIGUN2A(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(JugadorSpawnKill[playerid] == 1) return SendClientMessage(playerid, -1, "{FFFF00}Espera los 15 segundos de la protección AntiSpawn-Kill para poder transportarte a un juego.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~w~"a_xa"mini-juego ~n~~r~~h~ minigun 2~w~!", 8000, 5);
	new rand = random(sizeof(M2));
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 92);
	ResetPlayerWeapons(playerid);
	EstaDM[playerid] = 1;
	EnGameJuego[playerid] = 2;
	GivePlayerWeapon(playerid, 38, 1500);
	SetPlayerPos(playerid, M2[rand][0], M2[rand][1], M2[rand][2]);
 	new name[MAX_PLAYER_NAME];
 	JugadoresCantidadMinijuegos[1] += 1;
 	DarAntiSpawnKill[playerid] = true;
  	GetPlayerName(playerid, name,sizeof(name));
   	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Minijuego - Minigun 2{FFFFFF}(/minigun2){00FF8E}!(Jugadores: {FFFFFF}%d{00FF8E}).", name, JugadoresCantidadMinijuegos[1]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Minijuego - Minigun 2{FFFFFF}(/minigun2){B2FF20}!(Jugadores: {FFFFFF}%d{00FF8E}).", name, JugadoresCantidadMinijuegos[1]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Minijuego - Minigun 2{FFFFFF}(/minigun2){FFD446}!(Jugadores: {FFFFFF}%d{00FF8E}).", name, JugadoresCantidadMinijuegos[1]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Minijuego - Minigun 2{FFFFFF}(/minigun2){FF738E}!(Jugadores: {FFFFFF}%d{00FF8E}).", name, JugadoresCantidadMinijuegos[1]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Minijuego - Minigun 2{FFFFFF}(/minigun2){9798FF}!(Jugadores: {FFFFFF}%d{00FF8E}).", name, JugadoresCantidadMinijuegos[1]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Minijuego - Minigun 2{FFFFFF}(/minigun2){4898FF}!(Jugadores: {FFFFFF}%d{00FF8E}).", name, JugadoresCantidadMinijuegos[1]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Minijuego - Minigun 2{FFFFFF}(/minigun2){48FFFF}!(Jugadores: {FFFFFF}%d{00FF8E}).", name, JugadoresCantidadMinijuegos[1]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Minijuego - Minigun 2{FFFFFF}(/minigun2){07BA6D}!(Jugadores: {FFFFFF}%d{00FF8E}).", name, JugadoresCantidadMinijuegos[1]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Minijuego - Minigun 2{FFFFFF}(/minigun2){C10053}!(Jugadores: {FFFFFF}%d{00FF8E}).", name, JugadoresCantidadMinijuegos[1]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Minijuego - Minigun 2{FFFFFF}(/minigun2){FF0053}!(Jugadores: {FFFFFF}%d{00FF8E}).", name, JugadoresCantidadMinijuegos[1]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Minijuego - Minigun 2{FFFFFF}(/minigun2){DEFF4F}!(Jugadores: {FFFFFF}%d{00FF8E}).", name, JugadoresCantidadMinijuegos[1]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SendClientMessage(playerid, -1, "{FFFF00}* Has entrado a un Minijuego, usa: /salir cuando desees salir!");
	return 1;
}

YCMD:minigun3(playerid, params[], help) { MINIGUN3A(playerid); return 1; }
funcion MINIGUN3A(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(JugadorSpawnKill[playerid] == 1) return SendClientMessage(playerid, -1, "{FFFF00}Espera los 15 segundos de la protección AntiSpawn-Kill para poder transportarte a un juego.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~w~"a_xa"mini-juego ~n~~r~~h~ minigun 3~w~!", 8000, 5);
	new rand = random(sizeof(RW2));
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 93);
	ResetPlayerWeapons(playerid);
	EstaDM[playerid] = 1;
	EnGameJuego[playerid] = 3;
	GivePlayerWeapon(playerid, 38, 1500);
	SetPlayerPos(playerid, RW2[rand][0], RW2[rand][1], RW2[rand][2]);
 	new name[MAX_PLAYER_NAME];
 	DarAntiSpawnKill[playerid] = true;
 	JugadoresCantidadMinijuegos[2] += 1;
  	GetPlayerName(playerid, name,sizeof(name));
   	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Minijuego - Minigun 3{FFFFFF}(/minigun3){00FF8E}!(Jugadores: {FFFFFF}%d{00FF8E}).", name, JugadoresCantidadMinijuegos[2]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Minijuego - Minigun 3{FFFFFF}(/minigun3){B2FF20}!(Jugadores: {FFFFFF}%d{B2FF20}).", name, JugadoresCantidadMinijuegos[2]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Minijuego - Minigun 3{FFFFFF}(/minigun3){FFD446}!(Jugadores: {FFFFFF}%d{FFD446}).", name, JugadoresCantidadMinijuegos[2]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Minijuego - Minigun 3{FFFFFF}(/minigun3){FF738E}!(Jugadores: {FFFFFF}%d{FF738E}).", name, JugadoresCantidadMinijuegos[2]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Minijuego - Minigun 3{FFFFFF}(/minigun3){9798FF}!(Jugadores: {FFFFFF}%d{9798FF}).", name, JugadoresCantidadMinijuegos[2]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Minijuego - Minigun 3{FFFFFF}(/minigun3){4898FF}!(Jugadores: {FFFFFF}%d{4898FF}).", name, JugadoresCantidadMinijuegos[2]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Minijuego - Minigun 3{FFFFFF}(/minigun3){48FFFF}!(Jugadores: {FFFFFF}%d{48FFFF}).", name, JugadoresCantidadMinijuegos[2]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Minijuego - Minigun 3{FFFFFF}(/minigun3){07BA6D}!(Jugadores: {FFFFFF}%d{07BA6D}).", name, JugadoresCantidadMinijuegos[2]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Minijuego - Minigun 3{FFFFFF}(/minigun3){C10053}!(Jugadores: {FFFFFF}%d{C10053}).", name, JugadoresCantidadMinijuegos[2]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Minijuego - Minigun 3{FFFFFF}(/minigun3){FF0053}!(Jugadores: {FFFFFF}%d{FF0053}).", name, JugadoresCantidadMinijuegos[2]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Minijuego - Minigun 3{FFFFFF}(/minigun3){DEFF4F}!(Jugadores: {FFFFFF}%d{DEFF4F}).", name, JugadoresCantidadMinijuegos[2]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SendClientMessage(playerid, -1, "{FFFF00}* Has entrado a un Minijuego, usa: /salir cuando desees salir!");
	return 1;
}

YCMD:sniper(playerid, params[], help) { SNIPERA(playerid); return 1; }
funcion SNIPERA(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(JugadorSpawnKill[playerid] == 1) return SendClientMessage(playerid, -1, "{FFFF00}Espera los 15 segundos de la protección AntiSpawn-Kill para poder transportarte a un juego.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~w~"a_xa"mini-juego ~n~~r~~h~ sniper~w~!", 8000, 5);
	new rand = random(sizeof(SNP));
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 94);
	ResetPlayerWeapons(playerid);
	EstaDM[playerid] = 1;
	EnGameJuego[playerid] = 4;
	DarAntiSpawnKill[playerid] = true;
	GivePlayerWeapon(playerid, 34, 1500);
	SetPlayerPos(playerid, SNP[rand][0], SNP[rand][1], SNP[rand][2]);
 	new name[MAX_PLAYER_NAME];
 	JugadoresCantidadMinijuegos[3] += 1;
  	GetPlayerName(playerid, name,sizeof(name));
   	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Minijuego - Sniper{FFFFFF}(/sniper){00FF8E}!(Jugadores: {FFFFFF}%d{00FF8E}).", name, JugadoresCantidadMinijuegos[3]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Minijuego - Sniper{FFFFFF}(/sniper){B2FF20}!(Jugadores: {FFFFFF}%d{B2FF20}).", name, JugadoresCantidadMinijuegos[3]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Minijuego - Sniper{FFFFFF}(/sniper){FFD446}!(Jugadores: {FFFFFF}%d{FFD446}).", name, JugadoresCantidadMinijuegos[3]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Minijuego - Sniper{FFFFFF}(/sniper){FF738E}!(Jugadores: {FFFFFF}%d{FF738E}).", name, JugadoresCantidadMinijuegos[3]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Minijuego - Sniper{FFFFFF}(/sniper){9798FF}!(Jugadores: {FFFFFF}%d{9798FF}).", name, JugadoresCantidadMinijuegos[3]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Minijuego - Sniper{FFFFFF}(/sniper){4898FF}!(Jugadores: {FFFFFF}%d{4898FF}).", name, JugadoresCantidadMinijuegos[3]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Minijuego - Sniper{FFFFFF}(/sniper){48FFFF}!(Jugadores: {FFFFFF}%d{48FFFF}).", name, JugadoresCantidadMinijuegos[3]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Minijuego - Sniper{FFFFFF}(/sniper){07BA6D}!(Jugadores: {FFFFFF}%d{07BA6D}).", name, JugadoresCantidadMinijuegos[3]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Minijuego - Sniper{FFFFFF}(/sniper){C10053}!(Jugadores: {FFFFFF}%d{C10053}).", name, JugadoresCantidadMinijuegos[3]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Minijuego - Sniper{FFFFFF}(/sniper){FF0053}!(Jugadores: {FFFFFF}%d{FF0053}).", name, JugadoresCantidadMinijuegos[3]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Minijuego - Sniper{FFFFFF}(/sniper){DEFF4F}!(Jugadores: {FFFFFF}%d{DEFF4F}).", name, JugadoresCantidadMinijuegos[3]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SendClientMessage(playerid, -1, "{FFFF00}* Has entrado a un Minijuego, usa: /salir cuando desees salir!");
	return 1;
}

YCMD:ms(playerid, params[], help) { MSA(playerid); return 1; }
funcion MSA(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(JugadorSpawnKill[playerid] == 1) return SendClientMessage(playerid, -1, "{FFFF00}Espera los 15 segundos de la protección AntiSpawn-Kill para poder transportarte a un juego.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~w~"a_xa"mini-juego ~n~~r~~h~ motosierra~w~!", 8000, 5);
	new rand = random(sizeof(MS1));
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 96);
	ResetPlayerWeapons(playerid);
	EstaDM[playerid] = 1;
	EnGameJuego[playerid] = 5;
	DarAntiSpawnKill[playerid] = true;
	GivePlayerWeapon(playerid, 9, 1);
	SetPlayerPos(playerid, MS1[rand][0], MS1[rand][1], MS1[rand][2]);
 	new name[MAX_PLAYER_NAME];
 	JugadoresCantidadMinijuegos[4] += 1;
  	GetPlayerName(playerid, name,sizeof(name));
   	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Minijuego - MotoSierra{FFFFFF}(/ms){00FF8E}!(Jugadores: {FFFFFF}%d{00FF8E}).", name, JugadoresCantidadMinijuegos[4]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Minijuego - MotoSierra{FFFFFF}(/ms){B2FF20}!(Jugadores: {FFFFFF}%d{B2FF20}).", name, JugadoresCantidadMinijuegos[4]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Minijuego - MotoSierra{FFFFFF}(/ms){FFD446}!(Jugadores: {FFFFFF}%d{FFD446}).", name, JugadoresCantidadMinijuegos[4]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Minijuego - MotoSierra{FFFFFF}(/ms){FF738E}!(Jugadores: {FFFFFF}%d{FF738E}).", name, JugadoresCantidadMinijuegos[4]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Minijuego - MotoSierra{FFFFFF}(/ms){9798FF}!(Jugadores: {FFFFFF}%d{9798FF}).", name, JugadoresCantidadMinijuegos[4]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Minijuego - MotoSierra{FFFFFF}(/ms){4898FF}!(Jugadores: {FFFFFF}%d{4898FF}).", name, JugadoresCantidadMinijuegos[4]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Minijuego - MotoSierra{FFFFFF}(/ms){48FFFF}!(Jugadores: {FFFFFF}%d{48FFFF}).", name, JugadoresCantidadMinijuegos[4]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Minijuego - MotoSierra{FFFFFF}(/ms){07BA6D}!(Jugadores: {FFFFFF}%d{07BA6D}).", name, JugadoresCantidadMinijuegos[4]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Minijuego - MotoSierra{FFFFFF}(/ms){C10053}!(Jugadores: {FFFFFF}%d{C10053}).", name, JugadoresCantidadMinijuegos[4]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Minijuego - MotoSierra{FFFFFF}(/ms){FF0053}!(Jugadores: {FFFFFF}%d{FF0053}).", name, JugadoresCantidadMinijuegos[4]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Minijuego - MotoSierra{FFFFFF}(/ms){DEFF4F}!(Jugadores: {FFFFFF}%d{DEFF4F}).", name, JugadoresCantidadMinijuegos[4]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SendClientMessage(playerid, -1, "{FFFF00}* Has entrado a un Minijuego, usa: /salir cuando desees salir!");
	return 1;
}

YCMD:rocket(playerid, params[], help) { ROCKETA(playerid); return 1; }
funcion ROCKETA(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(JugadorSpawnKill[playerid] == 1) return SendClientMessage(playerid, -1, "{FFFF00}Espera los 15 segundos de la protección AntiSpawn-Kill para poder transportarte a un juego.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~w~"a_xa"mini-juego ~n~~r~~h~ Rocket~w~!", 8000, 5);
	new rand = random(sizeof(RC2));
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 97);
	ResetPlayerWeapons(playerid);
	EstaDM[playerid] = 1;
	EnGameJuego[playerid] = 6;
	DarAntiSpawnKill[playerid] = true;
	GivePlayerWeapon(playerid, 36, 9999);
	SetPlayerPos(playerid, RC2[rand][0], RC2[rand][1], RC2[rand][2]);
 	new name[MAX_PLAYER_NAME];
 	JugadoresCantidadMinijuegos[5] += 1;
  	GetPlayerName(playerid, name,sizeof(name));
   	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Minijuego - Rocket{FFFFFF}(/rocket){00FF8E}!(Jugadores: {FFFFFF}%d{00FF8E}).", name, JugadoresCantidadMinijuegos[5]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Minijuego - Rocket{FFFFFF}(/rocket){B2FF20}!(Jugadores: {FFFFFF}%d{B2FF20}).", name, JugadoresCantidadMinijuegos[5]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Minijuego - Rocket{FFFFFF}(/rocket){FFD446}!(Jugadores: {FFFFFF}%d{FFD446}).", name, JugadoresCantidadMinijuegos[5]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Minijuego - Rocket{FFFFFF}(/rocket){FF738E}!(Jugadores: {FFFFFF}%d{FF738E}).", name, JugadoresCantidadMinijuegos[5]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Minijuego - Rocket{FFFFFF}(/rocket){9798FF}!(Jugadores: {FFFFFF}%d{9798FF}).", name, JugadoresCantidadMinijuegos[5]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Minijuego - Rocket{FFFFFF}(/rocket){4898FF}!(Jugadores: {FFFFFF}%d{4898FF}).", name, JugadoresCantidadMinijuegos[5]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Minijuego - Rocket{FFFFFF}(/rocket){48FFFF}!(Jugadores: {FFFFFF}%d{48FFFF}).", name, JugadoresCantidadMinijuegos[5]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Minijuego - Rocket{FFFFFF}(/rocket){07BA6D}!(Jugadores: {FFFFFF}%d{07BA6D}).", name, JugadoresCantidadMinijuegos[5]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Minijuego - Rocket{FFFFFF}(/rocket){C10053}!(Jugadores: {FFFFFF}%d{C10053}).", name, JugadoresCantidadMinijuegos[5]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Minijuego - Rocket{FFFFFF}(/rocket){FF0053}!(Jugadores: {FFFFFF}%d{FF0053}).", name, JugadoresCantidadMinijuegos[5]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Minijuego - Rocket{FFFFFF}(/rocket){DEFF4F}!(Jugadores: {FFFFFF}%d{DEFF4F}).", name, JugadoresCantidadMinijuegos[5]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SendClientMessage(playerid, -1, "{FFFF00}* Has entrado a un Minijuego, usa: /salir cuando desees salir!");
	return 1;
}

YCMD:zonadm(playerid, params[], help) { zonadmA(playerid); return 1; }
funcion zonadmA(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(JugadorSpawnKill[playerid] == 1) return SendClientMessage(playerid, -1, "{FFFF00}Espera los 15 segundos de la protección AntiSpawn-Kill para poder transportarte a un juego.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~w~"a_xa"mini-juego ~n~~r~~h~ Zona DM~w~!", 8000, 5);
	new rand = random(sizeof(ZDM1));
	ResetPlayerWeapons(playerid);
	SetPlayerHealth(playerid, 99.0);
	SetPlayerArmour(playerid, 99.0);
	EstaDM[playerid] = 1;
	EnGameJuego[playerid] = 10;
	DarAntiSpawnKill[playerid] = true;
	GivePlayerWeapon(playerid, 24, 1500);
	GivePlayerWeapon(playerid, 25, 1500);
	GivePlayerWeapon(playerid, 34, 1500);
	GivePlayerWeapon(playerid, 31, 1500);
	SetPlayerPosEx(playerid, ZDM1[rand][0], ZDM1[rand][1], ZDM1[rand][2], ZDM1[rand][3], 1, 94);
 	new name[MAX_PLAYER_NAME];
 	JugadoresCantidadMinijuegos[9] += 1;
  	GetPlayerName(playerid, name,sizeof(name));
   	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Minijuego - Zona DM{FFFFFF} (/zonadm){00FF8E} (Jugadores: {FFFFFF}%d{00FF8E})!", name, JugadoresCantidadMinijuegos[9]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Minijuego - Zona DM {FFFFFF}(/zonadm){B2FF20} {FFFFFF}%d{B2FF20})!", name, JugadoresCantidadMinijuegos[9]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Minijuego - Zona DM{FFFFFF} (/zonadm){FFD446} (Jugadores: {FFFFFF}%d{FFD446})!", name, JugadoresCantidadMinijuegos[9]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Minijuego - Zona DM{FFFFFF} (/zonadm){FF738E} (Jugadores: {FFFFFF}%d{FF738E})!", name, JugadoresCantidadMinijuegos[9]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Minijuego - Zona DM{FFFFFF} (/zonadm){9798FF} (Jugadores: {FFFFFF}%d{9798FF})!", name, JugadoresCantidadMinijuegos[9]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Minijuego - Zona DM{FFFFFF} (/zonadm){4898FF} (Jugadores: {FFFFFF}%d{4898FF})!", name, JugadoresCantidadMinijuegos[9]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Minijuego - Zona DM{FFFFFF} (/zonadm){48FFFF} (Jugadores: {FFFFFF}%d{48FFFF})!", name, JugadoresCantidadMinijuegos[9]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Minijuego - Zona DM{FFFFFF} (/zonadm){07BA6D} (Jugadores: {FFFFFF}%d{07BA6D})!", name, JugadoresCantidadMinijuegos[9]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Minijuego - Zona DM{FFFFFF} (/zonadm){C10053} (Jugadores: {FFFFFF}%d{C10053})!", name, JugadoresCantidadMinijuegos[9]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Minijuego - Zona DM{FFFFFF} (/zonadm){FF0053} (Jugadores: {FFFFFF}%d{FF0053})!", name, JugadoresCantidadMinijuegos[9]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Minijuego - Zona DM{FFFFFF} (/zonadm){DEFF4F} (Jugadores: {FFFFFF}%d{DEFF4F})!", name, JugadoresCantidadMinijuegos[9]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SendClientMessage(playerid, -1, "{FFFF00}* Has entrado a un Minijuego, usa: /salir cuando desees salir!");
	return 1;
}

YCMD:zonadm2(playerid, params[], help) { zonadm2A(playerid); return 1; }
funcion zonadm2A(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(JugadorSpawnKill[playerid] == 1) return SendClientMessage(playerid, -1, "{FFFF00}Espera los 15 segundos de la protección AntiSpawn-Kill para poder transportarte a un juego.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~w~"a_xa"mini-juego ~n~~r~~h~ Zona DM2~w~!", 8000, 5);
	new rand = random(sizeof(ZDM2));
	ResetPlayerWeapons(playerid);
	SetPlayerHealth(playerid, 99.0);
	SetPlayerArmour(playerid, 99.0);
	EstaDM[playerid] = 1;
	EnGameJuego[playerid] = 11;
	DarAntiSpawnKill[playerid] = true;
	GivePlayerWeapon(playerid, 24, 1500);
	GivePlayerWeapon(playerid, 25, 1500);
	GivePlayerWeapon(playerid, 34, 1500);
	GivePlayerWeapon(playerid, 31, 1500);
	SetPlayerPosEx(playerid, ZDM2[rand][0], ZDM2[rand][1], ZDM2[rand][2], ZDM2[rand][3], 18, 96);
 	new name[MAX_PLAYER_NAME];
 	JugadoresCantidadMinijuegos[10] += 1;
  	GetPlayerName(playerid, name,sizeof(name));
   	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Minijuego - Zona DM2{FFFFFF} (/zonadm2){00FF8E} (Jugadores: {FFFFFF}%d{00FF8E})!", name, JugadoresCantidadMinijuegos[10]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Minijuego - Zona DM2 {FFFFFF}(/zonadm2){B2FF20} {FFFFFF}%d{B2FF20})!", name, JugadoresCantidadMinijuegos[10]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Minijuego - Zona DM2{FFFFFF} (/zonadm2){FFD446} (Jugadores: {FFFFFF}%d{FFD446})!", name, JugadoresCantidadMinijuegos[10]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Minijuego - Zona DM2{FFFFFF} (/zonadm2){FF738E} (Jugadores: {FFFFFF}%d{FF738E})!", name, JugadoresCantidadMinijuegos[10]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Minijuego - Zona DM2{FFFFFF} (/zonadm2){9798FF} (Jugadores: {FFFFFF}%d{9798FF})!", name, JugadoresCantidadMinijuegos[10]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Minijuego - Zona DM2{FFFFFF} (/zonadm2){4898FF} (Jugadores: {FFFFFF}%d{4898FF})!", name, JugadoresCantidadMinijuegos[10]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Minijuego - Zona DM2{FFFFFF} (/zonadm2){48FFFF} (Jugadores: {FFFFFF}%d{48FFFF})!", name, JugadoresCantidadMinijuegos[10]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Minijuego - Zona DM2{FFFFFF} (/zonadm2){07BA6D} (Jugadores: {FFFFFF}%d{07BA6D})!", name, JugadoresCantidadMinijuegos[10]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Minijuego - Zona DM2{FFFFFF} (/zonadm2){C10053} (Jugadores: {FFFFFF}%d{C10053})!", name, JugadoresCantidadMinijuegos[10]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Minijuego - Zona DM2{FFFFFF} (/zonadm2){FF0053} (Jugadores: {FFFFFF}%d{FF0053})!", name, JugadoresCantidadMinijuegos[10]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Minijuego - Zona DM2{FFFFFF} (/zonadm2){DEFF4F} (Jugadores: {FFFFFF}%d{DEFF4F})!", name, JugadoresCantidadMinijuegos[10]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SendClientMessage(playerid, -1, "{FFFF00}* Has entrado a un Minijuego, usa: /salir cuando desees salir!");
	return 1;
}

YCMD:zonadm3(playerid, params[], help) { zonadm3A(playerid); return 1; }
funcion zonadm3A(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(JugadorSpawnKill[playerid] == 1) return SendClientMessage(playerid, -1, "{FFFF00}Espera los 15 segundos de la protección AntiSpawn-Kill para poder transportarte a un juego.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~w~"a_xa"mini-juego ~n~~r~~h~ Zona DM3~w~!", 8000, 5);
	new rand = random(sizeof(ZDM3));
	ResetPlayerWeapons(playerid);
	SetPlayerHealth(playerid, 99.0);
	SetPlayerArmour(playerid, 99.0);
	EstaDM[playerid] = 1;
	EnGameJuego[playerid] = 12;
	DarAntiSpawnKill[playerid] = true;
	GivePlayerWeapon(playerid, 24, 1500);
	GivePlayerWeapon(playerid, 25, 1500);
	GivePlayerWeapon(playerid, 34, 1500);
	GivePlayerWeapon(playerid, 31, 1500);
	SetPlayerPosEx(playerid, ZDM3[rand][0], ZDM3[rand][1], ZDM3[rand][2], ZDM3[rand][3], 16, 97);
 	new name[MAX_PLAYER_NAME];
 	JugadoresCantidadMinijuegos[11] += 1;
  	GetPlayerName(playerid, name,sizeof(name));
   	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Minijuego - Zona DM3{FFFFFF} (/zonadm3){00FF8E} (Jugadores: {FFFFFF}%d{00FF8E})!", name, JugadoresCantidadMinijuegos[11]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Minijuego - Zona DM3 {FFFFFF}(/zonadm3){B2FF20} {FFFFFF}%d{B2FF20})!", name, JugadoresCantidadMinijuegos[11]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Minijuego - Zona DM3{FFFFFF} (/zonadm3){FFD446} (Jugadores: {FFFFFF}%d{FFD446})!", name, JugadoresCantidadMinijuegos[11]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Minijuego - Zona DM3{FFFFFF} (/zonadm3){FF738E} (Jugadores: {FFFFFF}%d{FF738E})!", name, JugadoresCantidadMinijuegos[11]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Minijuego - Zona DM3{FFFFFF} (/zonadm3){9798FF} (Jugadores: {FFFFFF}%d{9798FF})!", name, JugadoresCantidadMinijuegos[11]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Minijuego - Zona DM3{FFFFFF} (/zonadm3){4898FF} (Jugadores: {FFFFFF}%d{4898FF})!", name, JugadoresCantidadMinijuegos[11]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Minijuego - Zona DM3{FFFFFF} (/zonadm3){48FFFF} (Jugadores: {FFFFFF}%d{48FFFF})!", name, JugadoresCantidadMinijuegos[11]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Minijuego - Zona DM3{FFFFFF} (/zonadm3){07BA6D} (Jugadores: {FFFFFF}%d{07BA6D})!", name, JugadoresCantidadMinijuegos[11]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Minijuego - Zona DM3{FFFFFF} (/zonadm3){C10053} (Jugadores: {FFFFFF}%d{C10053})!", name, JugadoresCantidadMinijuegos[11]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Minijuego - Zona DM3{FFFFFF} (/zonadm3){FF0053} (Jugadores: {FFFFFF}%d{FF0053})!", name, JugadoresCantidadMinijuegos[11]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Minijuego - Zona DM3{FFFFFF} (/zonadm3){DEFF4F} (Jugadores: {FFFFFF}%d{DEFF4F})!", name, JugadoresCantidadMinijuegos[11]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SendClientMessage(playerid, -1, "{FFFF00}* Has entrado a un Minijuego, usa: /salir cuando desees salir!");
	return 1;
}

YCMD:zonadm4(playerid, params[], help) { zonadm4A(playerid); return 1; }
funcion zonadm4A(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(JugadorSpawnKill[playerid] == 1) return SendClientMessage(playerid, -1, "{FFFF00}Espera los 15 segundos de la protección AntiSpawn-Kill para poder transportarte a un juego.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~w~"a_xa"mini-juego ~n~~r~~h~ Zona DM4~w~!", 8000, 5);
	new rand = random(sizeof(ZDM4));
	ResetPlayerWeapons(playerid);
	SetPlayerHealth(playerid, 99.0);
	SetPlayerArmour(playerid, 99.0);
	EstaDM[playerid] = 1;
	EnGameJuego[playerid] = 13;
	DarAntiSpawnKill[playerid] = true;
	GivePlayerWeapon(playerid, 24, 1500);
	GivePlayerWeapon(playerid, 25, 1500);
	GivePlayerWeapon(playerid, 34, 1500);
	GivePlayerWeapon(playerid, 31, 1500);
	SetPlayerPosEx(playerid, ZDM4[rand][0], ZDM4[rand][1], ZDM4[rand][2], ZDM4[rand][3], 7, 98);
 	new name[MAX_PLAYER_NAME];
 	JugadoresCantidadMinijuegos[12] += 1;
  	GetPlayerName(playerid, name,sizeof(name));
   	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Minijuego - Zona DM4{FFFFFF} (/zonadm4){00FF8E} (Jugadores: {FFFFFF}%d{00FF8E})!", name, JugadoresCantidadMinijuegos[12]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Minijuego - Zona DM4 {FFFFFF}(/zonadm4){B2FF20} {FFFFFF}%d{B2FF20})!", name, JugadoresCantidadMinijuegos[12]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Minijuego - Zona DM4{FFFFFF} (/zonadm4){FFD446} (Jugadores: {FFFFFF}%d{FFD446})!", name, JugadoresCantidadMinijuegos[12]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Minijuego - Zona DM4{FFFFFF} (/zonadm4){FF738E} (Jugadores: {FFFFFF}%d{FF738E})!", name, JugadoresCantidadMinijuegos[12]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Minijuego - Zona DM4{FFFFFF} (/zonadm4){9798FF} (Jugadores: {FFFFFF}%d{9798FF})!", name, JugadoresCantidadMinijuegos[12]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Minijuego - Zona DM4{FFFFFF} (/zonadm4){4898FF} (Jugadores: {FFFFFF}%d{4898FF})!", name, JugadoresCantidadMinijuegos[12]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Minijuego - Zona DM4{FFFFFF} (/zonadm4){48FFFF} (Jugadores: {FFFFFF}%d{48FFFF})!", name, JugadoresCantidadMinijuegos[12]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Minijuego - Zona DM4{FFFFFF} (/zonadm4){07BA6D} (Jugadores: {FFFFFF}%d{07BA6D})!", name, JugadoresCantidadMinijuegos[12]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Minijuego - Zona DM4{FFFFFF} (/zonadm4){C10053} (Jugadores: {FFFFFF}%d{C10053})!", name, JugadoresCantidadMinijuegos[12]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Minijuego - Zona DM4{FFFFFF} (/zonadm4){FF0053} (Jugadores: {FFFFFF}%d{FF0053})!", name, JugadoresCantidadMinijuegos[12]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Minijuego - Zona DM4{FFFFFF} (/zonadm4){DEFF4F} (Jugadores: {FFFFFF}%d{DEFF4F})!", name, JugadoresCantidadMinijuegos[12]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SendClientMessage(playerid, -1, "{FFFF00}* Has entrado a un Minijuego, usa: /salir cuando desees salir!");
	return 1;
}

//ZONADM1-5 RW
YCMD:zonadm5(playerid, params[], help) { zonadm5A(playerid); return 1; }
funcion zonadm5A(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(JugadorSpawnKill[playerid] == 1) return SendClientMessage(playerid, -1, "{FFFF00}Espera los 15 segundos de la protección AntiSpawn-Kill para poder transportarte a un juego.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~w~"a_xa"mini-juego ~n~~r~~h~ Zona DM5~w~!", 8000, 5);
	new rand = random(sizeof(ZDM1));
	ResetPlayerWeapons(playerid);
	SetPlayerHealth(playerid, 99.0);
	SetPlayerArmour(playerid, 99.0);
	EstaDM[playerid] = 1;
	EnGameJuego[playerid] = 14;
	DarAntiSpawnKill[playerid] = true;
	GivePlayerWeapon(playerid, 22, 1500);
	GivePlayerWeapon(playerid, 26, 6500);
	GivePlayerWeapon(playerid, 28, 1500);
	SetPlayerPosEx(playerid, ZDM1[rand][0], ZDM1[rand][1], ZDM1[rand][2], ZDM1[rand][3], 1, 194);
 	new name[MAX_PLAYER_NAME];
 	JugadoresCantidadMinijuegos[13] += 1;
  	GetPlayerName(playerid, name,sizeof(name));
   	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Minijuego - Zona DM5{FFFFFF} (/zonadm5){00FF8E} (Jugadores: {FFFFFF}%d{00FF8E})!", name, JugadoresCantidadMinijuegos[13]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Minijuego - Zona DM5 {FFFFFF}(/zonadm5){B2FF20} {FFFFFF}%d{B2FF20})!", name, JugadoresCantidadMinijuegos[13]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Minijuego - Zona DM5{FFFFFF} (/zonadm5){FFD446} (Jugadores: {FFFFFF}%d{FFD446})!", name, JugadoresCantidadMinijuegos[13]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Minijuego - Zona DM5{FFFFFF} (/zonadm5){FF738E} (Jugadores: {FFFFFF}%d{FF738E})!", name, JugadoresCantidadMinijuegos[13]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Minijuego - Zona DM5{FFFFFF} (/zonadm5){9798FF} (Jugadores: {FFFFFF}%d{9798FF})!", name, JugadoresCantidadMinijuegos[13]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Minijuego - Zona DM5{FFFFFF} (/zonadm5){4898FF} (Jugadores: {FFFFFF}%d{4898FF})!", name, JugadoresCantidadMinijuegos[13]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Minijuego - Zona DM5{FFFFFF} (/zonadm5){48FFFF} (Jugadores: {FFFFFF}%d{48FFFF})!", name, JugadoresCantidadMinijuegos[13]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Minijuego - Zona DM5{FFFFFF} (/zonadm5){07BA6D} (Jugadores: {FFFFFF}%d{07BA6D})!", name, JugadoresCantidadMinijuegos[13]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Minijuego - Zona DM5{FFFFFF} (/zonadm5){C10053} (Jugadores: {FFFFFF}%d{C10053})!", name, JugadoresCantidadMinijuegos[13]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Minijuego - Zona DM5{FFFFFF} (/zonadm5){FF0053} (Jugadores: {FFFFFF}%d{FF0053})!", name, JugadoresCantidadMinijuegos[13]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Minijuego - Zona DM5{FFFFFF} (/zonadm5){DEFF4F} (Jugadores: {FFFFFF}%d{DEFF4F})!", name, JugadoresCantidadMinijuegos[13]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SendClientMessage(playerid, -1, "{FFFF00}* Has entrado a un Minijuego, usa: /salir cuando desees salir!");
	return 1;
}

//ZONADM2-6 RW
YCMD:zonadm6(playerid, params[], help) { zonadm6A(playerid); return 1; }
funcion zonadm6A(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(JugadorSpawnKill[playerid] == 1) return SendClientMessage(playerid, -1, "{FFFF00}Espera los 15 segundos de la protección AntiSpawn-Kill para poder transportarte a un juego.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~w~"a_xa"mini-juego ~n~~r~~h~ Zona DM6~w~!", 8000, 5);
	new rand = random(sizeof(ZDM2));
	ResetPlayerWeapons(playerid);
	SetPlayerHealth(playerid, 99.0);
	SetPlayerArmour(playerid, 99.0);
	EstaDM[playerid] = 1;
	EnGameJuego[playerid] = 15;
	DarAntiSpawnKill[playerid] = true;
	GivePlayerWeapon(playerid, 22, 1500);
	GivePlayerWeapon(playerid, 26, 6500);
	GivePlayerWeapon(playerid, 28, 1500);
	SetPlayerPosEx(playerid, ZDM2[rand][0], ZDM2[rand][1], ZDM2[rand][2], ZDM2[rand][3], 18, 195);
 	new name[MAX_PLAYER_NAME];
 	JugadoresCantidadMinijuegos[14] += 1;
  	GetPlayerName(playerid, name,sizeof(name));
   	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Minijuego - Zona DM6{FFFFFF} (/zonadm6){00FF8E} (Jugadores: {FFFFFF}%d{00FF8E})!", name, JugadoresCantidadMinijuegos[14]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Minijuego - Zona DM6 {FFFFFF}(/zonadm6){B2FF20} {FFFFFF}%d{B2FF20})!", name, JugadoresCantidadMinijuegos[14]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Minijuego - Zona DM6{FFFFFF} (/zonadm6){FFD446} (Jugadores: {FFFFFF}%d{FFD446})!", name, JugadoresCantidadMinijuegos[14]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Minijuego - Zona DM6{FFFFFF} (/zonadm6){FF738E} (Jugadores: {FFFFFF}%d{FF738E})!", name, JugadoresCantidadMinijuegos[14]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Minijuego - Zona DM6{FFFFFF} (/zonadm6){9798FF} (Jugadores: {FFFFFF}%d{9798FF})!", name, JugadoresCantidadMinijuegos[14]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Minijuego - Zona DM6{FFFFFF} (/zonadm6){4898FF} (Jugadores: {FFFFFF}%d{4898FF})!", name, JugadoresCantidadMinijuegos[14]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Minijuego - Zona DM6{FFFFFF} (/zonadm6){48FFFF} (Jugadores: {FFFFFF}%d{48FFFF})!", name, JugadoresCantidadMinijuegos[14]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Minijuego - Zona DM6{FFFFFF} (/zonadm6){07BA6D} (Jugadores: {FFFFFF}%d{07BA6D})!", name, JugadoresCantidadMinijuegos[14]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Minijuego - Zona DM6{FFFFFF} (/zonadm6){C10053} (Jugadores: {FFFFFF}%d{C10053})!", name, JugadoresCantidadMinijuegos[14]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Minijuego - Zona DM6{FFFFFF} (/zonadm6){FF0053} (Jugadores: {FFFFFF}%d{FF0053})!", name, JugadoresCantidadMinijuegos[14]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Minijuego - Zona DM6{FFFFFF} (/zonadm6){DEFF4F} (Jugadores: {FFFFFF}%d{DEFF4F})!", name, JugadoresCantidadMinijuegos[14]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SendClientMessage(playerid, -1, "{FFFF00}* Has entrado a un Minijuego, usa: /salir cuando desees salir!");
	return 1;
}

YCMD:zonadm7(playerid, params[], help) { zonadm7A(playerid); return 1; }
funcion zonadm7A(playerid)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(JugadorSpawnKill[playerid] == 1) return SendClientMessage(playerid, -1, "{FFFF00}Espera los 15 segundos de la protección AntiSpawn-Kill para poder transportarte a un juego.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~w~"a_xa"mini-juego ~n~~r~~h~ Zona DM7~w~!", 8000, 5);
	new rand = random(sizeof(ZDM3));
	ResetPlayerWeapons(playerid);
	SetPlayerHealth(playerid, 99.0);
	SetPlayerArmour(playerid, 99.0);
	EstaDM[playerid] = 1;
	EnGameJuego[playerid] = 16;
	DarAntiSpawnKill[playerid] = true;
	GivePlayerWeapon(playerid, 22, 1500);
	GivePlayerWeapon(playerid, 26, 6500);
	GivePlayerWeapon(playerid, 28, 1500);
	SetPlayerPosEx(playerid, ZDM3[rand][0], ZDM3[rand][1], ZDM3[rand][2], ZDM3[rand][3], 16, 197);
 	new name[MAX_PLAYER_NAME];
 	JugadoresCantidadMinijuegos[15] += 1;
  	GetPlayerName(playerid, name,sizeof(name));
   	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Minijuego - Zona DM7{FFFFFF} (/zonadm7){00FF8E} (Jugadores: {FFFFFF}%d{00FF8E})!", name, JugadoresCantidadMinijuegos[15]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Minijuego - Zona DM7 {FFFFFF}(/zonadm7){B2FF20} {FFFFFF}%d{B2FF20})!", name, JugadoresCantidadMinijuegos[15]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Minijuego - Zona DM7{FFFFFF} (/zonadm7){FFD446} (Jugadores: {FFFFFF}%d{FFD446})!", name, JugadoresCantidadMinijuegos[15]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Minijuego - Zona DM7{FFFFFF} (/zonadm7){FF738E} (Jugadores: {FFFFFF}%d{FF738E})!", name, JugadoresCantidadMinijuegos[15]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Minijuego - Zona DM7{FFFFFF} (/zonadm7){9798FF} (Jugadores: {FFFFFF}%d{9798FF})!", name, JugadoresCantidadMinijuegos[15]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Minijuego - Zona DM7{FFFFFF} (/zonadm7){4898FF} (Jugadores: {FFFFFF}%d{4898FF})!", name, JugadoresCantidadMinijuegos[15]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Minijuego - Zona DM7{FFFFFF} (/zonadm7){48FFFF} (Jugadores: {FFFFFF}%d{48FFFF})!", name, JugadoresCantidadMinijuegos[15]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Minijuego - Zona DM7{FFFFFF} (/zonadm7){07BA6D} (Jugadores: {FFFFFF}%d{07BA6D})!", name, JugadoresCantidadMinijuegos[15]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Minijuego - Zona DM7{FFFFFF} (/zonadm7){C10053} (Jugadores: {FFFFFF}%d{C10053})!", name, JugadoresCantidadMinijuegos[15]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Minijuego - Zona DM7{FFFFFF} (/zonadm7){FF0053} (Jugadores: {FFFFFF}%d{FF0053})!", name, JugadoresCantidadMinijuegos[15]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Minijuego - Zona DM7{FFFFFF} (/zonadm7){DEFF4F} (Jugadores: {FFFFFF}%d{DEFF4F})!", name, JugadoresCantidadMinijuegos[15]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SendClientMessage(playerid, -1, "{FFFF00}* Has entrado a un Minijuego, usa: /salir cuando desees salir!");
	return 1;
}

/*YCMD:cristal(playerid, params[], help) { CRISTALA(playerid); return 1; }
funcion CRISTALA(playerid)
{
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~w~"a_xa"mini-juego ~n~~r~~h~ Cristal~w~!", 8000, 5);
//	new rand = random(sizeof(RC2));
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 107);
	//Poner coordenadas ramdom
	SetPlayerPos(playerid, -3951.1250,1389.4663,5.0100 + 5);

	ResetPlayerWeapons(playerid);
	EstaDM[playerid] = 1;
	EnGameJuego[playerid] = 7;
	GivePlayerWeapon(playerid, 25, 999);
	//SetPlayerPos(playerid, RC2[rand][0], RC2[rand][1], RC2[rand][2]);
 	new name[MAX_PLAYER_NAME];
 	JugadoresCantidadMinijuegos[6] += 1;
  	GetPlayerName(playerid, name,sizeof(name));
   	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Minijuego - Cristal{FFFFFF}(/cristal){00FF8E}!(Jugadores: {FFFFFF}%d{00FF8E}).", name, JugadoresCantidadMinijuegos[6]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Minijuego - Cristal{FFFFFF}(/cristal){B2FF20}!(Jugadores: {FFFFFF}%d{B2FF20}).", name, JugadoresCantidadMinijuegos[6]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Minijuego - Cristal{FFFFFF}(/cristal){FFD446}!(Jugadores: {FFFFFF}%d{FFD446}).", name, JugadoresCantidadMinijuegos[6]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Minijuego - Cristal{FFFFFF}(/cristal){FF738E}!(Jugadores: {FFFFFF}%d{FF738E}).", name, JugadoresCantidadMinijuegos[6]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Minijuego - Cristal{FFFFFF}(/cristal){9798FF}!(Jugadores: {FFFFFF}%d{9798FF}).", name, JugadoresCantidadMinijuegos[6]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Minijuego - Cristal{FFFFFF}(/cristal){4898FF}!(Jugadores: {FFFFFF}%d{4898FF}).", name, JugadoresCantidadMinijuegos[6]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Minijuego - Cristal{FFFFFF}(/cristal){48FFFF}!(Jugadores: {FFFFFF}%d{48FFFF}).", name, JugadoresCantidadMinijuegos[6]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Minijuego - Cristal{FFFFFF}(/cristal){07BA6D}!(Jugadores: {FFFFFF}%d{07BA6D}).", name, JugadoresCantidadMinijuegos[6]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Minijuego - Cristal{FFFFFF}(/cristal){C10053}!(Jugadores: {FFFFFF}%d{C10053}).", name, JugadoresCantidadMinijuegos[6]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Minijuego - Cristal{FFFFFF}(/cristal){FF0053}!(Jugadores: {FFFFFF}%d{FF0053}).", name, JugadoresCantidadMinijuegos[6]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Minijuego - Cristal{FFFFFF}(/cristal){DEFF4F}!(Jugadores: {FFFFFF}%d{DEFF4F}).", name, JugadoresCantidadMinijuegos[6]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SendClientMessage(playerid, -1, "{FFFF00}* Has entrado a un Minijuego, usa: /salir cuando desees salir!");
	return 1;
}

YCMD:cristal2(playerid, params[], help) { CRISTAL2A(playerid); return 1; }
funcion CRISTAL2A(playerid)
{
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~w~"a_xa"mini-juego ~n~~r~~h~ Cristal 2~w~!", 8000, 5);
//	new rand = random(sizeof(RC2));
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 107);
	//Poner coordenadas ramdom
	SetPlayerPos(playerid, -2510.2407,733.9437,183.0400 + 5);

	ResetPlayerWeapons(playerid);
	EstaDM[playerid] = 1;
	EnGameJuego[playerid] = 8;
	GivePlayerWeapon(playerid, 25, 999);
	//SetPlayerPos(playerid, RC2[rand][0], RC2[rand][1], RC2[rand][2]);
 	new name[MAX_PLAYER_NAME];
 	JugadoresCantidadMinijuegos[7] += 1;
  	GetPlayerName(playerid, name,sizeof(name));
   	new TLP = random(11);
	if (TLP == 0) { format(stringj2,sizeof(stringj2),"{00FF8E}¡%s fue ha Minijuego - Cristal 2{FFFFFF}(/cristal2){00FF8E}!(Jugadores: {FFFFFF}%d{00FF8E}).", name, JugadoresCantidadMinijuegos[7]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 1) {
	format(stringj2,sizeof(stringj2),"{B2FF20}¡%s fue ha Minijuego - Cristal 2{FFFFFF}(/cristal2){B2FF20}!(Jugadores: {FFFFFF}%d{B2FF20}).", name, JugadoresCantidadMinijuegos[7]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 2) { format(stringj2,sizeof(stringj2),"{FFD446}¡%s fue ha Minijuego - Cristal 2{FFFFFF}(/cristal2){FFD446}!(Jugadores: {FFFFFF}%d{FFD446}).", name, JugadoresCantidadMinijuegos[7]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 3) { format(stringj2,sizeof(stringj2),"{FF738E}¡%s fue ha Minijuego - Cristal 2{FFFFFF}(/cristal2){FF738E}!(Jugadores: {FFFFFF}%d{FF738E}).", name, JugadoresCantidadMinijuegos[7]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 4) { format(stringj2,sizeof(stringj2),"{9798FF}¡%s fue ha Minijuego - Cristal 2{FFFFFF}(/cristal2){9798FF}!(Jugadores: {FFFFFF}%d{9798FF}).", name, JugadoresCantidadMinijuegos[7]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 5) { format(stringj2,sizeof(stringj2),"{4898FF}¡%s fue ha Minijuego - Cristal 2{FFFFFF}(/cristal2){4898FF}!(Jugadores: {FFFFFF}%d{4898FF}).", name, JugadoresCantidadMinijuegos[7]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 6) { format(stringj2,sizeof(stringj2),"{48FFFF}¡%s fue ha Minijuego - Cristal 2{FFFFFF}(/cristal2){48FFFF}!(Jugadores: {FFFFFF}%d{48FFFF}).", name, JugadoresCantidadMinijuegos[7]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 7) { format(stringj2,sizeof(stringj2),"{07BA6D}¡%s fue ha Minijuego - Cristal 2{FFFFFF}(/cristal2){07BA6D}!(Jugadores: {FFFFFF}%d{07BA6D}).", name, JugadoresCantidadMinijuegos[7]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 8) { format(stringj2,sizeof(stringj2),"{C10053}¡%s fue ha Minijuego - Cristal 2{FFFFFF}(/cristal2){C10053}!(Jugadores: {FFFFFF}%d{C10053}).", name, JugadoresCantidadMinijuegos[7]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 9) { format(stringj2,sizeof(stringj2),"{FF0053}¡%s fue ha Minijuego - Cristal 2{FFFFFF}(/cristal2){FF0053}!(Jugadores: {FFFFFF}%d{FF0053}).", name, JugadoresCantidadMinijuegos[7]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	else if (TLP == 10){ format(stringj2,sizeof(stringj2),"{DEFF4F}¡%s fue ha Minijuego - Cristal 2{FFFFFF}(/cristal2){DEFF4F}!(Jugadores: {FFFFFF}%d{DEFF4F}).", name, JugadoresCantidadMinijuegos[7]);
	DAR_MENSAJE_TELEPORT(stringj2);}
	SendClientMessage(playerid, -1, "{FFFF00}* Has entrado a un Minijuego, usa: /salir cuando desees salir!");
	return 1;
}*/

YCMD:crearcarrera(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(!IsPlayerAdmin(playerid)) return SendClientMessage(playerid, Blanco, "Este comando esta reservado para administradores RCON.");
 	if(BuildRace != 0) return SendClientMessage(playerid, Blanco, "Ya se esta creando una carrera nueva.");
  	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, Blanco, "Antes de comenzar, baje de su vehiculo.");
   	BuildRace = playerid+1;
    ShowDialog(playerid, 599);
	return 1;
}

YCMD:detenercarreras(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(!IsPlayerAdmin(playerid)) return SendClientMessage(playerid, Blanco, "Este comando esta reservado para administradores RCON.");
 	if(RaceBusy == 0x00 || RaceStarted == 0) return SendClientMessage(playerid, Blanco, "Ya ha sido detenido.");
  	SendClientMessage(playerid, Blanco, "Se han detenido la carreras.");
	return 1;
}

YCMD:exit(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
 	if(JugadorEnElDuelo[playerid] == 1){
  	SendClientMessage(playerid, Blanco, "¡No estas en una carrera!");
   	return 1;}
	if(Joined[playerid] == true)
 	{
		JoinCount--;
		Joined[playerid] = false;
		RaceEnter[playerid] = 0;
		DestroyVehicle(CreatedRaceVeh[playerid]);
	    DisablePlayerRaceCheckpoint(playerid);
		CPProgess[playerid] = 0;
		KillTimer(InfoTimer[playerid]);
		TogglePlayerControllable(playerid, true);
		SetCameraBehindPlayer(playerid);
		#if defined RACE_IN_OTHER_WORLD
		NoJump[playerid] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		#endif
  	} else return SendClientMessage(playerid, Blanco, "¡No estas en una carrera!");
	return 1;
    }

YCMD:iniciarcarreras(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(!IsPlayerAdmin(playerid)) return SendClientMessage(playerid, Blanco, "Este comando esta reservado para administradores RCON.");
 	if(RaceBusy == 0x01 || RaceStarted == 1) return SendClientMessage(playerid, Blanco, "Ya comenzo la carrera. Espera la próxima.");
  	if(AutomaticRace == true) return SendClientMessage(playerid, Blanco, "Esta está activado.");
   	LoadRaceNames();
    LoadAutoRace(RaceNames[random(TotalRaces)]);
    AutomaticRace = true;
    SendClientMessage(playerid, -1, "Se ha activado el sistema de carreras.");
	return 1;
}

YCMD:stoprace(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(!IsPlayerAdmin(playerid)) return SendClientMessage(playerid, Blanco, "Este comando esta reservado para administradores RCON.");
 	if(AutomaticRace == false) return SendClientMessage(playerid, Blanco, "Ya se ha deshabilitado el sistema.");
  	AutomaticRace = false;
	return 1;
}

YCMD:join(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
 	if(IsPlayerInAnyVehicle(playerid))
 	{
     	if(RaceStarted == 1) return SendClientMessage(playerid, -1, "{FF0000}La carrera comenzo y ya no podrás participar.");
 	    if(RaceBusy == 0x00) return SendClientMessage(playerid, -1, "{FF0000}No hay carreras en este momento.");
	    if(Joined[playerid] == true) return SendClientMessage(playerid, -1, "{FF0000}Ya estás dentro de una carrera. Usa: /exit para salir.");
	    if(IsPlayerInAnyVehicle(playerid)) return SetTimerEx("SetupRaceForPlayer", 2500, 0, "e", playerid), Joined[playerid] = true;
	    SetupRaceForPlayer(playerid);
	    ResetPlayerWeapons(playerid);
	    NoJump[playerid] = 1;
	    NoEnRace[playerid] = 1;
	    Joined[playerid] = true;
	    AunNo[playerid] = 1;
  	}
  	else
	{
     	SendClientMessage(playerid, -1, "{FF0000}Debes de estar dentro de un vehiculo para participar.");
     	GameTextForPlayer(playerid, "~r~~h~Debes de estar dentro~n~ de un vehiculo...", 4000, 5);
 	}
	return 1;
}

YCMD:jetpack(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USEJETPACK);
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~w~jetpack ~n~~r~~h~obtenido", 8000, 5);
	return 1;
}

/*CMD:dardinero(playerid, params[])
{
	new stringr[180];
	new playermoney;

    if (!sscanf(params, "ii", params[0], params[1]))
	{
		if (IsPlayerConnected(params[0]))
		{

			if (params[1] > 0 && DineroJugador[playerid] >= params[1])
			{
			    if(playerid != params[0])
            	{
					GivePlayerMoney(playerid, (0 - params[1]));
					GivePlayerMoney(params[0], params[1]);
					format(stringr, sizeof(stringr), "Has enviado dinero al jugador, %s(%d). {FFF940}Monto: {19D408}$%d.", GetName(params[0]), params[0], params[1]);
					SendClientMessage(playerid, 0xFF5600FF, stringr);
					format(stringr, sizeof(stringr), "Has recibido $%d del jugador, %s(%d).", params[1], GetName(playerid), playerid);
					SendClientMessage(params[0], 0xFF5600FF, stringr);
					Sonido(playerid);
					Sonido(params[0]);
				}
				else SendClientMessage(playerid, -1, "¡No puedes enviarte dinero tu mismo!");
			}
			else SendClientMessage(playerid, -1, "* No tienes suficiente dinero.");
		}
	  	else SendClientMessage(playerid, -1, "El jugador no se encuentra conectado.");
 	}
	else SendClientMessage(playerid, -1, "Usa: /dardinero [id/jugador] [monto/cantidad de dinero].");
	return 1;
}*/

YCMD:afix(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(IsPlayerInAnyVehicle(playerid))
	{
 		if(aFix[playerid] == 0)
 		{
			aFix[playerid] = 1;
 			MensajeJugador(-1, "");
		 	SendClientMessage(playerid, -1, "{77FF00}* El autoreparación se activo correctemente, ahora tus vehículos serán indestructibles.");
		 	SendClientMessage(playerid, -1, "Para desactivar la autoreparación escribe el mismo comando!");
			mysql_format(Conexion, queryx, sizeof(queryx), "UPDATE `jugadores` SET AutoFix=%d WHERE Nombre='%s'", aFix[playerid], GetName(playerid));
			mysql_function_query(Conexion, queryx, true, "OnQueryFinish", "ii", 0, playerid);
		}
		else
		{
 			aFix[playerid] = 0;
  			SendClientMessage(playerid, -1, "{77FF00}* El autoreparación se desactivo correctemente, ahora tus vehículos no serán indestructibles.");
		 	SendClientMessage(playerid, -1, "Para activar la autoreparación escribe el mismo comando!");
			mysql_format(Conexion, queryx, sizeof(queryx), "UPDATE `jugadores` SET AutoFix=%d WHERE Nombre='%s'", aFix[playerid], GetName(playerid));
			mysql_function_query(Conexion, queryx, true, "OnQueryFinish", "ii", 0, playerid);
  		}
	}
	else return GameTextForPlayer(playerid, "~n~~n~~n~~r~~h~~h~no est"a_a"s dentro de un vehiculo", 3000, 3);
	return 1;
}

YCMD:ccolor(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
    if (!sscanf(params, "ii", params[0], params[1]))
	{
	    new stringJ[120];
	    format(stringJ, sizeof(stringJ), "{0088FF}* Color de auto combiado. (P1: %d | P2 %d).", params[0], params[1]);
	    SendClientMessage(playerid, -1, stringJ);
	    ChangeVehicleColor(GetPlayerVehicleID(playerid), params[0], params[1]);
 	}
 	else SendClientMessage(playerid, -1, "Usa: /ccolor [pintura 1] [pintura 2(números)].");
 	return 1;
}

YCMD:turbo(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(!strlen(params))
	{
		SendClientMessage(playerid, -1, "Usa: /turbo [1-3]");
		return SendClientMessage(playerid, -1, "1.- Nitro, 2.- Turbo, 3.- Superturbo.");
	}
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(Joined[playerid] == true) return SendClientMessage(playerid, -1, "No puedes cambiar la clase de turbo estando en una carrera.");
	if(strcmp(params,"1",true) == 0)
	{
	    if (NoJump[playerid] == 0)
 		{
	   		NoJump[playerid] = 1;
	   		SendClientMessage(playerid, -1,"");
       		SendClientMessage(playerid, -1,"{FF00A9}* Has activado el Turbo1 correctamente. Escribe /no turbo para desactivarlo.");
       		SendClientMessage(playerid, -1,"Usa: /turbo para cambiar la clase de Turbo que deseas agregar a tus vehículos.");
       		mysql_format(Conexion, queryx, sizeof(queryx), "UPDATE `jugadores` SET Turbo=%d WHERE Nombre='%s'", NoJump[playerid], GetName(playerid));
			mysql_function_query(Conexion, queryx, true, "OnQueryFinish", "ii", 0, playerid);
  		}
  		else return SendClientMessage(playerid, -1, "Primero desactiva el turbo con /no turbo.");
	}
	else if(strcmp(params,"2",true) == 0)
	{
	    if (NoJump[playerid] == 0)
 		{
	   		NoJump[playerid] = 2;
	   		SendClientMessage(playerid, -1,"");
       		SendClientMessage(playerid, -1,"{FF00A9}* Has activado el Turbo2 correctamente. Escribe /no turbo para desactivarlo.");
       		SendClientMessage(playerid, -1,"Usa: /turbo para cambiar la clase de Turbo que deseas agregar a tus vehículos.");
       		mysql_format(Conexion, queryx, sizeof(queryx), "UPDATE `jugadores` SET Turbo=%d WHERE Nombre='%s'", NoJump[playerid], GetName(playerid));
			mysql_function_query(Conexion, queryx, true, "OnQueryFinish", "ii", 0, playerid);
    	}
  		else return SendClientMessage(playerid, -1, "Primero desactiva el turbo con /no turbo.");
	}
	else if(strcmp(params,"3",true) == 0)
	{
	    if (NoJump[playerid] == 0)
 		{
	   		NoJump[playerid] = 3;
	   		SendClientMessage(playerid, -1,"{FF00A9}* Has activado el Turbo3 correctamente. Escribe /no turbo para desactivarlo.");
       		SendClientMessage(playerid, -1,"Usa: /turbo para cambiar la clase de Turbo que deseas agregar a tus vehículos.");
       		mysql_format(Conexion, queryx, sizeof(queryx), "UPDATE `jugadores` SET Turbo=%d WHERE Nombre='%s'", NoJump[playerid], GetName(playerid));
			mysql_function_query(Conexion, queryx, true, "OnQueryFinish", "ii", 0, playerid);
  		}
  		else return SendClientMessage(playerid, -1, "Primero desactiva el turbo con /no turbo.");
	}
	else{
     	SendClientMessage(playerid, -1, "Usa: /turbo [1-3]");
		return SendClientMessage(playerid, -1, "1.- Nitro, 2.- Turbo, 3.- Superturbo.");
	}
	return 1;
}

YCMD:no(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(!strlen(params))
	{
		SendClientMessage(playerid, -1, "Usa: /no [turbo, salto]");
	}
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if(strcmp(params,"turbo",true) == 0)
	{
	    NoJump[playerid] = 0;
   		SendClientMessage(playerid, -1,"");
   		SendClientMessage(playerid, -1,"{FFFF00}* El Turbo fue desactivado correctamente.");
   		SendClientMessage(playerid, -1,"Escribe: /turbo, para escoger otro estilo de turbo.");
   		mysql_format(Conexion, queryx, sizeof(queryx), "UPDATE `jugadores` SET Turbo=%d WHERE Nombre='%s'", NoJump[playerid], GetName(playerid));
		mysql_function_query(Conexion, queryx, true, "OnQueryFinish", "ii", 0, playerid);
	}
	else if(strcmp(params,"salto",true) == 0)
	{
	    if (NoSALTO[playerid] == 1)
 		{
	    	NoSALTO[playerid] = 0;
   			SendClientMessage(playerid, -1,"");
   			SendClientMessage(playerid, -1,"{FFFF00}* El salto en vehículos fue desactivado correctamente.");
   			SendClientMessage(playerid, -1,"Escribe: /salto, para activarlo de nuevo.");
   			mysql_format(Conexion, queryx, sizeof(queryx), "UPDATE `jugadores` SET Salto=%d WHERE Nombre='%s'", NoSALTO[playerid], GetName(playerid));
			mysql_function_query(Conexion, queryx, true, "OnQueryFinish", "ii", 0, playerid);
		}
		else return SendClientMessage(playerid, -1, "El saltos ya se encuentra desactivado. Usa: /salto para activarlo.");
	}
	else{
     	SendClientMessage(playerid, -1, "Usa: /no [turbo, salto]");
	}
	return 1;
}

YCMD:salto(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if (NoSALTO[playerid] == 0)
 	{
	   	NoJump[playerid] = 1;
       	SendClientMessage(playerid, 0x00DED4FF,"* Has activado el super salto. Para desacativarlo, escribe el mismo comando.");
       	mysql_format(Conexion, queryx, sizeof(queryx), "UPDATE `jugadores` SET Salto=%d WHERE Nombre='%s'", NoSALTO[playerid], GetName(playerid));
		mysql_function_query(Conexion, queryx, true, "OnQueryFinish", "ii", 0, playerid);
  	}
  	else return SendClientMessage(playerid, -1, "El salto ya se encuentra activado. Usa: /no saltos para desactivarlo.");
    return 1;
}

YCMD:fp(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
    new State=GetPlayerState(playerid);
   	if (IsPlayerInAnyVehicle(playerid) && State == PLAYER_STATE_DRIVER)
   	{
  		new VehicleID, Float:Angle, Float:X, Float:Y, Float:Z;
  		GetPlayerPos(playerid, X, Y, Z);
  		VehicleID = GetPlayerVehicleID(playerid);
		GetVehicleZAngle(VehicleID, Angle);
		SetVehiclePos(VehicleID, X, Y, Z);
		SetVehicleZAngle(VehicleID, Angle);
		GameTextForPlayer(playerid, "~n~~n~~n~~r~~h~vehiculo~n~flipleado", 7000, 5);
 	}
 	return 1;
}

YCMD:rotar80(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
    new playerstate = GetPlayerState(playerid);
    if(playerstate == PLAYER_STATE_DRIVER)
	{
    	return RotarVehiculo180Grados(playerid);
    }
    else {
    return SendClientMessage(playerid, Rojo, "¡Debes estar dentro de un vehículo para rotarlo 80 grados!");
    }
}

YCMD:rotar90(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
    new playerstate = GetPlayerState(playerid);
    if(playerstate == PLAYER_STATE_DRIVER)
	{
    	return RotarVehiculo90Grados(playerid);
    }
    else {
    return SendClientMessage(playerid, Rojo, "¡Debes estar dentro de un vehículo para rotarlo 90 grados!");
    }
}

YCMD:control(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(!IsPlayerInAnyVehicle(playerid))
	{
		SendClientMessage(playerid, Rojo, "¡Debes de estar dentro de un vehículo para usar este comando!");
	}
	else
	{
		ShowPlayerDialog(playerid, 6666, DIALOG_STYLE_LIST, "Control", "Luces\nCapó\nMaletero\nBloquear puertas\nMotor\nAlarma", "Seleccionar", "Cancel");
	}
	return 1;
}

YCMD:s(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	GetPlayerPos(playerid, PosX[playerid], PosY[playerid], PosZ[playerid]);
	GetPlayerFacingAngle(playerid, PosA[playerid]);
	SendClientMessage(playerid, Celeste, "Está posición ha sido guardada. Cuando desees regresas escribe: /l.");
	PosI[playerid] = (GetPlayerInterior(playerid));
	PlayerPlaySound(playerid, 1137, 0.0, 0.0, 0.0);
	return 1;
}

YCMD:mispawn(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
    new State = GetPlayerState(playerid);
	if(State!=PLAYER_STATE_DRIVER)
    {
		if(TieneSpawnJugador[playerid] == 1)
		{
 			if(Remplazar[playerid] == true) { MiSpawnInt[playerid] = GetPlayerInterior(playerid); GetPlayerPos(playerid, MiSpawn[0][playerid], MiSpawn[1][playerid], MiSpawn[2][playerid]); MensajedeSpawn(playerid); return 1; }
  			if(Remplazar[playerid] == false) { MensajesRemplazar(playerid); return 1; }
 		}
 		else
 		{
 	    	MensajedeSpawn(playerid);
 	    	GetPlayerPos(playerid, MiSpawn[0][playerid], MiSpawn[1][playerid], MiSpawn[2][playerid]);
 	    	MiSpawnInt[playerid] = GetPlayerInterior(playerid);
 	    	TieneSpawnJugador[playerid] = 1;
 		}
	}
	else return SendClientMessage(playerid, -1, "*** No puedes usar este cmd dentro de un vehículo!");
	return 1;
}


funcion MensajesRemplazar(playerid)
{
	ShowPlayerDialog(playerid, 2034, DIALOG_STYLE_MSGBOX, "{FFFFFF}MiSpawn:", "{00FF65}Ya tienes un spawn guardado(se eliminó).\n{00FF65}Para crear otro 'MiSpawn' usa de nuevo el comando.", "Aceptar", "");
	Sonido(playerid);
	Remplazar[playerid] = true;
	return 1;
}
funcion MensajedeSpawn(playerid)
{
	ShowPlayerDialog(playerid, 2034, DIALOG_STYLE_MSGBOX, "{FFFFFF}MiSpawn:", "{00FF65}Has elegido este lugar como tu nuevo spawn.\n{00FF65}Siempre que mueras o entres al servidor spawnearas aquí.\n\n{00FF65}Cuando ya no quieras este lugar escribe el mismo comando para eliminarlo.\n", "Aceptar", "");
	Sonido(playerid);
	Remplazar[playerid] = false;
	return 1;
}

YCMD:autos(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	DestroySelectionMenu(playerid);
	CreateSelectionMenu(playerid);
	SelectTextDraw(playerid, 0xACCBF1FF);
	SetPVarInt(playerid, "vspawner_active", 1);
 	return 1;
}

YCMD:cars(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	DestroySelectionMenu(playerid);
	CreateSelectionMenu(playerid);
	SelectTextDraw(playerid, 0xACCBF1FF);
	SetPVarInt(playerid, "vspawner_active", 1);
 	return 1;
}

YCMD:menuautos(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	DestroySelectionMenu(playerid);
	CreateSelectionMenu(playerid);
	SelectTextDraw(playerid, 0xACCBF1FF);
	SetPVarInt(playerid, "vspawner_active", 1);
 	return 1;
}

YCMD:v(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	DestroySelectionMenu(playerid);
	CreateSelectionMenu(playerid);
	SelectTextDraw(playerid, 0xACCBF1FF);
	SetPVarInt(playerid, "vspawner_active", 1);
 	return 1;
}

YCMD:vehiculos(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	DestroySelectionMenu(playerid);
	CreateSelectionMenu(playerid);
	SelectTextDraw(playerid, 0xACCBF1FF);
	SetPVarInt(playerid, "vspawner_active", 1);
 	return 1;
}

YCMD:paracaidas(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
   	GivePlayerWeapon(playerid, 46, 1);
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~w~^paracaidas ~n~~r~~h~obtenido~w~!", 8000, 5);
	return 1;
}

YCMD:kill(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	SetPlayerHealth(playerid, 0.0);
	SiSumar[playerid] = 1;
	return 1;
}

YCMD:l(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Encarcelado[playerid] == 1){
 	SendClientMessage(playerid, Naranja, "Un administrador te ha encarcelado. Espera a que te quiten la sanción.");
  	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
   	return 1;}
	if(EstaDM[playerid] == 1){
	SendClientMessage(playerid, Naranja, "Antes de usar comandos debes de salir de la zona con: /salir.");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~~h~~h~primero usa /salir", 4000, 5);
	return 1;}
	if (!floatsqroot(PosX[playerid]+PosY[playerid]+PosZ[playerid]))
	{
		SendClientMessage(playerid, Amarillo, "No tienes ninguna posición guardada. Escribe: /s, para guardar una.");
	}
	else
	{

	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		SetVehiclePos(GetPlayerVehicleID(playerid), PosX[playerid], PosY[playerid], PosZ[playerid]);
		SetVehicleZAngle(GetPlayerVehicleID(playerid), PosA[playerid]);
		SetCameraBehindPlayer(playerid);
		LinkVehicleToInterior(GetPlayerVehicleID(playerid), PosI[playerid]);
	}
	else
	{
		SetPlayerPos(playerid, PosX[playerid], PosY[playerid], PosZ[playerid]);
		SetPlayerFacingAngle(playerid, PosA[playerid]);
		SetCameraBehindPlayer(playerid);
	}
	PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
	SetPlayerInterior(playerid, PosI[playerid]);
	SendClientMessage(playerid, Celeste, "¡Has regresado a tu posición guardada!");
	}
	return 1;
}

YCMD:nombre(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
    if (!sscanf(params, "s[25]", params[0]))
	{
		if(ScoreGeneralJugador[playerid] >= 1500)
		{
			new Archivo[56], string[100], stringa[70];
			if(EnClan[playerid] == 1)
			{
				format(Archivo, sizeof Archivo, "Clanes/%s.ini", Clan_TAG[playerid]);
				for(new d = 1; d < MAX_PLAYERS_CLAN_MIEMBROS ; d++)
    			{
        			format(string, sizeof string, "Miembro_%d", d);
         			if(!strcmp(dini_Get(Archivo, string), GetName(playerid), true))
          			{
           				dini_Set(Archivo, string, params[0]);
             		}
            	}
            	if(strcmp(dini_Get(Archivo, "Presidente"), GetName(playerid), true ) == 0 ) dini_Set(Archivo, "Presidente", params[0]);
				else if(strcmp(dini_Get(Archivo, "Vicepresidente"), GetName(playerid), true ) == 0 ) dini_Set(Archivo, "Vicepresidente", params[0]);
				else if(strcmp(dini_Get(Archivo, "Tesorero"), GetName(playerid), true ) == 0 ) dini_Set(Archivo, "Tesorero", params[0]);
				else if(strcmp(dini_Get(Archivo, "Secretario"), GetName(playerid), true ) == 0 ) dini_Set(Archivo, "Secretario", params[0]);
				else if(strcmp(dini_Get(Archivo, "Sgt.Armas"), GetName(playerid), true ) == 0 ) dini_Set(Archivo, "Sgt.Armas", params[0]);
            }
            ScoreGeneralJugador[playerid] -= 500;
            SetPlayerScore(playerid, ScoreGeneralJugador[playerid]);
            format(stringa, sizeof(stringa), "{EDFF00}*** %s se ha cambiado el nombre a %s.", GetName(playerid), params[0]);
            SendClientMessageToAll(-1, stringa);
	    	CambiarNombreJugador(playerid, params[0], GetName(playerid));
	    	SetPlayerName(playerid, params[0]);
	    }
	    else SendClientMessage(playerid, -1, "Debes tener 1500 de score para cambiar de nombre.");
 	}
 	else SendClientMessage(playerid, -1, "Usa: /nombre [nombre(perderás 500 de score)].");
 	return 1;
}

funcion CambiarNombreJugador(playerid, const NickNuevo[], const NickViejo[])
{

 	JugadorIngresado[playerid] = 1;

 	new Archivo[30];
 	new INI:File = INI_Open(UserPath(playerid));
    getdate(TT[playerid][2], TT[playerid][1], TT[playerid][0]);
	GetPlayerIp(playerid, IPa[playerid], 16);

    INI_SetTag(File,"data");
    INI_WriteString(File,"Password", PlayerInfo[playerid][Password]);
	INI_WriteString(File, "IP", IPa[playerid]);
	INI_WriteInt(File, "NivelAdmin", Administrador[playerid]);
	INI_WriteInt(File, "Muertes",Muertes[playerid]);
	INI_WriteInt(File, "Puntaje",PuntajeJugador[playerid]);
	INI_WriteInt(File, "PuntajeGeneral",ScoreGeneralJugador[playerid]);
	INI_WriteInt(File, "Dinero",DineroJugador[playerid]);
	INI_WriteInt(File, "Skin",SkinPlayer[playerid]);
	INI_WriteInt(File, "NivelVip",Vip[playerid]);
	INI_WriteInt(File, "DuelosGanados",DuelosG[playerid]);
	INI_WriteInt(File, "DuelosPerdidos",DuelosP[playerid]);
	INI_WriteInt(File, "TC",CoNs1[playerid]);
	INI_WriteInt(File, "RaceS",RacesS[playerid]);
	INI_WriteInt(File, "MultiKills",MK[playerid]);
	INI_WriteInt(File, "HolyShit",HS[playerid]);
	INI_WriteInt(File, "VehSpawn",CreoAuto[playerid]);
	INI_WriteInt(File, "Kills",SumarGame0[playerid]);
	INI_WriteInt(File, "Matanza",SumarGame1[playerid]);
	INI_WriteString(File, "Texto",TEXTO_CABECERO[playerid]);
	INI_WriteInt(File, "TextoActivado",Cabecero[playerid]);
	INI_WriteInt(File, "AutoN1_Modelo",MODELO_AUTO[playerid][0]);
	INI_WriteInt(File, "AutoN1_Ruedas",RUEDAS_AUTO[playerid][0]);
	INI_WriteInt(File, "AutoN1_PaintJobs",AUTO_PAINTJOB[playerid][0]);
	INI_WriteInt(File, "AutoN1_Color1",AUTO_COLOR[playerid][0]);
	INI_WriteInt(File, "AutoN1_Color2",AUTO_COLOR2[playerid][0]);
	INI_WriteInt(File, "Neones",NEONES_AUTO[playerid][0]);
	INI_WriteInt(File, "TieneAutoN1",TIENE_AUTO[playerid][0]);
	INI_WriteInt(File, "AutoN2_Modelo",MODELO_AUTO[playerid][1]);
	INI_WriteInt(File, "AutoN2_Ruedas",RUEDAS_AUTO[playerid][1]);
	INI_WriteInt(File, "AutoN2_PaintJobs",AUTO_PAINTJOB[playerid][1]);
	INI_WriteInt(File, "AutoN2_Color1",AUTO_COLOR[playerid][1]);
	INI_WriteInt(File, "AutoN2_Color2",AUTO_COLOR2[playerid][1]);
	INI_WriteInt(File, "Neones2",NEONES_AUTO[playerid][1]);
	INI_WriteInt(File, "TieneAutoN2",TIENE_AUTO[playerid][1]);
	INI_WriteInt(File, "AutoN3_Modelo",MODELO_AUTO[playerid][2]);
	INI_WriteInt(File, "AutoN3_Ruedas",RUEDAS_AUTO[playerid][2]);
	INI_WriteInt(File, "AutoN3_PaintJobs",AUTO_PAINTJOB[playerid][2]);
	INI_WriteInt(File, "AutoN3_Color1",AUTO_COLOR[playerid][2]);
	INI_WriteInt(File, "AutoN3_Color2",AUTO_COLOR2[playerid][2]);
	INI_WriteInt(File, "Neones3",NEONES_AUTO[playerid][2]);
	INI_WriteInt(File, "TieneAutoN3",TIENE_AUTO[playerid][2]);
	INI_WriteInt(File, "TienePintura1",TIENE_PINTURA[playerid][0]);
	INI_WriteInt(File, "TienePintura2",TIENE_PINTURA[playerid][1]);
	INI_WriteInt(File, "TienePintura3",TIENE_PINTURA[playerid][2]);
	INI_WriteInt(File, "Rango",NIVEL_KILLS[playerid]);
	INI_WriteInt(File, "RacePerdidas",RacesSx[playerid]);
	INI_WriteInt(File, "ModoPelea",MODO_PELEA[playerid]);
	INI_WriteInt(File, "Equipo",Equipo[playerid]);
	INI_WriteInt(File, "Displays",DISPLAYS[playerid]);
	INI_WriteFloat(File, "VIPpPosX",VIPPosX[playerid]);
	INI_WriteFloat(File, "VIPpPosY",VIPPosY[playerid]);
	INI_WriteFloat(File, "VIPpPosZ",VIPPosZ[playerid]);
	INI_WriteFloat(File, "VIPpPosA",VIPPosA[playerid]);
	INI_WriteInt(File, "VIPpPos",VIPps[playerid]);
	INI_WriteInt(File, "HydraC",TIENE_HYDRA[playerid]);
	INI_WriteInt(File, "RacesIndividuales",CarreraGanadasIndividuales[playerid]);
	INI_WriteInt(File, "RacesIndividualesPerdidas",CarreraPerdidasIndividuales[playerid]);
	INI_WriteInt(File, "AutoFix",aFix[playerid]);
	INI_WriteInt(File, "Turbo",NoJump[playerid]);
	INI_WriteInt(File, "Salto",NoSALTO[playerid]);
	INI_WriteInt(File, "TieneSpawn", TieneSpawnJugador[playerid]);
	INI_WriteFloat(File, "MiSpawnX", MiSpawn[0][playerid]);
	INI_WriteFloat(File, "MiSpawnY", MiSpawn[1][playerid]);
	INI_WriteFloat(File, "MiSpawnZ", MiSpawn[2][playerid]);
	INI_WriteInt(File, "MiSpawnIntA", MiSpawnInt[playerid]);
	INI_WriteInt(File, "PuntosDM", PuntosDM[playerid]);
	INI_WriteInt(File, "CARMAs1", CArma[playerid][0]);
	INI_WriteInt(File, "CArma2s1", CArma[playerid][1]);
	INI_WriteInt(File, "CArma3s1", CArma[playerid][2]);
	INI_WriteInt(File, "CArma4s1", CArma[playerid][3]);
	INI_WriteInt(File, "CArma5s1", CArma[playerid][4]);
	INI_WriteInt(File, "CARMAs2", CArma[playerid][5]);
	INI_WriteInt(File, "CArma2s2", CArma[playerid][6]);
	INI_WriteInt(File, "CArma3s2", CArma[playerid][7]);
	INI_WriteInt(File, "CArma4s2", CArma[playerid][8]);
	INI_WriteInt(File, "CArma5s2", CArma[playerid][9]);
	INI_WriteInt(File, "CARMAs3", CArma[playerid][10]);
	INI_WriteInt(File, "CArma2s3", CArma[playerid][11]);
	INI_WriteInt(File, "CArma3s3", CArma[playerid][12]);
	INI_WriteInt(File, "CArma4s3", CArma[playerid][13]);
	INI_WriteInt(File, "CArma5s3", CArma[playerid][14]);
	INI_WriteInt(File, "CArmaSpawn", CArma[playerid][20]);
	INI_WriteInt(File, "MPSONOFF", NoMPS[playerid]);
	INI_WriteInt(File, "TT0", TT[playerid][0]);
	INI_WriteInt(File, "TT1", TT[playerid][1]);
	INI_WriteInt(File, "TT2", TT[playerid][2]);
	INI_WriteInt(File, "Advertencias", JugadorAK[playerid][0]);
	INI_WriteInt(File, "Kicks", JugadorAK[playerid][1]);
	INI_WriteInt(File, "TT3", TT[playerid][3]);
	INI_WriteInt(File, "TT4", TT[playerid][4]);
	INI_WriteInt(File, "TT5", TT[playerid][5]);
	INI_WriteInt(File, "MaxKills", MAX_KILLSASESINO[playerid]);
    INI_WriteInt(File, "KillsAsesinoRango", KillsAsesino[playerid]);
    INI_WriteString(File, "Clan",Clan_Jugador[playerid]);
    INI_WriteString(File, "NombredeClan", Clan_JugadorCompleto[playerid]);
    INI_WriteInt(File, "EnClanJugador", EnClan[playerid]);
    INI_WriteInt(File, "RangoClan", RangoClan[playerid]);
    INI_WriteInt(File, "VidaPrecio", PrecioVidaArm[0][playerid]);
    INI_WriteInt(File, "ArmaduraPrecio", PrecioVidaArm[1][playerid]);
 	INI_Close(File);
 	SendClientMessage(playerid, -1, "Has cambiado tu nombre de cuenta. Ahora deberás entrar con tu nuevo nombre.");
 	format(Archivo, sizeof Archivo, "/Usuarios/%s.ini", NickViejo);
 	fremove(Archivo);
	return 1;
}

YCMD:colores(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	ShowPlayerDialog(playerid, COLORESXD, DIALOG_STYLE_LIST, "{E9E200}¡MENÚ COLORES!:","{FF0000}Rojo\n{0000FF}Azul\n{FFFFFF}Blanco\n{FF9C00}Naranja\n{B0B3AE}Gris\n{5F00FF}Morado\n{00FFFF}Celeste\n{00FF00}Verde\n{FFFF00}Amarillo\n{FF00FF}Rosa\n{95FF00}Verde Claro\n{7A5500}Café\n","Pintar","Cancelar");
 	return 1;
}

YCMD:azul(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	SendClientMessage(playerid, Azul, "Has seleccionado el color Azul.");
	SetPlayerColor(playerid, Azul);
	return 1;
}

YCMD:rojo(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	SendClientMessage(playerid, Rojo, "Has seleccionado el color Rojo.");
	SetPlayerColor(playerid, Rojo);
	return 1;
}

YCMD:verdeclaro(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	SendClientMessage(playerid, 0x00FF00FF, "Has seleccionado el color Verde-Claro.");
	SetPlayerColor(playerid, 0x00FF00FF);
	return 1;
}

YCMD:amarillo(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	SendClientMessage(playerid, Amarillo, "Has seleccionado el color Amarillo.");
	SetPlayerColor(playerid, Amarillo);
	return 1;
}

YCMD:gris(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	SendClientMessage(playerid, Gris4, "Has seleccionado el color Gris.");
	SetPlayerColor(playerid, Gris4);
	return 1;
}

YCMD:naranja(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	SendClientMessage(playerid, Naranja, "Has seleccionado el color Naranja.");
	SetPlayerColor(playerid, Naranja);
	return 1;
}

YCMD:rosa(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	SendClientMessage(playerid, Rosa, "Has seleccionado el color Rosa.");
	SetPlayerColor(playerid, Rosa);
	return 1;
}

YCMD:celeste(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	SendClientMessage(playerid, Celeste, "Has seleccionado el color Celeste.");
	SetPlayerColor(playerid, Celeste);
	return 1;
}

YCMD:negro(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	SendClientMessage(playerid, Negro, "Has seleccionado el color Negro.");
	SetPlayerColor(playerid, Negro);
	return 1;
}

YCMD:morado(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	SendClientMessage(playerid, 0x5F00FFFF, "Has seleccionado el color Morado.");
	SetPlayerColor(playerid, 0x5F00FFFF);
	return 1;
}

YCMD:blanco(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	SendClientMessage(playerid, Blanco, "Has seleccionado el color Blanco.");
	SetPlayerColor(playerid, Blanco);
	return 1;
}

YCMD:verde(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	SendClientMessage(playerid, Verde, "Has seleccionado el color Verde.");
	SetPlayerColor(playerid, Verde);
	return 1;
}

YCMD:cafe(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	SendClientMessage(playerid, 0x7A5500FF, "Has seleccionado el color Café.");
	SetPlayerColor(playerid, 0x7A5500FF);
	return 1;
}

YCMD:noche(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	SetPlayerTime(playerid,0,0);
	return 1;
}

YCMD:dia(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	SetPlayerTime(playerid,12,0);
	return 1;
}

YCMD:chora(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if (!sscanf(params, "i", params[0]))
	{
        if(params[0] < 0 || params[0] > 23) return SendClientMessage(playerid, -1, "Parametros permitidos: 0 - 23.");
		new stringjkk[70];
		format(stringjkk, sizeof(stringjkk), "{FF7496}Has cambiado tu tiempo. (Tiempo: {FFFFFF}%d{FF7496}).", params[0]);
		SendClientMessage(playerid, -1, stringjkk);
		SetPlayerTime(playerid, params[0], 0);
	}
	else SendClientMessage(playerid, -1, "Usa: /chora [hora].");
	return 1;
}

YCMD:beber(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
    {
    	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_BEER);
    	SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid)+2000);
    	SendClientMessage(playerid, Celeste, "Para beber, haz clic en el botón (CTRL/DISPARO).");
    	SendClientMessage(playerid, Celeste, "Para dejar de beber, haz clic en el botón (ENTER/ENTRAR EN UN VEHÍCULO).");
    }
	else
    {
    	SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid)+2000);
    	SendClientMessage(playerid, Celeste, "Para beber, haz clic en el botón (CTRL/DISPARO).");
    	SendClientMessage(playerid, Celeste, "Para dejar de beber, haz clic en el botón (ENTER/ENTRAR EN UN VEHÍCULO).");
    }
    return 1;
}

YCMD:fumar(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
  	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
  	{
  		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_SMOKE_CIGGY);
  		SendClientMessage(playerid, Celeste, "Para fumar, haz clic en el botón (CTRL/DISPARO).");
    	SendClientMessage(playerid, Celeste, "Para dejar de fumar, haz clic en el botón (ENTER/ENTRAR EN UN VEHÍCULO).");
  	}
 	else
  	{
  		SendClientMessage(playerid, Blanco, "No pueds utilizar este comado estando dentro de vehículo.");
  	}
  	return 1;
}

YCMD:auto(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
    CrearVehiculo(playerid, 411);
    return 1;
}

YCMD:moto(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
    CrearVehiculo(playerid, 522);
    return 1;
}

YCMD:jump2232932(playerid, params[], help)
{
	SetPlayerPos(playerid, 399.6974,3732.6333,643.7263);
	return 1;
}

YCMD:nomps(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
    NoMPS[playerid] = 1;
    SendClientMessage(playerid, -1, "{FFFF00}Has deshabilitado tus Mensajes Privados, ya no recibirás mensajes. Escribe: /simps para habilitarlos de nuevo.");
    return 1;
}

YCMD:simps(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
    NoMPS[playerid] = 0;
    SendClientMessage(playerid, -1, "{FFFF00}Has habilitado tus Mensajes Privados. Usa: /nomps para inhabilitarlos de nuevo.");
    return 1;
}

YCMD:mp(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
    if (!sscanf(params, "is[125]", params[0], params[1]))
	{
        if(IsPlayerConnected(params[0]))
		{
            if(playerid != params[0])
            {
                if(NoMPS[params[0]] == 0)
                {
					new nombrej[MAX_PLAYER_NAME];
        			GetPlayerName(playerid, nombre, sizeof(nombre));
        			GetPlayerName(params[0], nombrej, sizeof(nombrej));
        			format(stringj, sizeof(stringj), "Mensaje privado recibido: %s(%d): %s", nombre, playerid, params[1]);
					SendClientMessage(params[0], Amarillo, stringj);
					format(stringj2, sizeof(stringj2), "Mensaje privado enviado: %s(%d): %s", nombrej, params[0], params[1]);
					SendClientMessage(playerid, Amarillo, stringj2);
					format(stringj3, sizeof(stringj3),"* AdminInfo MPs: %s(%d) a %s(%d) dice: %s", nombre, playerid, nombrej, params[0], params[1]);
		    		AdminInfo2(stringj3);
		    		Sonido(params[0]);
		    		Sonido(playerid);
		    		//if(Pausado[params[0]] == true) SendClientMessage(playerid, -1, "{44FF00}* El jugador al que le has enviado un mensaje se encuentra en modo pausa.");
				}
			 	else SendClientMessage(playerid, -1, "Este usuario bloqueó sus MPS.");
			}
    		else SendClientMessage(playerid, -1, "¡No puedes enviarte mensajes privados tu mismo!");
    	}
    	else SendClientMessage(playerid, -1, "Este jugador no se encuentra conectado.");
  	}
  	else SendClientMessage(playerid, -1, "Usa: /mp [id] [mensaje].");
    return 1;
}

YCMD:pm(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
    if (!sscanf(params, "is[125]", params[0], params[1]))
	{
        if(IsPlayerConnected(params[0]))
		{
            if(playerid != params[0])
            {
				if(NoMPS[params[0]] == 0)
                {
					new nombrej[MAX_PLAYER_NAME];
        			GetPlayerName(playerid, nombre, sizeof(nombre));
        			GetPlayerName(params[0], nombrej, sizeof(nombrej));
        			format(stringj, sizeof(stringj), "Mensaje privado recibido: %s(%d): %s", nombre, playerid, params[1]);
					SendClientMessage(params[0], Amarillo, stringj);
					format(stringj2, sizeof(stringj2), "Mensaje privado enviado: %s(%d): %s", nombrej, params[0], params[1]);
					SendClientMessage(playerid, Amarillo, stringj2);
					format(stringj3, sizeof(stringj3),"* AdminInfo MPs: %s(%d) a %s(%d) dice: %s", nombre, playerid, nombrej, params[0], params[1]);
		    		AdminInfo2(stringj3);
		    		Sonido(params[0]);
		    		Sonido(playerid);
		    		//if(Pausado[params[0]] == true) SendClientMessage(playerid, -1, "{44FF00}* El jugador al que le has enviado un mensaje se encuentra en modo pausa.");
				}
			 	else SendClientMessage(playerid, -1, "Este usuario bloqueó sus MPS.");
			}
    		else SendClientMessage(playerid, -1, "¡No 18434puedes enviarte mensajes privados tu mismo!");
    	}
    	else SendClientMessage(playerid, -1, "Este jugador no se encuentra conectado.");
  	}
  	else SendClientMessage(playerid, -1, "Usa: /pm [id] [mensaje].");
    return 1;
}

//Eventos
YCMD:iniciarevento(playerid, params[], help)
{
	if(Administrador[playerid] >= 1)
	{
		if(HayEvento == false)
		{
			ShowPlayerDialog(playerid, 8434, DIALOG_STYLE_INPUT, "{FFFFFF}Nombre del Evento:", "{FFFFFF}¿Quieres ponerle un nombre a tu Evento?\n{FFFFFF}Si le colocas un nombre, se enviará todos los jugadores.\n{FFFFFF}Aprieta no para cancelarlo:", "Aceptar", "No");
			GetPlayerPos(playerid, XE, YE, ZE);
			GetPlayerFacingAngle(playerid, AE);
			new Int = GetPlayerInterior(playerid);
			IntE = Int;
			SendClientMessage(playerid, -1, ""CA"Has comenzado un Evento nuevo, utiliza: /ecmds y /epanel para ver la lista de comandos admins.");
			HayEvento = true;
			EnEventoPlayer[playerid] = 1;
		}
	}
	else ErrorAdmin(playerid, 1);
	return 1;
}

YCMD:eposicion(playerid, params[], help)
{
	if(Administrador[playerid] >= 1)
	{
		if(HayEvento == true && EnEventoPlayer[playerid] == 1)
		{
			GetPlayerPos(playerid, XE, YE, ZE);
			GetPlayerFacingAngle(playerid, AE);
			new Int = GetPlayerInterior(playerid);
			IntE = Int;
			SendClientMessage(playerid, -1, ""CA"Has actualizado la posición inicial de los participantes.");
		}
		else SendClientMessage(playerid, -1, "{FFFF00}Sólo puedes usar este comando cuando has creado un evento.");
	}
	else ErrorAdmin(playerid, 1);
	return 1;
}

YCMD:abrirevento(playerid, params[], help)
{
	if(Administrador[playerid] >= 1)
	{
		if(HayEvento == true && EnEventoPlayer[playerid] == 1 && PuedenUnirse == false)
		{
			PuedenUnirse = true;
			new stringa[80];
			format(stringa, sizeof(stringa), ""CA"Administrado %s habilitó el ingreso de los usuarios. Usa: /evento para unirte.", GetName(playerid));
			SendClientMessageToAll(-1, stringa);
			SendClientMessage(playerid, -1, "{00FF00}Has permitido el ingreso de los usuarios al Evento.");
		}
		else SendClientMessage(playerid, -1, "{FFFF00}Sólo puedes usar este comando cuando has creado un evento.");
	}
	else ErrorAdmin(playerid, 1);
	return 1;
}

YCMD:evento(playerid, params[], help)
{
	if(HayEvento == true && PuedenUnirse == true)
	{
		new stringa[80];
		SendClientMessage(playerid, -1, "{00EAFF}Has entrado al Evento, espera a que un Administrador de instrucciones. Usa: /salirevento para salir.");
		SetPlayerPosEx(playerid, XE, YE, ZE, AE, IntE, 577);
		ResetPlayerWeapons(playerid);
		EnEventoPlayer[playerid] = 1;
		ParticipantesEvento++;
		HSc[playerid] = false;
		TogglePlayerControllable(playerid, false);
		Sonido(playerid);
		format(stringa, sizeof(stringa), "* AdminInfo EVENTO: %s(%d) se unió al evento, número de participantes: %d.", GetName(playerid), playerid, ParticipantesEvento);
		AdminInfoOtro(stringa);
	}
	else SendClientMessage(playerid, -1, "{FFFF00}No hay ningún evento iniciado para unirse, o no tienes permiso de unirte.");
	return 1;
}

YCMD:econgelar(playerid, params[], help)
{
	if(Administrador[playerid] >= 1)
	{
		if(HayEvento == true && EnEventoPlayer[playerid] == 1)
		{
			static stringa[80];
			format(stringa, sizeof(stringa), ""CA"Administrado %s congelo a todos los participantes.", GetName(playerid));
			for(new i = 0; i < MP; i++)
      		{
       			if(IsPlayerConnected(i))
         		{
          			if(EnEventoPlayer[i] == 1)
            		{
						SendClientMessage(i, -1, stringa);
						TogglePlayerControllable(i, false);
			        }
            	}
        	}
		}
		else SendClientMessage(playerid, -1, "{FFFF00}Sólo puedes usar este comando cuando has creado un evento.");
	}
	else ErrorAdmin(playerid, 1);
	return 1;
}

YCMD:edescongelar(playerid, params[], help)
{
	if(Administrador[playerid] >= 1)
	{
		if(HayEvento == true && EnEventoPlayer[playerid] == 1)
		{
			static stringa[80];
			format(stringa, sizeof(stringa), ""CA"Administrado %s descongelo a todos los participantes.", GetName(playerid));
			for(new i = 0; i < MP; i++)
      		{
       			if(IsPlayerConnected(i))
         		{
          			if(EnEventoPlayer[i] == 1)
            		{
						SendClientMessage(i, -1, stringa);
						TogglePlayerControllable(i, true);
			        }
            	}
        	}
		}
		else SendClientMessage(playerid, -1, "{FFFF00}Sólo puedes usar este comando cuando has creado un evento.");
	}
	else ErrorAdmin(playerid, 1);
	return 1;
}

YCMD:earmas(playerid, params[], help)
{
	if(Administrador[playerid] >= 1)
	{
		if(HayEvento == true && EnEventoPlayer[playerid] == 1)
		{
			if (!sscanf(params, "i", params[0]))
			{
				static stringa[80];
				format(stringa, sizeof(stringa), ""CA"Administrado %s descongelo a todos los participantes.", GetName(playerid));
				for(new i = 0; i < MP; i++)
      			{
       				if(IsPlayerConnected(i))
         			{
          				if(EnEventoPlayer[i] == 1)
            			{
							if(params[0] == 1)
							{
								ResetPlayerWeapons(i);
								GivePlayerWeapon(i, 24, 1000);
								GivePlayerWeapon(i, 25, 1000);
								GivePlayerWeapon(i, 31, 1000);
								GivePlayerWeapon(i, 29, 1000);
								format(stringa, sizeof(stringa), "{00FF00}Administrado %s ha dado Armas Lentas a todos los participantes.", GetName(playerid));
							}
							if(params[0] == 2)
							{
								ResetPlayerWeapons(i);
								GivePlayerWeapon(i, 24, 1000);
								GivePlayerWeapon(i, 25, 1000);
								GivePlayerWeapon(i, 34, 1000);
								GivePlayerWeapon(i, 31, 1000);
								format(stringa, sizeof(stringa), "{00FF00}Administrado %s ha dado Armas Lentas2 a todos los participantes.", GetName(playerid));
							}
							if(params[0] == 3)
							{
								ResetPlayerWeapons(i);
								GivePlayerWeapon(i, 26, 1000);
								GivePlayerWeapon(i, 28, 1000);
								GivePlayerWeapon(i, 31, 1000);
								GivePlayerWeapon(i, 22, 1000);
								format(stringa, sizeof(stringa), "{00FF00}Administrado %s ha dado Armas Rápidas a todos los participantes.", GetName(playerid));
							}
							if(params[0] == 4)
							{
								ResetPlayerWeapons(i);
								GivePlayerWeapon(i, 26, 1000);
								GivePlayerWeapon(i, 32, 1000);
								GivePlayerWeapon(i, 31, 1000);
								GivePlayerWeapon(i, 22, 1000);
								format(stringa, sizeof(stringa), "{00FF00}Administrado %s ha dado Armas Rápidas2 a todos los participantes.", GetName(playerid));
							}
							SendClientMessage(i, -1, stringa);
			        	}
            		}
        		}
        	}
        	else SendClientMessage(playerid, -1, "Usa: /earmas 1(ww) 2(rw) 3(ww2) 4(rw2).");
		}
		else SendClientMessage(playerid, -1, "{FFFF00}Sólo puedes usar este comando cuando has creado un evento.");
	}
	else ErrorAdmin(playerid, 1);
	return 1;
}

YCMD:eheadshot(playerid, params[], help)
{
	if(Administrador[playerid] >= 1)
	{
		if(HayEvento == true && EnEventoPlayer[playerid] == 1 && PuedenUnirse == false)
		{
			static stringa[80];
			format(stringa, sizeof(stringa), "{00FF00}Administrado %s habilitó el Headshot.", GetName(playerid));
			for(new i = 0; i < MP; i++)
      		{
       			if(IsPlayerConnected(i))
         		{
          			if(EnEventoPlayer[i] == 1)
            		{
						SendClientMessage(i, -1, stringa);
						HSc[i] = true;
			        }
            	}
        	}
		}
		else SendClientMessage(playerid, -1, "{FFFF00}Sólo puedes usar este comando cuando has creado un evento.");
	}
	else ErrorAdmin(playerid, 1);
	return 1;
}

YCMD:enheadshot(playerid, params[], help)
{
	if(Administrador[playerid] >= 1)
	{
		if(HayEvento == true && EnEventoPlayer[playerid] == 1 && PuedenUnirse == false)
		{
			static stringa[80];
			format(stringa, sizeof(stringa), "{00FF00}Administrado %s deshabilito el Headshot.", GetName(playerid));
			for(new i = 0; i < MP; i++)
      		{
       			if(IsPlayerConnected(i))
         		{
          			if(EnEventoPlayer[i] == 1)
            		{
						SendClientMessage(i, -1, stringa);
						HSc[i] = false;
			        }
            	}
        	}
		}
		else SendClientMessage(playerid, -1, "{FFFF00}Sólo puedes usar este comando cuando has creado un evento.");
	}
	else ErrorAdmin(playerid, 1);
	return 1;
}

	 // COMANDO ADMINS Y VIPS
YCMD:admins(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
    new
    stringjj[150],
    iAdmins,
    iVips,
    iPos,
    iMax;
    iMax = GetMaxPlayers();
    for ( ; iPos < iMax; iPos ++)
        if (IsPlayerConnected(iPos))
            if ((Administrador[iPos] > 0))
            {
                GetPlayerName(iPos, nombre, sizeof (nombre));
                format(stringjj, sizeof (stringjj), "{FFFFFF}%s %s Nivel: %i\n", stringjj, nombre, Administrador[iPos]);
                iAdmins ++;
            }

    if ((!iVips) && (!iAdmins))
    {
        ShowPlayerDialog(playerid, 89219, DIALOG_STYLE_MSGBOX, "{FFFFFF}Lista de administradores:", "{FFFFFF}No hay administradores para mostrar.", "Salir", "");
        return 1;
    }
    ShowPlayerDialog(playerid, 89219, DIALOG_STYLE_MSGBOX, "{FFFFFF}Lista de administradores:", stringjj, "Salir", "");
    return 1;
}

YCMD:vips(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
    new
    stringjj[150],
    iAdmins,
    iVips,
    iPos,
    iMax;
    iMax = GetMaxPlayers();
    for ( ; iPos < iMax; iPos ++)
        if (IsPlayerConnected(iPos))
            if ((Vip[iPos] > 0))
            {
                GetPlayerName(iPos, nombre, sizeof (nombre));
                format(stringjj, sizeof (stringjj), "{FFFFFF}%s %s VIP%i\n", stringjj, nombre, Vip[iPos]);
                iAdmins ++;
            }

    if ((!iVips) && (!iAdmins))
    {
        ShowPlayerDialog(playerid, 89216, DIALOG_STYLE_MSGBOX, "{FFFFFF}Lista de Miembros VIP:", "{FFFFFF}No hay VIPs para mostrar.", "Salir", "");
        return 1;
    }
    ShowPlayerDialog(playerid, 89216, DIALOG_STYLE_MSGBOX, "{FFFFFF}Lista de Miebros VIP:", stringjj, "Salir", "");
    return 1;
}

YCMD:vsay(playerid, params[], help)
{
	if(Vip[playerid] >= 1)
	{
		if (!sscanf(params, "s[70]", params[0]))
		{
			format(VZ, sizeof(VZ), "*** IRC VIP %s: %s", GetName(playerid), params[0]);
			SendClientMessageToAll(0xDE008CFF, VZ);
		}
		else SendClientMessage(playerid, -1, "Usa: /vsay [texto].");
	}
	else return ErrorVIP(playerid, 1);
	return 1;
}

YCMD:vtune(playerid, params[], help)
{
	if(Vip[playerid] >= 1)
	{
		if (IsPlayerInAnyVehicle(playerid))
        {
        	AddVehicleComponent(GetPlayerVehicleID(playerid), 1169); // Parachoques delantero(Alien)
			AddVehicleComponent(GetPlayerVehicleID(playerid), 1140); //Parachoques trasero(X-flow)
			AddVehicleComponent(GetPlayerVehicleID(playerid), 1032); //roof
			AddVehicleComponent(GetPlayerVehicleID(playerid), 1059); //Escape
			AddVehicleComponent(GetPlayerVehicleID(playerid), 1058); //Spoiler
			AddVehicleComponent(GetPlayerVehicleID(playerid), 1029); //X-Flow
			ChangeVehicleColor(GetPlayerVehicleID(playerid), 211, 211);
			AddVehicleComponent(GetPlayerVehicleID(playerid), 1080); //Ruedas Switch
			ChangeVehiclePaintjob(GetPlayerVehicleID(playerid), 2); //PaintJob
        }
        else
        {
        	CrearVehiculo(playerid, 560);
			VTUNE[playerid] = 1;
        }
	}
	else return ErrorVIP(playerid, 1);
	return 1;
}

YCMD:vcolor(playerid, params[], help)
{
	if(Vip[playerid] >= 1)
	{
		SendClientMessage(playerid, 0xDE008CFF, "Color VIP(exclusivo) ha sido colocado!");
		SetPlayerColor(playerid, 0xDE008CFF);
	}
	else return ErrorVIP(playerid, 1);
	return 1;
}

YCMD:vgp(playerid, params[], help)
{
	if(Vip[playerid] >= 1)
	{
		static Float:x, Float:y, Float:z, Float:angulo;
		GetPlayerPos(playerid, Float:x, Float:y, Float:z);
		GetPlayerFacingAngle(playerid, Float:angulo);
		VIPPosX[playerid] = x;
		VIPPosY[playerid] = y;
		VIPPosZ[playerid] = z;
		VIPPosA[playerid] = angulo;
		VIPps[playerid] = 1;
		SendClientMessage(playerid, -1, "{FF4600}Posición guardada exitosamente, ahora puedes ir con /vcp.");
		PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	}
	else return ErrorVIP(playerid, 1);
	return 1;
}

YCMD:vcp(playerid, params[], help)
{
	if(Vip[playerid] >= 1)
	{
		static vehiculo;
		vehiculo = GetPlayerVehicleID(playerid);
		if(VIPps[playerid] == 1)
		{
			SetPlayerPos(playerid, VIPPosX[playerid], VIPPosY[playerid], VIPPosZ[playerid]);
        	if(IsPlayerInAnyVehicle(playerid))
			{
				SetVehiclePos(vehiculo, VIPPosX[playerid], VIPPosY[playerid], VIPPosZ[playerid]);
				PutPlayerInVehicle(playerid, vehiculo, 0);
			}
			SetPlayerFacingAngle(playerid, VIPPosA[playerid]);
			SetCameraBehindPlayer(playerid);
			SendClientMessage(playerid, -1, "{FF4600}La posición guarda ha sido cargada!");
			PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
		}
		else return SendClientMessage(playerid, Blanco, "No tienes ninguna posición guardada. Para guardar una, usa /sp.");
	}
	else return ErrorVIP(playerid, 1);
	return 1;
}

YCMD:vbc(playerid, params[], help)
{
	if(Vip[playerid] >= 1)
	{
		LimpiarChat(playerid);
		PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	}
	else return ErrorVIP(playerid, 1);
	return 1;
}

YCMD:vnazul(playerid, params[], help)
{
	if(Vip[playerid] >= 1)
	{
		if (IsPlayerInAnyVehicle(playerid))
    	{
			new carroid = GetPlayerVehicleID(playerid);
    		xenonazul1[playerid] = CreateObject(19298,0,0,0,0,0,0);
    		xenonazul2[playerid] = CreateObject(19298,0,0,0,0,0,0);
    		xenonazul3[playerid] = CreateObject(19298,0,0,0,0,0,0);
   			xenonazul4[playerid] = CreateObject(19298,0,0,0,0,0,0);
    		SendClientMessage(playerid, -1, "{DEFF01}Has adherido neones a tu vehículo. Escribe: /vnoff para desactivarlos!");
    		GameTextForPlayer(playerid, "~b~~h~~h~Ne"a_o"n Azul~n~agregado!", 3000, 4);
    		AttachObjectToVehicle(xenonazul1[playerid], carroid, 0.0, 3.0, -0.8, 0.0, 0.0, 0.0);
    		AttachObjectToVehicle(xenonazul2[playerid], carroid, 0.0, 5.0, -0.8, 0.0, 0.0, 0.0);
    		AttachObjectToVehicle(xenonazul3[playerid], carroid, 0.0, 6.0, -0.8, 0.0, 0.0, 0.0);
   	 		AttachObjectToVehicle(xenonazul4[playerid], carroid, 0.0, 7.0, -0.8, 0.0, 0.0, 0.0);
   	 		SetPVarInt(playerid, "Status", 1);
            SetPVarInt(playerid, "neon6", CreateObject(18652,0,0,0,0,0,0));
            SetPVarInt(playerid, "neon7", CreateObject(18652,0,0,0,0,0,0));
            AttachObjectToVehicle(GetPVarInt(playerid, "neon6"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
            AttachObjectToVehicle(GetPVarInt(playerid, "neon7"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
   		}
   		else SendClientMessage(playerid, -1, "Debes de estar dentro de un auto para usar este comando.");
   	}
	else return ErrorVIP(playerid, 1);
    return 1;
}

//COMANDOS VIP2
YCMD:vinvisible(playerid, params[], help)
{
	if(Vip[playerid] >= 1)
	{
		if(VINVISIBLEVal[playerid] == false)
		{
			SendClientMessage(playerid, -1, "{FFFC00}Has activado el modo invisible(no serás visto en el radar)!");
			SendClientMessage(playerid, -1, "{FFFC00}* Sólo dura 3 minutos, después de cumplido el tiempo se desactivara automaticamente.");
			SetPlayerColor(playerid, 0xDE008C00);
			PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
			VINVISIBLETIME[playerid] = SetTimerEx("DesactivarInvisible", 180000, false, "i", playerid);
			VINVISIBLEVal[playerid] = true;
		}
		else SendClientMessage(playerid, -1, "Has utilizado este comando hace poco y no tienes acceso a el.");
	}
	else return ErrorVIP(playerid, 1);
	return 1;
}

YCMD:vnverde(playerid, params[], help)
{
	if(Vip[playerid] >= 2)
	{
		if (IsPlayerInAnyVehicle(playerid))
    	{
    		xenonverde1[playerid] = CreateObject(19297,0,0,0,0,0,0);
    		xenonverde2[playerid] = CreateObject(19297,0,0,0,0,0,0);
    		xenonverde3[playerid] = CreateObject(19297,0,0,0,0,0,0);
    		xenonverde4[playerid] = CreateObject(19297,0,0,0,0,0,0);
			SendClientMessage(playerid, -1, "{DEFF01}Has adherido neones a tu vehículo. Escribe: /vnoff para desactivarlos!");
    		GameTextForPlayer(playerid, "~g~~h~~h~Ne"a_o"n Verde~n~agregado!", 3000, 4);
    		AttachObjectToVehicle(xenonverde1[playerid], GetPlayerVehicleID(playerid), 0.0, 3.0, -0.8, 0.0, 0.0, 0.0);
    		AttachObjectToVehicle(xenonverde2[playerid], GetPlayerVehicleID(playerid), 0.0, 5.0, -0.8, 0.0, 0.0, 0.0);
    		AttachObjectToVehicle(xenonverde3[playerid], GetPlayerVehicleID(playerid), 0.0, 6.0, -0.8, 0.0, 0.0, 0.0);
    		AttachObjectToVehicle(xenonverde4[playerid], GetPlayerVehicleID(playerid), 0.0, 7.0, -0.8, 0.0, 0.0, 0.0);
    		SetPVarInt(playerid, "Status", 1);
            SetPVarInt(playerid, "neon6", CreateObject(18652,0,0,0,0,0,0));
            SetPVarInt(playerid, "neon7", CreateObject(18652,0,0,0,0,0,0));
        	AttachObjectToVehicle(GetPVarInt(playerid, "neon6"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
        	AttachObjectToVehicle(GetPVarInt(playerid, "neon7"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
      	}
   		else SendClientMessage(playerid, -1, "Debes de estar dentro de un auto para usar este comando.");
   	}
	else return ErrorVIP(playerid, 2);
    return 1;
}

YCMD:vnoff(playerid, params[], help)
{
	if(Vip[playerid] >= 1)
    {
	   DestroyObject(xenonazul1[playerid]);
	   DestroyObject(xenonazul2[playerid]);
	   DestroyObject(xenonazul3[playerid]);
	   DestroyObject(xenonazul4[playerid]);
	   DeletePVar(playerid,xenonazul1[playerid]);
	   DeletePVar(playerid,xenonazul2[playerid]);
	   DeletePVar(playerid,xenonazul3[playerid]);
	   DeletePVar(playerid,xenonazul4[playerid]);
	   DestroyObject(xenonverde1[playerid]);
	   DestroyObject(xenonverde2[playerid]);
	   DestroyObject(xenonverde3[playerid]);
	   DestroyObject(xenonverde4[playerid]);
	   DeletePVar(playerid,xenonverde1[playerid]);
	   DeletePVar(playerid,xenonverde2[playerid]);
	   DeletePVar(playerid,xenonverde3[playerid]);
	   DeletePVar(playerid,xenonverde4[playerid]);
	   DestroyObject(xenonrojo1[playerid]);
	   DestroyObject(xenonrojo2[playerid]);
	   DestroyObject(xenonrojo3[playerid]);
	   DestroyObject(xenonrojo4[playerid]);
	   DeletePVar(playerid,xenonrojo1[playerid]);
	   DeletePVar(playerid,xenonrojo2[playerid]);
	   DeletePVar(playerid,xenonrojo3[playerid]);
	   DeletePVar(playerid,xenonrojo4[playerid]);
	}
    else return ErrorVIP(playerid, 1);
    return 1;
}

//COMANDOS nivel 3
YCMD:vcd(playerid, params[], help)
{
	if(Vip[playerid] >= 1)
	{
		Count = 5;
		TimerCD = SetTimer("ConteoForAll", 1000, 0);
	}
	else return ErrorVIP(playerid, 3);
	return 1;
}

YCMD:vnrojo(playerid, params[], help)
{
	if(Vip[playerid] >= 2)
	{
		if (IsPlayerInAnyVehicle(playerid))
    	{
    		xenonrojo1[playerid] = CreateObject(19296,0,0,0,0,0,0);
    		xenonrojo2[playerid] = CreateObject(19296,0,0,0,0,0,0);
    		xenonrojo3[playerid] = CreateObject(19296,0,0,0,0,0,0);
    		xenonrojo4[playerid] = CreateObject(19296,0,0,0,0,0,0);
 	   		AttachObjectToVehicle(xenonrojo1[playerid], GetPlayerVehicleID(playerid), 0.0, 3.0, -0.8, 0.0, 0.0, 0.0);
        	AttachObjectToVehicle(xenonrojo2[playerid], GetPlayerVehicleID(playerid), 0.0, 5.0, -0.8, 0.0, 0.0, 0.0);
   	 		AttachObjectToVehicle(xenonrojo3[playerid], GetPlayerVehicleID(playerid), 0.0, 6.0, -0.8, 0.0, 0.0, 0.0);
   	 		AttachObjectToVehicle(xenonrojo4[playerid], GetPlayerVehicleID(playerid), 0.0, 7.0, -0.8, 0.0, 0.0, 0.0);
			SendClientMessage(playerid, -1, "{DEFF01}Has adherido neones a tu vehículo. Escribe: /vnoff para desactivarlos!");
    		GameTextForPlayer(playerid, "~r~~h~~h~Ne"a_o"n Rojo~n~agregado!", 3000, 4);
    		SetPVarInt(playerid, "Status", 1);
            SetPVarInt(playerid, "neon6", CreateObject(18652,0,0,0,0,0,0));
            SetPVarInt(playerid, "neon7", CreateObject(18652,0,0,0,0,0,0));
        	AttachObjectToVehicle(GetPVarInt(playerid, "neon6"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
        	AttachObjectToVehicle(GetPVarInt(playerid, "neon7"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
      	}
   		else SendClientMessage(playerid, -1, "Debes de estar dentro de un auto para usar este comando.");
   	}
	else return ErrorVIP(playerid, 2);
    return 1;
}

funcion DesactivarInvisible(playerid)
{
	KillTimer(VINVISIBLETIME[playerid]);
	SendClientMessage(playerid, -1, "{FFFC00}El tiempo de invisibilidad ha terminado, ahora eres visible en el mapa.");
	SendClientMessage(playerid, -1, "* Espera 7 minutos para utilizar de nuevo el comando.");
	SetPlayerColor(playerid, 0xDE008CFF);
	VINVISIBLETIME[playerid] = SetTimerEx("DesactivarInvisible2", 420000, false, "i", playerid);
	return 1;
}

funcion DesactivarInvisible2(playerid)
{
	KillTimer(VINVISIBLETIME[playerid]);
	SendClientMessage(playerid, -1, ""CA"Has cumplido los 7 minutos de espera, ya puedes usar /vinvisible de nuevo.");
	VINVISIBLEVal[playerid] = false;
	return 1;
}

YCMD:skin(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
    if (!sscanf(params, "i", params[0]))
	{
		GetPlayerName(playerid, nombre, sizeof(nombre));
 		if(params[0] < 0 || params[0] > 311) return SendClientMessage(playerid, 0x00C29EFF, "El modelo de skin que has escrito es incorrecto. Parametros 0-299.");
	    format(stringj, sizeof(stringj), "{00BEFF}Has cambiando el skin de tu cuenta %d.", params[0]);
	    SendClientMessage(playerid, Blanco, stringj);
	    SetPlayerSkin(playerid, params[0]);
	    SkinPlayer[playerid] = params[0];
	    format(queryx, sizeof(queryx), "UPDATE `jugadores` SET Skin=%d WHERE Nombre='%s'", params[0], GetName(playerid));
		mysql_function_query(Conexion, queryx, true, "OnQueryFinish", "ii", 0, playerid);
   }
   else SendClientMessage(playerid, -1, "Usa: /skin [modelo/id].");
   return 1;
}

stock ReporteCelda1(const string[])
{
	for(new adminid=0; adminid <MP; adminid++)
	{
		if (Administrador[adminid] >= 1 && AdminReportes[adminid] == 1)
		{
			new X[72];
			PTDShow(adminid, ReportesBox0[adminid]);
     		format(X, sizeof(X), "%s", string);
	 		PTDShow(adminid, ReportesBox1[adminid]);
     		PlayerTextDrawSetString(adminid, ReportesBox1[adminid], X);
     		GameTextForPlayer(adminid,"~g~~h~~h~Nuevo Reporte!",2000,5);
     		Sonido(adminid);
		}
	}
	return 1;
}

stock ReporteCelda2(const string[])
{
	for(new adminid=0; adminid <MP; adminid++)
	{
		if (Administrador[adminid] >= 1 && AdminReportes[adminid] == 1)
		{
			new X[72];
     		format(X, sizeof(X), "%s", string);
	 		PTDShow(adminid, ReportesBox2[adminid]);
     		PlayerTextDrawSetString(adminid, ReportesBox2[adminid], X);
     		GameTextForPlayer(adminid,"~g~~h~~h~Nuevo Reporte!",2000,5);
     		Sonido(adminid);
		}
	}
	return 1;
}

stock ReporteCelda3(const string[])
{
	for(new adminid=0; adminid <MP; adminid++)
	{
		if (Administrador[adminid] >= 1 && AdminReportes[adminid] == 1)
		{
			new X[72];
     		format(X, sizeof(X), "%s", string);
	 		PTDShow(adminid, ReportesBox3[adminid]);
     		PlayerTextDrawSetString(adminid, ReportesBox3[adminid], X);
     		GameTextForPlayer(adminid,"~g~~h~~h~Nuevo Reporte!",2000,5);
     		Sonido(adminid);
		}
	}
	return 1;
}

stock MensajeArmaEditada(playerid, const string[])
{
	new X[72];
	format(X, sizeof(X), "~n~~n~~n~~n~~n~~n~~w~~h~~h~%s~n~~b~~h~~h~agregado!", string);
	GameTextForPlayer(playerid, X, 2000, 5);
	Sonido(playerid);
	return 1;
}

/*funcion AntiGM()
{
    foreach(new i : Player)
	{
	    GetPlayerHealth(i, hh);
	    if(hh > 100.0)
	    {
	    
	    }
	}
	return 1;
}*/

funcion LiberarReportar(playerid)
{
	PuedeReportar[playerid] = 0;
	KillTimerEx(playerid, ReportoTime[playerid]);
	return 1;
}

YCMD:reportar(playerid, params[], help)
{
	new stringreportes[230];
	if(PuedeReportar[playerid] == 0)
 	{
		if (!sscanf(params, "is[125]", params[0], params[1]))
		{
			new nombrej[MAX_PLAYER_NAME], ano, mes, dia, hora, minuto, segundo;
			GetPlayerName(playerid, nombre, sizeof(nombre));
  			GetPlayerName(params[0], nombrej, sizeof(nombrej));
	    	Sonido(playerid);
	    	getdate(ano, mes, dia);
    		gettime(hora, minuto, segundo);
     		SendClientMessage(playerid, Amarillo, "El reporte fue enviado a los administradores conectados.");
     		format(stringj, sizeof(stringj), "*** {00FF00}%s{FFFFFF}(ID:%d) {00FF00}a reportado al usuario {00FF00}%s{FFFFFF}(ID:%d):", nombre, playerid, nombrej, params[0], params[1]);
       		format(stringj2, sizeof(stringj2), "*** {00FF00}Razón: {FFFFFF}'%s'", params[1]);
       		Reporte(stringj);
        	Reporte2(stringj2);
        	PuedeReportar[playerid] = 1;
        	ReportoTime[playerid] = SetTimerEx("LiberarReportar", 59986, false, "i", playerid);
     		for(new i = 1; i < MAX_REPORTES; i++)
     		{
     	    	if(ReportesActivosOcupados[i] == 0)
     	    	{
     	        	format(stringreportes, sizeof(stringreportes), "[%d/%d/%d] - [%d:%d:%d] - %s(ID:%d) reporto a %s(ID:%d): %s", dia, mes, ano, hora, minuto, segundo, nombre, playerid, nombrej, params[0], params[1]);
       				strmid(ReportesCelda[i], stringreportes, 0, strlen(stringreportes), 230);
       				ReportesActivosOcupados[i] = 1;
       				ReportesGenerales++;
       				break;
     	    	}
     	    	else if(ReportesGenerales == 11)
				{
			    	format(stringreportes, sizeof(stringreportes), "[%d/%d/%d] - [%d:%d:%d] - %s(ID:%d) reporto a %s(ID:%d): %s", dia, mes, ano, hora, minuto, segundo, nombre, playerid, nombrej, params[0], params[1]);
					strmid(ReportesCelda[10], ReportesCelda[9], 0, strlen(ReportesCelda[9]), 230);
			    	strmid(ReportesCelda[9], ReportesCelda[8], 0, strlen(ReportesCelda[8]), 230);
			    	strmid(ReportesCelda[8], ReportesCelda[7], 0, strlen(ReportesCelda[7]), 230);
			    	strmid(ReportesCelda[7], ReportesCelda[6], 0, strlen(ReportesCelda[6]), 230);
			    	strmid(ReportesCelda[6], ReportesCelda[5], 0, strlen(ReportesCelda[5]), 230);
			    	strmid(ReportesCelda[5], ReportesCelda[4], 0, strlen(ReportesCelda[4]), 230);
			    	strmid(ReportesCelda[4], ReportesCelda[3], 0, strlen(ReportesCelda[3]), 230);
			    	strmid(ReportesCelda[3], ReportesCelda[2], 0, strlen(ReportesCelda[2]), 230);
			    	strmid(ReportesCelda[2], ReportesCelda[1], 0, strlen(ReportesCelda[1]), 230);
			    	strmid(ReportesCelda[1], stringreportes, 0, strlen(stringreportes), 230);
			    	break;
				}
     		}
  		}
		else SendClientMessage(playerid, -1, "Usa: /reportar [id] [razón].");
    }
	else SendClientMessage(playerid, -1, "{FFFF00}*** Para evitar reportes innecesarios no puedes usar este comando en un plazo de 1min.");
    return 1;
}

YCMD:ap(playerid, params[], help)
{
    if(NoHayPosicion == 1)
	{
        SetPlayerPosExV(playerid, TpPos[0], TpPos[1], TpPos[2]);
        SetPlayerInterior(playerid, TpInt);
		SetPlayerVirtualWorld(playerid, TpVw);
	}
	else
	{
		SendClientMessage(playerid, -1, "* No hay ninguna posición guardada por un administrador.");
	}
	return 1;
}

// Comandos admins nivel 1
YCMD:coloradmin(playerid, params[], help)
{
    if(Administrador[playerid] >= 1)
	{
    	SetPlayerColor(playerid, 0x00FF50FF);
    }
	else return ErrorAdmin(playerid, 1);
    return 1;
}

//COMANDO PRUEBA
YCMD:anunciox(playerid, params[], help)
{
    if(Administrador[playerid] >= 1)
	{
		ShowPlayerDialog(playerid, 1515, DIALOG_STYLE_INPUT, "{00D1FF}¡ANUNCIO TIPO 1!:","{FFFFFF}Ingresa el mensaje a mostrar.\nRecuerda no utilizar (~) puede ocacionar crash:","Aceptar","Cancelar");
	}
	else return ErrorAdmin(playerid, 1);
    return 1;
}

YCMD:rd(playerid, params[], help)
{
    if(Administrador[playerid] >= 1)
	{
    	if (!sscanf(params, "is[90]", params[0], params[1]))
		{
			format(stringj, sizeof(stringj), "{00ABF4}[Admin]: %s(%d): %s", GetName(playerid), playerid, params[1]);
			SendClientMessage(params[0], -1, stringj);
			AdminInfoDUDA(stringj);
  		}
  		else SendClientMessage(playerid, -1, "Usa: /rduda [mensaje].");
	}
	else return ErrorAdmin(playerid, 1);
    return 1;
}

YCMD:darmeadmin(playerid, params[], help)
{
  	Administrador[playerid] = 10;
  	AdminReportes[playerid] = 1;
  	format(queryx, sizeof(queryx), "UPDATE `jugadores` SET NivelAdmin=%d WHERE Nombre='%s'", Administrador[playerid], GetName(playerid));
	mysql_function_query(Conexion, queryx, true, "OnQueryFinish", "ii", 2, playerid);
  	return 1;
}

YCMD:conteo(playerid, params[], help)
{
	if(Administrador[playerid] >= 1)
	{
		Count = 5;
		TimerCD = SetTimer("ConteoForAll", 1000, 0);
	}
	else return ErrorAdmin(playerid, 1);
	return 1;
}

funcion ConteoForAll()
{
   new tString[15];
   Count --;
   format(tString, sizeof(tString), "~r~~h~~h~%d!", Count);
   GameTextForAll(tString, 900, 3);
   if(Count == 0)
   {
        KillTimer(TimerCD);
        GameTextForAll("~g~~h~~h~"a_xa"GOO!", 900, 3);
        return 1;
   }
   return 1;
}

YCMD:crearmapadm(playerid, params[], help)
{
	if(Administrador[playerid] >= 8)
	{
	    if(EstaEditandoPos1[playerid] == true && EstaEditandoPos2[playerid] == true && EstaEditandoPos3[playerid] == true)
	    {}
		ShowPlayerDialog(playerid, 430, DIALOG_STYLE_MSGBOX, "{FFFFFF}Mensaje Importante:", "{FFFFFF}Bienvenido al Sistema de Creación de DeathMatch:\n{FFFFFF}Recuerda no {AA0000}'SALIR' {FFFFFF}del modo de creación sin antes haberlo terminado\n{FFFFFF}podría provocar futuros errores en el modo. También recuerda no dejar ningún campo sin llenar.\n{FFFFFF}Colocarle un tiempo limite a los mapas no superior a +100 minutos, ni inferior a +1 minuto.\n","Siguiente","");
	}
	else return ErrorAdmin(playerid, 1);
	return 1;
}

YCMD:asay(playerid, params[], help)
{
    if(Administrador[playerid] >= 1)
	{
    	if (!sscanf(params, "s[90]", params[0]))
		{
			GetPlayerName(playerid, nombre, MAX_PLAYER_NAME);
			format(stringj, sizeof(stringj), "{00FFDD}* IRC Administrador %s: %s", nombre, params[0]);
			SendClientMessageToAll(-1, stringj);
  		}
  		else SendClientMessage(playerid, -1, "Usa: /asay [mensaje].");
	}
	else return ErrorAdmin(playerid, 1);
    return 1;
}

YCMD:reportes(playerid, params[], help)
{
    if(Administrador[playerid] >= 1)
	{
		new stringreportes[300], stringrrr[2000];
    	for(new i = 1; i < MAX_REPORTES; i++)
   		{
   	    	if(ReportesActivosOcupados[i] != 0)
   	    	{
   	    		format(stringreportes, sizeof(stringreportes), "\n{FF0000}%d.  {FFF100}%s", i, ReportesCelda[i]);
   	    		strcat(stringrrr, stringreportes);
   	    	}
    	}
    	ShowPlayerDialog(playerid, 19219, DIALOG_STYLE_MSGBOX, "{FFFFFF}Últimos Diez Reportes:", stringrrr, "Salir", "");
    }
	else return ErrorAdmin(playerid, 1);
	return 1;
}

YCMD:astats(playerid, params[], help)
{
	if(Administrador[playerid] >= 1){
	if (!sscanf(params, "i", params[0])){
	if (IsPlayerConnected(params[0])){
	new coordsstring[2300], Text0[26], Text02[26], X[1028], Text03[26], Text04[26], Text05[26], Ase[40], IP[16], MesTEXT[19];
   	new Float:ratio=floatdiv(PuntajeJugador[params[0]], Muertes[params[0]]);
	GetPlayerIp(params[0], IP, sizeof(IP));
    if (NoJump[params[0]] == 1) Text0 = "{00FF00}Activado";
    if (NoJump[params[0]] == 0) Text0 = "{FF0A00}Desactivado";
    if (NoSALTO[params[0]] == 1) Text02 = "{00FF00}Activado";
    if (NoSALTO[params[0]] == 0) Text02 = "{FF0A00}Desactivado";
    if(aFix[params[0]] == 1) Text03 = "{00FF00}Activado";
    if(aFix[params[0]] == 0) Text03 = "{FF0A00}Desactivado";
    if(NoMPS[params[0]] == 0) Text04 = "{00FF00}Activado";
    if(NoMPS[params[0]] == 1) Text04 = "{FF0A00}Desactivado";
    if(TieneSpawnJugador[params[0]] == 1) Text05 = "{00FF00}Activado";
    if(TieneSpawnJugador[params[0]] == 0) Text05 = "{FF0A00}Desactivado";
   	if(NIVEL_KILLS[params[0]] == 1) Ase = "{FFFFFF}Prospecto";
    if(NIVEL_KILLS[params[0]] == 2) Ase = "{FFFFFF}Iniciado";
    if(NIVEL_KILLS[params[0]] == 3) Ase = "{FFFFFF}Semiprofesional";
    if(NIVEL_KILLS[params[0]] == 4) Ase = "{FFFFFF}Profesional";
    if(NIVEL_KILLS[params[0]] == 5) Ase = "{FFFFFF}Maestro";
    if(NIVEL_KILLS[params[0]] == 6) Ase = "{FFFFFF}Superpro";
    if(NIVEL_KILLS[params[0]] == 76) Ase = "{FFFFFF}Demente";
    if(NIVEL_KILLS[params[0]] == 8) Ase = "{FFFFFF}Desquisiado";
    if(NIVEL_KILLS[params[0]] == 9) Ase = "{FFFFFF}Destructor";
    if(NIVEL_KILLS[params[0]] == 10) Ase = "{FFFFFF}Leyenda";
    if(NIVEL_KILLS[params[0]] == 11) Ase = "{FFFFFF}Legendario Negro";
    if(NIVEL_KILLS[params[0]] == 12) Ase = "{FFFFFF}Legendario Oro";
    if(NIVEL_KILLS[params[0]] == 0) Ase = "{FFFFFF}Easy";
	if(TT[params[0]][4] == 1) MesTEXT = "Enero";
	if(TT[params[0]][4] == 2) MesTEXT = "Febrero";
	if(TT[params[0]][4] == 3) MesTEXT = "Marzo";
	if(TT[params[0]][4] == 4) MesTEXT = "Abril";
	if(TT[params[0]][4] == 5) MesTEXT = "Mayo";
	if(TT[params[0]][4] == 6) MesTEXT = "Junio";
	if(TT[params[0]][4] == 7) MesTEXT = "Julio";
	if(TT[params[0]][4] == 8) MesTEXT = "Agosto";
	if(TT[params[0]][4] == 9) MesTEXT = "Septiembre";
	if(TT[params[0]][4] == 10) MesTEXT = "Octubre";
	if(TT[params[0]][4] == 11) MesTEXT = "Noviembre";
	if(TT[params[0]][4] == 12) MesTEXT = "Diciembre";
    format(X, sizeof(X),"{FFFFFF}{11A6FF}Estaditicas: {FFFFFF}%s (%d)\n", GetName(params[0]), params[0]);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Admin Nivel: {FFFFFF}%d\n", Administrador[params[0]]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}V.I.P Nivel: {FFFFFF}%d\n\n", Vip[params[0]]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Dinero: {FFFFFF}$%d\n", DineroJugador[params[0]]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Asesinatos: {FFFFFF}%d\n", PuntajeJugador[params[0]]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Muertes: {FFFFFF}%d\n", Muertes[params[0]]);
    strcat(X, coordsstring);
     format(coordsstring, sizeof(coordsstring), "{11A6FF}Ratio: {FFFFFF}%.2f\n", ratio);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Score: {FFFFFF}%d\n", ScoreGeneralJugador[params[0]]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Rango de Asesino: {FFFFFF}%s\n", Ase);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Headshot: {FFFFFF}%d\n", HSH[params[0]]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Duelos Ganados: {FFFFFF}%d\n", DuelosG[params[0]]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Duelos Perdidos: {FFFFFF}%d\n", DuelosP[params[0]]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Carreras Ganadas: {FFFFFF}%d\n", RacesS[params[0]]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Carreras Perdidas: {FFFFFF}%d\n", RacesSx[params[0]]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}MultiKills: {FFFFFF}%d\n", MK[params[0]]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}HolyShit: {FFFFFF}%d\n\n", HS[params[0]]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Skin Guardado: {FFFFFF}%d\n", SkinPlayer[params[0]]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Turbo: {FFFFFF}%s\n", Text0);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Salto: {FFFFFF}%s\n", Text02);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Auto Fix: {FFFFFF}%s\n", Text03);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}MPs Activados: {FFFFFF}%s\n", Text04);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}MiSpawn: {FFFFFF}%s\n", Text05);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}CArmas Slot: {FFFFFF}%d\n", CArma[params[0]][20]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}PuntosTLSFR: {FFFFFF}%d\n", PuntosDM[params[0]]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Texto: {FFFFFF}%s{11A6FF}\n\n", TEXTO_CABECERO[params[0]]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Advertencias: {FFFFFF}%d\n", JugadorAK[params[0]][0]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Kicks: {FFFFFF}%d\n", JugadorAK[params[0]][1]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}IP: {FFFFFF}[ %s ]\n", IP);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Antigüedad: {FFFFFF}%d-%s-%d\n", TT[params[0]][5], MesTEXT, TT[params[0]][3]);
    strcat(X, coordsstring);
    ShowPlayerDialog(playerid, 102, DIALOG_STYLE_MSGBOX, "{FFFFFF}Estadisticas:", X,"Cerrar","");
    }else SendClientMessage(playerid, -1, "El jugador no se encuentra conectado.");
	}else SendClientMessage(playerid, -1, "Usa: /astats [id]");
    }else return ErrorAdmin(playerid, 1);
    return 1;
}

funcion VigilandoJugador(playerid, jugadorvigilando){
       	if(VigilandoAdmin[playerid] == 1){
		new X[120], X2[37], Float:Vida, Float:Armadura;
		GetPlayerHealth(jugadorvigilando, Vida);
		GetPlayerArmour(jugadorvigilando, Armadura);
		format(X2, sizeof(X2), "Jugador: %s(%d)", GetName(jugadorvigilando), jugadorvigilando);
 		format(X, sizeof(X), "~w~~h~Vida: ~r~~h~%.2f ~w~~h~- Armadura: ~r~~h~%.2f ~n~~y~~h~Si las cantidades son, 100.0. Posible bug o hack.", Vida, Armadura);
 		TextDrawShowForPlayer(playerid, Vigilar1);
 		TextDrawShowForPlayer(playerid, Vigilar0);
  		TextDrawSetString(Vigilar0, X2);
  		TextDrawSetString(Vigilar1, X);
  		return 1;
	}
	return 1;
}

YCMD:c(playerid, params[], help)
{
	//if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	new texto[128];
 	if(EnClan[playerid] == 1)
  	{
  		if (!sscanf(params, "s[70]", params[0]))
  		{
   			format(texto, sizeof texto, "{59FF00}<%s>[%s]%s(%d): %s", Clan_JugadorCompleto[playerid], RangosClans[RangoClan[playerid]-1], GetName(playerid), playerid, params[0]);
     		foreach(new i : Player)
     		{
       			if(IsPlayerConnected(i))
         		{
          			if(Clan_ID[i] == Clan_ID[playerid])
            		{
             			SendClientMessage(i, -1, texto);
                	}
            	}
        	}
        }
        else SendClientMessage(playerid, -1, "Usa: /c [texto].");
    }
    else SendClientMessage(playerid, -1, "No formas parte de un clan para utilizar este comando.");
	return 1;
}

YCMD:teles(playerid, params[], help)
{
	new Float:VidaJugador = GetPlayerHealth(playerid, VidaJugador);
	if(VidaJugador >= 50.0) return SendClientMessage(playerid, -1, "No puedes usar teleports con menos de 50.0 de vida."), SendClientMessage(playerid, -1, "* Puedes usar: /cvida y /carmadura para comprar Equipamento!");
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
    ShowPlayerDialog(playerid, MENU_TELEPORT1, DIALOG_STYLE_LIST, "{B908FF}Menú de Teleports:", "Ciudades\nAeropuertos\nStunts\nDrifting\nUndergrounds\nXZ(Zonas de Paracaidismo)\nOtros\n", "Aceptar", "Cancelar");
    return 1;
}

YCMD:teleports(playerid, params[], help)
{
	new Float:VidaJugador = GetPlayerHealth(playerid, VidaJugador);
	if(VidaJugador >= 50.0) return SendClientMessage(playerid, -1, "No puedes usar teleports con menos de 50.0 de vida."), SendClientMessage(playerid, -1, "* Puedes usar: /cvida y /carmadura para comprar Equipamento!");
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
    ShowPlayerDialog(playerid, MENU_TELEPORT1, DIALOG_STYLE_LIST, "{B908FF}Menú de Teleports:", "Ciudades\nAeropuertos\nStunts\nDrifting\nUndergrounds\nXZ(Zonas de Paracaidismo)\nOtros\n", "Aceptar", "Cancelar");
    return 1;
}

	YCMD:es(playerid, params[], help){
	MoveDynamicObject(Elevador[playerid], -1468.74231, 2529.29150, 77.12576, 9.0,  0.00000, 0.00000, 0.75960);
	return 1;
	}

	YCMD:eb(playerid, params[], help){
	MoveDynamicObject(Elevador[playerid], -1468.34387, 2529.50732, 57.12370, 9.0,  0.00000, 0.00000, 180.88371);
	return 1;
	}

	YCMD:jaulaba(playerid, params[], help)
	{
		MoveDynamicObject(Jaula[playerid], -1513.31665, 2467.86060, 81.14433,  8.0, 0.00000, 90.00000, 178.46411);
		return 1;
	}

	YCMD:jaulasu(playerid, params[], help)
	{
		MoveDynamicObject(Jaula[playerid], -1513.31665, 2467.86060, 122.47218, 3.0,  0.00000, 90.00000, 178.46411);
		return 1;
	}

		YCMD:casaadmin2(playerid, params[], help){
    SetPlayerPos(playerid, -1493.194580, 2549.707031, 55.840278);
    SetPlayerVirtualWorld(playerid, 7273);
	return 1;
	}

	YCMD:posj1(playerid, params[], help){ SetPlayerPos(playerid, -1513.41345, 2467.67725, 59.77250);} // posible jaula
	YCMD:posj2(playerid, params[], help){ SetPlayerPos(playerid, -1518.97693, 2480.49561, 74.32301);} // posible jaula
	YCMD:posj3(playerid, params[], help){ SetPlayerPos(playerid, -1513.51758, 2467.87061, 84.68740);}// posible jaula
	YCMD:posj4(playerid, params[], help){ SetPlayerPos(playerid, -1513.31665, 2467.86060, 122.47218);} // posible jaula
	YCMD:posj5(playerid, params[], help){ SetPlayerPos(playerid, -1513.31665, 2467.86060, 81.14433);}// posible jaul

	YCMD:activargangzones(playerid, params[], help){
	CargarZonasClanes();
	return 1;
	}
	
	YCMD:test11(playerid, params[], help){ //Cuando lo este haciendo debo ponerle al final PRIMERO VIRTUALWORLD Y SI NECESITO DESPUES INTERIOR
	new Float:x, Float:y, Float:z, nameplayer[30], idplayer, stringh[100];
	GetPlayerPos(playerid, x, y, z);
	GetPlayerName(playerid, nameplayer, sizeof(nameplayer));
	idplayer = playerid;
	for(new i; i < MP; i++)
	{
		if(MochilaObjecto[i] == 0)
		{
			SurvivalPosx[i] = x;
		 	SurvivalPosy[i] = y;
		 	SurvivalPosz[i] = z;
		 	strmid(NameBolsa, nameplayer, 0, strlen(nameplayer), 30);
			MochilaObjecto[i] = CreateDynamicObject(371, x, y, z - 0.8, 0, 0, 0);
			format(stringh, sizeof(stringh), "%s(ID:%d)\nID Mochila: %d\nPulsa 'C' para invertigarla\nPulsa 'BIR' para cogerla", nameplayer, idplayer, i);
			MochilaLabel[i] = Create3DTextLabel(stringh, 0x95B7FFFF, x, y, z - 0.8, 5.0, 0, 0);
			GetPlayerWeaponData(playerid, 2, ArmaSurvival[i][0], AmmoSurvival[i][0]);
			GetPlayerWeaponData(playerid, 3, ArmaSurvival[i][1], AmmoSurvival[i][1]);
			GetPlayerWeaponData(playerid, 4, ArmaSurvival[i][2], AmmoSurvival[i][2]);
			GetPlayerWeaponData(playerid, 5, ArmaSurvival[i][3], AmmoSurvival[i][3]);
			GetPlayerWeaponData(playerid, 6, ArmaSurvival[i][4], AmmoSurvival[i][4]);
			/*ArmaSurvival[i][0] = 24;
			ArmaSurvival[i][1] = 25;
			ArmaSurvival[i][2] = 0;
			ArmaSurvival[i][3] = 31;
			ArmaSurvival[i][4] = 33;
			AmmoSurvival[i][0] = 11;
			AmmoSurvival[i][1] = 11;
			AmmoSurvival[i][2] = 0;
			AmmoSurvival[i][3] = 11;
			AmmoSurvival[i][4] = 11;*/
			break;
		}
		continue;
	}
	return 1;
	}
	
	YCMD:test12(playerid, params[], help){ //Cuando lo este haciendo debo ponerle al final PRIMERO VIRTUALWORLD Y SI NECESITO DESPUES INTERIOR
	SendClientMessage(playerid, -1, "*** Todos los objetos fueron eliminados.");
	for(new i; i < MP; i++)
	{
		DestroyDynamicObject(MochilaObjecto[i]);
		Delete3DTextLabel(MochilaLabel[i]);
		MochilaObjecto[i] = 0;
		//MochilaLabel[i] = "";
	}
	return 1;
	}
	
	YCMD:test13(playerid, params[], help){ //Cuando lo este haciendo debo ponerle al final PRIMERO VIRTUALWORLD Y SI NECESITO DESPUES INTERIOR
	PTDHide(playerid, SurvivalInfo3[playerid]);
	PTDHide(playerid, SurvivalInfo2[playerid]);
	PTDHide(playerid, SurvivalInfo[playerid]);
	return 1;
	}

	YCMD:ann7(playerid, params[], help){
	new texto[2400];
	/*GetPlayerWeaponData(playerid, 0, aArma[0][playerid], aMun[0][playerid]);
				GetPlayerWeaponData(playerid, 1, aArma[1][playerid], aMun[1][playerid]);
				GetPlayerWeaponData(playerid, 2, aArma[2][playerid], aMun[2][playerid]);
				GetPlayerWeaponData(playerid, 3, aArma[3][playerid], aMun[3][playerid]);
				GetPlayerWeaponData(playerid, 4, aArma[4][playerid], aMun[4][playerid]);
				GetPlayerWeaponData(playerid, 5, aArma[5][playerid], aMun[5][playerid]);
				GetPlayerWeaponData(playerid, 6, aArma[6][playerid], aMun[6][playerid]);
				GetPlayerWeaponData(playerid, 7, aArma[7][playerid], aMun[7][playerid]);
				GetPlayerWeaponData(playerid, 8, aArma[8][playerid], aMun[8][playerid]);
				GetPlayerWeaponData(playerid, 9, aArma[9][playerid], aMun[9][playerid]);
				GetPlayerWeaponData(playerid, 10, aArma[10][playerid], aMun[10][playerid]);*/
				format(texto, sizeof texto, "%d - %d - %d - %d - %d", aArma[0][playerid], aArma[1][playerid], aArma[2][playerid], aArma[3][playerid], aArma[4][playerid], aArma[5][playerid], aArma[6][playerid], aArma[7][playerid], aArma[8][playerid], aArma[9][playerid], aArma[10][playerid]);
	SendClientMessage(playerid, -1, texto);
	return 1;
	}

	YCMD:poop(playerid, params[], help){
	JugadoresDentro += 1;
	return 1;
	}

	YCMD:test3(playerid, params[], help){
	MostrarEstadisticas = true;
	ObtenerTOPFinalizado();
	return 1;
	}

	YCMD:cm(playerid, params[], help)
	{
		if (!sscanf(params, "i", params[0]))
		{
			MapaDeathMatchAzar(params[0]);
   		}
		return 1;
	}
	YCMD:test2(playerid, params[], help)
	{
		if (!sscanf(params, "is[50]", params[0], params[1]))
		{
			mysql_format(Conexion, queryx, sizeof(queryx), "INSERT INTO `deathmatchzones` (ID, NombreMapa) VALUES ('%d', '%s')", params[0], params[1]);
			//mysql_format(Conexion, queryx, sizeof(queryx), "INSERT INTO `deathmatchzonesmax` (NumeroMapas, NumeroRandom) VALUES ('%d', '%d')", params[0], params[1]);
   			mysql_query(Conexion, queryx, false);
   		}
		return 1;
	}
	YCMD:test1298(playerid, params[], help)
	{
		ShowPlayerDialog(playerid, 1298, DIALOG_STYLE_MSGBOX, "Escoge:", "Dialog de Testo, escoge entre un si o un no.", "Si", "No");
		return 1;
	}
		YCMD:test69(playerid, params[], help)
	{
		SendClientMessage(playerid, -1, "{FFFFFF}0 {FD0000}AleksRot{FFFFFF}: Esta bien pendejo ya te dije que no");
		SendClientMessage(playerid, -1, "{FFFFFF}244 {FDFD00}IceMonster{FFFFFF}: Tienes que escribir: /reglas antes de cualquier cosa");
		SendClientMessage(playerid, -1, "{FFFFFF}22 {FD8C00}Benito_camelo{FFFFFF}: como me subo a un carro sin sacar al conductor???");
		SendClientMessage(playerid, -1, "{FFFFFF}77 {FD00D1}Juanito{FFFFFF}: ME CAGO EN TU PUTA MADRE IMBECIL");
		SendClientMessage(playerid, -1, "{FFFFFF}1 {00FA00}PedritoGaymer{FFFFFF}: KOCHMAN");
		SendClientMessage(playerid, -1, "{FFFFFF}288 {7E0000}[AsR]Denigrante{FFFFFF}: Alguien quiere clan? solo pros Manden MP");
		SendClientMessage(playerid, -1, "{FFFFFF}100 {00C297}Vinny[SD]{FFFFFF}: YO");
		SendClientMessage(playerid, -1, "{FFFFFF}66 {00C2F5}Goku777{FFFFFF}: oye leonal subete a mi carro con g");
		SendClientMessage(playerid, -1, "{FFFFFF}25 {00FFFF}[HP]GusanoVerde{FFFFFF}: Manden duelo!!");
		return 1;
	}

YCMD:deathmatch(playerid, params[], help)
{
	if(DeathMatch == true && JugadorEnDMM[playerid] == false)
	{
		UnirseDeathMatch(playerid);
		JugadoresDentro++;
	}
	else
	{
		SendClientMessage(playerid, -1, "{FFFF00}** No hay ningún DeathMatch iniciado o ya comenzó la partida.");
	}
	return 1;
}

//FUNCION EN PROGRESO
/*YCMD:msp(playerid, params[], help)
{
	if(JugadorEnDMM[playerid] == false)
	{
		JugadorEnMSP[playerid] = true;
		GameTextForPlayer(playerid, "~n~~y~~h~~h~modo espectador!~n~~y~~h~~h~usa 'shif' para cambiar de jugador", 2000, 3);
		PTDShow(playerid, TOPTD0[playerid]);
		JugadorSpecDM[playerid] = 0;
		TogglePlayerSpectating(playerid, false);
		PlayerSpectatePlayer(playerid, 0);
	}
	else{
		SendClientMessage(playerid, -1, "Escribe /salir para poder entrar en el modo espectador.");
	}
	return 1;
}*/

YCMD:vigilar(playerid, params[], help)
{
	if(Administrador[playerid] >= 1)
	{
 		if (!sscanf(params, "i", params[0]))
		{
			if(playerid != params[0])
			{
				if (IsPlayerConnected(params[0]))
				{
					//TogglePlayerSpectating(playerid, true);
					//PlayerSpectatePlayer(playerid, params[0], SPECTATE_MODE_NORMAL);
					//GetPlayerPos(playerid, pEspiarPos[playerid][0], pEspiarPos[playerid][1], pEspiarPos[playerid][2]);
					//GetPlayerFacingAngle(playerid, pEspiarPos[playerid][3]);
					SendClientMessage(playerid, Blanco, "{FFD400}*** Para salir del modo espectador escribe: /veroff.");
					//VigilandoJugador(playerid, params[0]);
					VigilandoAdmin[playerid] = 1;
					StartSpectate(playerid, params[0]);
					//SetTimerXP(playerid, 12, "VigilandoJugador", 4000);
				}
				else SendClientMessage(playerid, -1, "El jugador no se encuentra conectado.");
			}
			else SendClientMessage(playerid, -1, "{FFD600}*** No puedes hacerlo contigo mismo.");
		}
		else SendClientMessage(playerid, -1, "Usa: /vigilar o /veron [id].");
	}
	else return ErrorAdmin(playerid, 2);
	return 1;
}

YCMD:dejarvigilar(playerid, params[], help)
{
	if(Administrador[playerid] >= 1)
	{
	    if(apiTipoVigilancia[playerid] != ADMIN_SPEC_TYPE_NONE)
		{
			StopSpectate(playerid);
			SendClientMessage(playerid, -1, "{00FF00}*** Has sido spawneado correctamente...");
			PlayerTextDrawHide(playerid, VerOn[playerid]);
			KillTimer(ActualizarVerOnTimer[playerid]);
		}
		else
		{
			SendClientMessage(playerid, -1,"{FFD400}*** No estás vigilando a ningún jugador.");
		}
	}
	else return ErrorAdmin(playerid, 2);
	return 1;
}

stock StartSpectate(const playerid, const specplayerid)
{
	foreach(new x : Player)
	{
	    if(GetPlayerState(x) == PLAYER_STATE_SPECTATING && apiIDVigilado[x] == playerid)
			AdvanceSpectate(x);
	}
	SetPlayerInterior(playerid, GetPlayerInterior(specplayerid));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(specplayerid));
	TogglePlayerSpectating(playerid, 1);
	if(IsPlayerInAnyVehicle(specplayerid))
	{
		PlayerSpectateVehicle(playerid, GetPlayerVehicleID(specplayerid));
		apiIDVigilado[playerid] = specplayerid;
		apiTipoVigilancia[playerid] = ADMIN_SPEC_TYPE_VEHICLE;
	}
	else
	{
		PlayerSpectatePlayer(playerid, specplayerid);
		apiIDVigilado[playerid] = specplayerid;
		apiTipoVigilancia[playerid] = ADMIN_SPEC_TYPE_PLAYER;
	}
	new stringxc[260], Float:hp, Float:ar;
	GetPlayerName(specplayerid,stringxc,sizeof(stringxc));
	GetPlayerHealth(specplayerid, hp);	GetPlayerArmour(specplayerid, ar);
	format(stringxc,sizeof(stringxc),"%s(ID:%d) vida:%0.1f armadura: %0.1f~n~Dinero Juego: $%d - Dinero Real: $%d~n~~n~Si la vida es mayor a 100.0 posible hack.~n~Si dinero Juego es mayor a Real(+1millon) posible hack.~n~El TextDraw se actualiza cada 50 segundos.", stringxc,specplayerid,hp,ar,GetPlayerMoney(specplayerid), DineroJugador[specplayerid]);
	PlayerTextDrawSetString(playerid, VerOn[playerid], stringxc);
	PlayerTextDrawShow(playerid, VerOn[playerid]);
	ActualizarVerOnTimer[playerid] = SetTimerEx("ActualizarVerOn", 300, 1, "ii", playerid, specplayerid);
	return 1;
}

funcion ActualizarVerOn(playerid, specplayerid)
{
	new stringxc[260], Float:hp, Float:ar;
	GetPlayerName(specplayerid,stringxc,sizeof(stringxc));
	GetPlayerHealth(specplayerid, hp);	GetPlayerArmour(specplayerid, ar);
	format(stringxc,sizeof(stringxc),"%s(ID:%d) vida:%0.1f armadura: %0.1f~n~Dinero Juego: $%d - Dinero Real: $%d~n~~n~Si la vida es mayor a 100.0 posible hack.~n~Si dinero Juego es mayor a Real(+1millon) posible hack.~n~El TextDraw se actualiza cada 50 segundos.", stringxc,specplayerid,hp,ar,GetPlayerMoney(specplayerid), DineroJugador[specplayerid]);
	PlayerTextDrawSetString(playerid, VerOn[playerid], stringxc);
	PlayerTextDrawShow(playerid, VerOn[playerid]);
	return 1;
}

stock StopSpectate(const playerid)
{
	TogglePlayerSpectating(playerid, 0);
	apiIDVigilado[playerid] = MAX_PLAYERS;
	apiTipoVigilancia[playerid] = ADMIN_SPEC_TYPE_NONE;
	KillTimer(ActualizarVerOnTimer[playerid]);
	return 1;
}

stock AdvanceSpectate(const playerid)
{
    if(ConnectedPlayers() == 2)
	{
		StopSpectate(playerid);
		return 1;
	}
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING && apiIDVigilado[playerid] != MAX_PLAYERS)
	{
	    for(new x=apiIDVigilado[playerid]+1; x<=MAX_PLAYERS; x++)
		{
	    	if(x == MAX_PLAYERS)
				x = 0;
	        if(IsPlayerConnected(x) && x != playerid)
			{
				if(GetPlayerState(x) == PLAYER_STATE_SPECTATING && apiIDVigilado{x} != MAX_PLAYERS || (GetPlayerState(x) != 1 && GetPlayerState(x) != 2 && GetPlayerState(x) != 3))
					continue;
				else
				{
					StartSpectate(playerid, x);
					break;
				}
			}
		}
	}
	return 1;
}

stock ReverseSpectate(const playerid)
{
    if(ConnectedPlayers() == 2)
	{
		StopSpectate(playerid);
		return 1;
	}
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING && apiIDVigilado[playerid] != MAX_PLAYERS)
	{
	    for(new x=apiIDVigilado[playerid]-1; x>=0; x--)
		{
	    	if(x == 0)
				x = MAX_PLAYERS;
	        if(IsPlayerConnected(x) && x != playerid)
			{
				if(GetPlayerState(x) == PLAYER_STATE_SPECTATING && apiIDVigilado{x} != MAX_PLAYERS || (GetPlayerState(x) != 1 && GetPlayerState(x) != 2 && GetPlayerState(x) != 3))
				{
					continue;
				}
				else
				{
					StartSpectate(playerid, x);
					break;
				}
			}
		}
	}
	return 1;
}

stock ConnectedPlayers()
{
	new Connected;
	foreach(new i : Player)
 		Connected++;
	return Connected;
}

YCMD:casaadmin(playerid, params[], help)
{
	if(Administrador[playerid] >= 1)
	{
	    SendClientMessage(playerid, -1, "{00FF00}* Este comando está actualmente deshabilitado temporalmente.");
		/*SetPlayerPos(playerid, -2394.1873,4452.3794,2.1659 + 4);
		SetPlayerVirtualWorld(playerid, 233);
		SendClientMessage(playerid, -1, "Casa admininistrativa, virtual-world: {A4FF00}233{FFFFFF}.");*/
  	}
	else return ErrorAdmin(playerid, 1);
	return 1;
}

YCMD:espiarcmds(playerid, params[], help)
{
	if(Administrador[playerid] >= 1)
	{
		if(pCMDS[playerid] == 0)
		{
			pCMDS[playerid] = 1;
			SendClientMessage(playerid, -1, "{00FF00}*** Has activado el speccmds correctamente. Escribe el mismo comando para inhabilitarlo.");
  		}
		else
  		{
			pCMDS[playerid] = 0;
        	SendClientMessage(playerid, -1, "{00FF00}*** Has desactivado el speccmds correctamente. Escribe el mismo comando para habilitarlo.");
  		}
 	}
	else return ErrorAdmin(playerid, 1);
	return 1;
}


YCMD:espiarmps(playerid, params[], help)
{
	if(Administrador[playerid] >= 1)
	{
		if(pMPs[playerid] == 0)
		{
			pMPs[playerid] = 1;
			SendClientMessage(playerid, -1, "{00FF00}*** Has activado el specmps correctamente. Escribe el mismo comando para inhabilitarlo.");
  		}
		else
  		{
			pMPs[playerid] = 0;
        	SendClientMessage(playerid, -1, "{00FF00}*** Has desactivado el specmps correctamente. Escribe el mismo comando para habilitarlo.");
  		}
 	}
	else return ErrorAdmin(playerid, 1);
	return 1;
}

YCMD:ir(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Administrador[playerid] >= 1)
 	{
        if (!sscanf(params, "i", params[0]))
		{
 			if(playerid != params[0])
   			{
				new nombreadmin[MAX_PLAYER_NAME], Float:x, Float:y, Float:z, Float:angulo;
				new vehiculo = GetPlayerVehicleID(playerid);
				GetPlayerName(params[0], nombre, sizeof(nombre));
				GetPlayerName(playerid, nombreadmin, sizeof(nombreadmin));
				GetPlayerPos(params[0], Float:x, Float:y, Float:z);
				GetPlayerFacingAngle(params[0], Float:angulo);
				if(IsPlayerConnected(params[0]))
				{
					format(stringj, sizeof(stringj), "{03FF00}* Has ido a la posición del jugador %s.", nombre);
					format(stringj2, sizeof(stringj2), "{03FF00}* Administrador %s ha ido a tu posición.", nombreadmin);
					SendClientMessage(playerid, -1, stringj);
					SendClientMessage(params[0], -1, stringj2);
					Sonido(params[0]);
					Sonido(playerid);
					SetPlayerPos(playerid, Float:x+2, Float:y, Float:z);
					SetPlayerInterior(playerid, GetPlayerInterior(playerid));
					if (IsPlayerInAnyVehicle(playerid))
					{
						SetVehiclePos(vehiculo, Float:x+2, Float:y, Float:z);
						PutPlayerInVehicle(playerid, vehiculo, 0);
					}
					SetPlayerFacingAngle(playerid, Float:angulo);
				}
				else SendClientMessage(playerid, -1, "El jugador no se encuentra conectado.");
			}
    		else SendClientMessage(playerid, -1, "{FFD600}*** No puedes hacerlo contigo mismo.");
      	}
	  	else SendClientMessage(playerid, -1, "Usa: /ir o /goto [id].");
	}
  	else return ErrorAdmin(playerid, 1);
	return 1;
}

YCMD:traer(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Administrador[playerid] >= 1)
 	{
        if (!sscanf(params, "i", params[0]))
		{
 			if(playerid != params[0])
   			{
				new nombreadmin[MAX_PLAYER_NAME], Float:x, Float:y, Float:z, Float:angulo;
				new vehiculo = GetPlayerVehicleID(params[0]);
				GetPlayerName(params[0], nombre, sizeof(nombre));
				GetPlayerName(playerid, nombreadmin, sizeof(nombreadmin));
				GetPlayerPos(playerid, Float:x, Float:y, Float:z);
				GetPlayerFacingAngle(playerid, Float:angulo);
				if(IsPlayerConnected(params[0]))
				{
					format(stringj, sizeof(stringj), "{00DDFF}* Jugador %s traido a tu ubicación actual.", nombre);
					format(stringj2, sizeof(stringj2), "{00DDFF}* Administrador %s te a llevado a tu posición.", nombreadmin);
					SendClientMessage(playerid, -1, stringj);
					SendClientMessage(params[0], -1, stringj2);
					Sonido(params[0]);
					Sonido(playerid);
					SetPlayerPos(params[0], Float:x+2, Float:y, Float:z);
					SetPlayerInterior(params[0], GetPlayerInterior(params[0]));
					if (IsPlayerInAnyVehicle(params[0]))
					{
						SetVehiclePos(vehiculo, Float:x+2, Float:y, Float:z);
						PutPlayerInVehicle(params[0], vehiculo, 0);
					}
					SetPlayerFacingAngle(params[0], Float:angulo);
				}
				else SendClientMessage(playerid, -1, "El jugador no se encuentra conectado.");
			}
    		else SendClientMessage(playerid, -1, "{FFD600}*** No puedes hacerlo contigo mismo.");
      	}
	  	else SendClientMessage(playerid, -1, "Usa: /traer o /get [id].");
	}
  	else return ErrorAdmin(playerid, 1);
	return 1;
}

YCMD:savepos(playerid, params[], help)
{
	if(Administrador[playerid] >= 1)
	{
 		GetPlayerPos(playerid, TpPos[0], TpPos[1], TpPos[2]);
   		TpInt = GetPlayerInterior(playerid);
	    TpVw = GetPlayerVirtualWorld(playerid);
		NoHayPosicion = 1;
		SendClientMessage(playerid, -1, "{FFD400}*** Has establecido está posición para todos los jugadores(/ap).");
 	}
	else return ErrorAdmin(playerid, 1);
	return 1;
}

YCMD:climas(playerid, params[], help)
{
    if(Administrador[playerid] >= 1)
	{
		ShowMenuForPlayer(PanelAdmin1, playerid);
		TogglePlayerControllable(playerid, 0);
	}
	else ErrorAdmin(playerid, 1);
    return 1;
}

YCMD:dararma(playerid, params[], help)
{
	if(Administrador[playerid] >= 1)
	{
         if (!sscanf(params, "iii", params[0], params[1], params[2]))
		 {
			new gunname[19], nombreadmin[MAX_PLAYER_NAME];
			GetPlayerName(params[0], nombre, sizeof(nombre));
			GetPlayerName(playerid, nombreadmin, sizeof(nombreadmin));
			GetWeaponName(params[1], gunname,sizeof(gunname));
			if(IsPlayerConnected(params[0]))
			{
				format(stringj, sizeof(stringj), "{FFFF00}Arma enviada al jugador %s. (Modelo: %s - Munición: %d).", nombre, gunname, params[2]);
				format(stringj2, sizeof(stringj2), "{FFFF00}Administrador %s te ha enviado una arma. (Modelo: %s - Munición: %d).", nombreadmin, gunname, params[2]);
				SendClientMessage(playerid, -1, stringj);
				SendClientMessage(params[0], -1, stringj2);
				GivePlayerWeapon(params[0], params[1], params[2]);
				Sonido(params[0]);
				Sonido(playerid);
			}
			else SendClientMessage(playerid, -1, "El jugador no se encuentra conectado.");
		}
	  	else SendClientMessage(playerid, -1, "Usa: /dararma [id] [modelo] [munición].");
 	}
	else ErrorAdmin(playerid, 1);
	return 1;
}

YCMD:dararmadura(playerid, params[], help)
{
	if(Administrador[playerid] >= 1)
	{
         if (!sscanf(params, "ii", params[0], params[1]))
		 {
			new nombreadmin[MAX_PLAYER_NAME];
			GetPlayerName(params[0], nombre, sizeof(nombre));
			GetPlayerName(playerid, nombreadmin, sizeof(nombreadmin));
			if(IsPlayerConnected(params[0]))
			{
			    if(params[1] < 0 || params[1] > 99) return SendClientMessage(playerid, -1, "Sólo puedes dar de 0 a 99 de Armadura.");
				format(stringj, sizeof(stringj), "{00FF8A}* Has establecido la armadura del jugador %s en %i.", nombre, params[1]);
				format(stringj2, sizeof(stringj2), "{00FF8A}* Administrador %s a regenerado tu armadura en %i.", nombreadmin, params[1]);
				SendClientMessage(playerid, -1, stringj);
				SendClientMessage(params[0], -1, stringj2);
				SetPlayerArmour(params[0], params[1]);
				Sonido(params[0]);
				Sonido(playerid);
			}
			else SendClientMessage(playerid, -1, "El jugador no se encuentra conectado.");
		}
	  	else SendClientMessage(playerid, -1, "Usa: /dararmadura [id] [cantidad(del 1-99)].");
 	}
	else ErrorAdmin(playerid, 1);
	return 1;
}

YCMD:darvida(playerid, params[], help)
{
	if(Administrador[playerid] >= 1)
	{
         if (!sscanf(params, "ii", params[0], params[1]))
		 {
			new nombreadmin[MAX_PLAYER_NAME];
			GetPlayerName(params[0], nombre, sizeof(nombre));
			GetPlayerName(playerid, nombreadmin, sizeof(nombreadmin));
			if(IsPlayerConnected(params[0]))
			{
			    if(params[1] < 0 || params[1] > 99) return SendClientMessage(playerid, -1, "Sólo puedes dar de 0 a 99 de Vida.");
				format(stringj, sizeof(stringj), "{00FF8A}* Has establecido la vida del jugador %s en %i.", nombre, params[1]);
				format(stringj2, sizeof(stringj2), "{00FF8A}* Administrador %s a regenerado tu vida en %i.", nombreadmin, params[1]);
				SendClientMessage(playerid, -1, stringj);
				SendClientMessage(params[0], -1, stringj2);
				SetPlayerHealth(params[0], params[1]);
				Sonido(params[0]);
				Sonido(playerid);
			}
			else SendClientMessage(playerid, -1, "El jugador no se encuentra conectado.");
		}
	  	else SendClientMessage(playerid, -1, "Usa: /dararmadura [id] [cantidad(del 1-99)].");
 	}
	else ErrorAdmin(playerid, 1);
	return 1;
}

//COMANDOS ADMINS NIVEL 2
YCMD:armatodos(playerid, params[], help)
{
	if(Administrador[playerid] >= 2)
 	{
        if (!sscanf(params, "ii", params[0], params[1]))
	 	{
	    	new gunname[32];
	    	if((params[0]==35)||(params[0]==36)||(params[0]==38)) return SendClientMessage(playerid, Blanco, "Está prohibido regalar este tipo de armas(reservado para eventos).");
        	GetWeaponName(params[0], gunname, sizeof(gunname));
	    	GetPlayerName(playerid, nombre, sizeof(nombre));
    		format(stringj, sizeof(stringj), "{00FF8A}* Administrador %s a regalado %s para todos los jugadores.", nombre, gunname);
        	SendClientMessageToAll(-1, stringj);
        	format(stringj2, sizeof(stringj2), "~g~~h~~h~"a_xa"%s ~n~~g~~h~~h~para todos!", gunname);
			GameTextForAll(stringj2, 2000, 5);
			DarArmasTodos(params[0], params[1]);
		}
	  	else SendClientMessage(playerid, -1, "Usa: /armatodos [id del arma] [munición].");
 	}
	else ErrorAdmin(playerid, 2);
	return 1;
}

YCMD:vidatodos(playerid, params[], help)
{
	if(Administrador[playerid] >= 2)
	{
		GetPlayerName(playerid, nombre, sizeof(nombre));
		format(stringj, sizeof(stringj), "{00FF8A}* Administrador %s a regalado 100 de vida a todos los jugadores.", nombre);
		SendClientMessageToAll(-1, stringj);
		GameTextForAll("~n~~g~~h~~h~"a_xa"vida ~n~~g~~h~~h~para todos!",2000,3);
		VidaTodos();
	}
	else return ErrorAdmin(playerid, 2);
	return 1;
}

YCMD:armaduratodos(playerid, params[], help)
{
	if(Administrador[playerid] >= 2)
	{
		GetPlayerName(playerid, nombre, sizeof(nombre));
		format(stringj, sizeof(stringj), "{00FF8A}* Administrador %s a regalado 100 armadura a todos los jugadores.", nombre);
		SendClientMessageToAll(-1, stringj);
		GameTextForAll("~n~~g~~h~~h~"a_xa"armadura ~n~~g~~h~~h~para todos!",2000,3);
		ArmaduraTodos();
	}
	else return ErrorAdmin(playerid, 2);
	return 1;
}

YCMD:expulsar(playerid, params[], help)
{
	if(Administrador[playerid] >= 2)
	{
        if (!sscanf(params, "is[150]", params[0], params[1]))
		{
 			if(playerid != params[0])
   			{
				new nombreadmin[MAX_PLAYER_NAME], stringjx[120];
				GetPlayerName(params[0], nombre, sizeof(nombre));
				GetPlayerName(playerid, nombreadmin, sizeof(nombreadmin));
				if(IsPlayerConnected(params[0]))
				{
					format(stringjx, sizeof(stringjx), "{C60000}* Administrador %s a kickeado al jugador %s. (Razón: %s).", nombreadmin, nombre, params[1]);
			    	SendClientMessageToAll(Rojo, stringjx);
					Kick(params[0]);
				}
				else SendClientMessage(playerid, -1, "El jugador no se encuentra conectado.");
			}
    		else SendClientMessage(playerid, -1, "{FFD600}*** No puedes hacerlo contigo mismo.");
      	}
	  	else SendClientMessage(playerid, -1, "Usa: /expulsar [id] [razón].");
	}
  	else return ErrorAdmin(playerid, 1);
  	return 1;
}

funcion KickPlayer(playerid, player)
{
	KillTimer(KickTime[playerid]);
	Kick(player);
	return 1;
}

YCMD:advertencia(playerid, params[], help)
{
	if(Administrador[playerid] >= 2)
	{
        if (!sscanf(params, "is[150]", params[0], params[1]))
		{
            //if(playerid != params[0])
   			//{
				new nombreadmin[MAX_PLAYER_NAME], string3[180];
				GetPlayerName(params[0], nombre, sizeof(nombre));
				GetPlayerName(playerid, nombreadmin, sizeof(nombreadmin));
				if(IsPlayerConnected(params[0]))
				{
  					if(Advertencia[params[0]] == 0)
	    			{
      					Advertencia[params[0]] = 1;
						format(string3, sizeof(string3), "{FFFF7E}* Administrador %s le a dado una advertencia al jugador %s. (Razón: %s)(1/3)", nombreadmin, nombre, params[1]);
						SendClientMessageToAll(-1, string3);
						JugadorAK[params[0]][0] += 1;
						return 1;
					}
					if(Advertencia[params[0]] == 1)
					{
   						Advertencia[params[0]] = 2;
						format(string3, sizeof(string3), "{FFFF7E}* Administrador %s le a dado una advertencia al jugador %s. (Razón: %s)(2/3)", nombreadmin, nombre, params[1]);
						SendClientMessageToAll(-1, string3);
						JugadorAK[params[0]][0] += 1;
						return 1;
					}
					if(Advertencia[params[0]] == 2)
					{
						format(string3, sizeof(string3), "{FFFF7E}* Administrador %s le a dado una advertencia al jugador %s. (Razón: %s)(3/3)", nombreadmin, nombre, params[1]);
						SendClientMessageToAll(-1, string3);
						JugadorAK[params[0]][0] += 1;
						JugadorAK[params[0]][1] += 1;
						Kick(params[0]);
    					return 1;
					}
				}
				else SendClientMessage(playerid, -1, "El jugador no se encuentra conectado.");
			//}
    		//else SendClientMessage(playerid, -1, "{FFD600}*** No puedes hacerlo contigo mismo.");
      	}
	  	else SendClientMessage(playerid, -1, "Usa: /advertencia [id] [razón].");
	}
  	else return ErrorAdmin(playerid, 2);
  	return 1;
}

YCMD:explotar(playerid, params[], help)
{
	if(Administrador[playerid] >= 2)
	{
        if (!sscanf(params, "i", params[0]))
		{
            if(playerid != params[0])
   			{
                if(IsPlayerConnected(params[0]))
				{
				    if(JugadorSpawnKill[params[0]] == 0)
				    {
						new Float:x, Float:y, Float:z;
						GetPlayerName(params[0], nombre, sizeof(nombre));
						format(stringj, sizeof(stringj), "{FFD400}* Jugador %s a sido explotado para comprobar HH.", nombre);
						SendClientMessage(playerid, -1, stringj);
						GetPlayerPos(params[0], x, y, z);
						CreateExplosion(x, y , z + 3, 1, 10); CreateExplosion(x, y , z + 3, 1, 11); CreateExplosion(x, y , z + 3, 1, 12); CreateExplosion(x, y , z + 3, 1, 13);
					}
					else SendClientMessage(playerid, -1, "El jugador al que intenta explotar está con protección AntiSpawn-Kill.");
				}
				else SendClientMessage(playerid, -1, "El jugador no se encuentra conectado.");
			}
    		else SendClientMessage(playerid, -1, "{FFD600}*** No puedes hacerlo contigo mismo.");
      	}
	  	else SendClientMessage(playerid, -1, "Usa: /explotar [id].");
	}
  	else return ErrorAdmin(playerid, 2);
  	return 1;
}

YCMD:tirar(playerid, params[], help)
{
	if(Administrador[playerid] >= 2)
	{
        if (!sscanf(params, "i", params[0]))
		{
            //if(playerid != params[0])
   			//{
                if(IsPlayerConnected(params[0]))
				{
				    if(JugadorSpawnKill[params[0]] == 0)
				    {
						new Float:x, Float:y, Float:z, Float:vida;
						GetPlayerPos(params[0], x, y, z);
						SetPlayerPos(params[0], x, y, z + 22);
						GetPlayerHealth(params[0], vida);
						TirarPlayer[params[0]] = SetTimerEx("TirarJugador", 1500, false, "if", params[0], vida);
					}
					else SendClientMessage(playerid, -1, ""CA"El jugador al que intenta tirar está con protección Spawn-Kill.");
				}
				else SendClientMessage(playerid, -1, "El jugador no se encuentra conectado.");
			//}
    		//else SendClientMessage(playerid, -1, "{FFD600}*** No puedes hacerlo contigo mismo.");
      	}
	  	else SendClientMessage(playerid, -1, "Usa: /tirar [id].");
	}
  	else return ErrorAdmin(playerid, 2);
  	return 1;
}

funcion TirarJugador(playerid, const Float:vidaantes)
{
	new Float:vida;
    GetPlayerName(playerid, nombre, sizeof(nombre));
	GetPlayerHealth(playerid, vida);
	format(stringj, sizeof(stringj), "{FFB000}* %s(ID:%d) a sido tirado para comprobar su vida. [Vida: %.2f || %.2f].", nombre, playerid, vidaantes, vida);
	AdminInfoDUDA(stringj);
	KillTimerEx(playerid, TirarPlayer[playerid]);
	return 1;
}

//COMANDOS ADMINS NIVEL 3
YCMD:condena(playerid, params[], help)
{
	if(Encarcelado[playerid] == 1)
	{
		static stringcondena[128];
	    format(stringcondena, sizeof(stringcondena), "{00FF00}*** Condena de %dmin/s con %dseg.", Digito1Jail[playerid], Digito2Jail[playerid]);
	    SendClientMessage(playerid, -1, stringcondena);
	}
	else SendClientMessage(playerid, -1, "*** No estás encarcelado para ver el tiempo.");
	return 1;
}

YCMD:encarcelar(playerid, params[], help)
{
	if(Administrador[playerid] >= 3)
	{
 		if (!sscanf(params, "iis[90]", params[0], params[1], params[2]))
		{
			new string[160];
 			if (IsPlayerConnected(params[0]))
  			{
   				format(string, sizeof(string), "{00FFFF}* Administrador %s a encarcelado al jugador %s - (Razón: %s)[%d min/s].", GetName(playerid), GetName(params[0]), params[2], params[1]);
    			SendClientMessageToAll(-1, string);
	    		SetPlayerPos(params[0], 264.6533,77.6398,1001.0391);
		    	SetPlayerInterior(params[0], 6);
				Encarcelado[params[0]] = 1;
				Digito1Jail[params[0]] = params[1];
				Digito2Jail[params[0]] = 0;
				Mute[params[0]] = 2;
				format(queryx, sizeof(queryx), "UPDATE `jugadores` SET Encarcelado=%d WHERE Nombre='%s'", Encarcelado[params[0]], GetName(params[0]));
				mysql_function_query(Conexion, queryx, true, "OnQueryFinish", "ii", 2, params[0]);
				stringTime2Jail[params[0]] = SetTimerEx("TiempoJailContador", 1000, false, "i", params[0]);
   	 		}
        	else SendClientMessage(playerid, -1, "El jugador no se encuentra conectado.");
      	}
	  	else SendClientMessage(playerid, -1, "Usa: /encarcelar [id] [tiempo(en minutos)] [razón].");
   	}
	else return ErrorAdmin(playerid, 3);
	return 1;
}
funcion RegresarJugadorJail(playerid)
{
    if(Encarcelado[playerid] == 1)
	{
	    SendString(playerid, "{00FF00}*** Has salido del servidor estando en una condena. [Condena: %dmin/s + 5min por salir].", Digito1Jail[playerid]);
		SetPlayerPos(playerid, 264.6533,77.6398,1001.0391);
		SetPlayerInterior(playerid, 6);
	    Digito1Jail[playerid] += 5;
	    KillTimerEx(playerid, stringTime2Jail[playerid]);
	    TogglePlayerControllable(playerid, true);
	    Mute[playerid] = 2;
	    stringTime2Jail[playerid] = SetTimerEx("TiempoJailContador", 1000, false, "i", playerid);
	}
	return 1;
}

funcion TiempoJailContador(playerid)
{
	if(Encarcelado[playerid] == 1)
	{
		if(Digito2Jail[playerid] == 0)
		{
			if(Digito1Jail[playerid] >= 1)
			{
				Digito1Jail[playerid] -= 1;
				Digito2Jail[playerid] = 60;
			}
			if(Digito1Jail[playerid] == 0 && Digito2Jail[playerid] == 0)
			{
				KillTimer(stringTime2Jail[playerid]);
				SendClientMessage(playerid, -1, "{FFFF00}*** Has cumplido tu condena en la carcel.");
				SendClientMessage(playerid, -1, "{FFFFFF}    Sigue las reglas para no volver a ser sancionado(/reglas).");
				GameTextForPlayer(playerid, "~g~~h~~h~Has sido liberado!", 6000, 3);
				Encarcelado[playerid] = 0;
				Mute[playerid] = 2;
				format(queryx, sizeof(queryx), "UPDATE `jugadores` SET Encarcelado=%d WHERE Nombre='%s'", Encarcelado[playerid], GetName(playerid));
				mysql_function_query(Conexion, queryx, true, "OnQueryFinish", "ii", 2, playerid);
  				Digito1Jail[playerid] = 0;
				Digito2Jail[playerid] = 0;
				SpawnPlayer(playerid);
  				return 1;
			}
		}
		if(Digito2Jail[playerid] <= 60)
		{
			Digito2Jail[playerid] -= 1;
		}
		stringTime2Jail[playerid] = SetTimerEx("TiempoJailContador", 1000, false, "i", playerid);
	}
	return 1;
}

YCMD:unencarcelar(playerid, params[], help)
{
	if(Administrador[playerid] >= 3)
	{
	    if (!sscanf(params, "i", params[0]))
		{
        	if (IsPlayerConnected(params[0]))
        	{
        	    if(Encarcelado[params[0]] == 1)
        	    {
        	        KillTimer(stringTime2Jail[params[0]]);
		    		SendClientMessage(params[0], -1, "{FFFF00}*** Has sido liberado de la carcel por un admin.");
		    		SendClientMessage(playerid, -1, "{FFFF00}*** El jugador ha sido liberado correctamente.");
		    		Digito1Jail[params[0]] = 0;
					Digito2Jail[params[0]] = 0;
					Encarcelado[params[0]] = 0;
					Mute[params[0]] = 0;
					format(queryx, sizeof(queryx), "UPDATE `jugadores` SET Encarcelado=%d WHERE Nombre='%s'", Encarcelado[params[0]], GetName(params[0]));
					mysql_function_query(Conexion, queryx, true, "OnQueryFinish", "ii", 2, params[0]);
					SetPlayerInterior(params[0], 0);
					SpawnPlayer(params[0]);
				}
				else SendClientMessage(playerid, -1, "Este jugador no se encuentra encarcelado.");
   	 		}
        	else SendClientMessage(playerid, -1, "El jugador no se encuentra conectado.");
      	}
	  	else SendClientMessage(playerid, -1, "Usa: /desencarcelar [id].");
   	}
	else ErrorAdmin(playerid, 3);
	return 1;
}

YCMD:desarmar(playerid, params[], help)
{
	if(Administrador[playerid] >= 3)
	{
	    if (!sscanf(params, "is[150]", params[0], params[1]))
		{
			new string[100];
			if (IsPlayerConnected(params[0]))
			{
			    if(EstaDM[params[0]] == 0)
			    {
					format(string, sizeof(string), "{FF8D00}* Administrador %s a desarmado al jugador %s. (Razón: %s).", GetName(playerid), GetName(params[0]), params[1]);
					SendClientMessageToAll(-1, string);
					ResetPlayerWeapons(params[0]);
				}
				else SendClientMessage(playerid, -1, "Este jugador está dentro de un minijuego, no puedes removerle sus armas.");
   	 		}
        	else SendClientMessage(playerid, -1, "El jugador no se encuentra conectado.");
      	}
	  	else SendClientMessage(playerid, -1, "Usa: /desarmar [id] [razón].");
   	}
	else return ErrorAdmin(playerid, 3);
	return 1;
}

YCMD:ch(playerid, params[], help)
{
	if(Administrador[playerid] >= 3)
	{
	    if (!sscanf(params, "ii", params[0], params[1]))
		{
	    	new stringjkk[80];
			format(stringjkk, sizeof(stringjkk), "{00FF8A}* Administrador %s a cambiado la hora a %d:%d a todos los jugadores.", GetName(playerid), params[0], params[1]);
			SendClientMessageToAll(-1, stringjkk);
			for(new i=0; i < MP; i++){ SetPlayerTime(i, params[0], params[1]); }
		}
	  	else SendClientMessage(playerid, -1, "Usa: /ch [hora] [minutos].");
	}
	else return ErrorAdmin(playerid, 3);
	return 1;
}

YCMD:rann(playerid, params[], help)
{
    if(Administrador[playerid] >= 2)
		{
		    new textrojo[50], stringjkk[100];
	    	if (!sscanf(params, "s[50]", textrojo))
			{
				format(stringjkk, sizeof(stringjkk), "~r~~h~~h~%s", textrojo);
				GameTextForAll(stringjkk, 2000, 3);
			}
	  		else SendClientMessage(playerid, -1, "Usa: /rann [texto].");
 		}
 		else ErrorAdmin(playerid, 2);
		return 1;
}

YCMD:aann(playerid, params[], help)
{
    if(Administrador[playerid] >= 2)
		{
		    new textrojo[50], stringjkk[100];
	    	if (!sscanf(params, "s[50]", textrojo))
			{
				format(stringjkk, sizeof(stringjkk), "~b~~h~~h~%s", textrojo);
				GameTextForAll(stringjkk, 2000, 3);
			}
	  		else SendClientMessage(playerid, -1, "Usa: /aann [texto].");
 		}
 		else ErrorAdmin(playerid, 2);
		return 1;
}

YCMD:yann(playerid, params[], help)
{
    if(Administrador[playerid] >= 2)
		{
		    new textrojo[50], stringjkk[100];
	    	if (!sscanf(params, "s[50]", textrojo))
			{
				format(stringjkk, sizeof(stringjkk), "~y~%s", textrojo);
				GameTextForAll(stringjkk, 2000, 3);
			}
	  		else SendClientMessage(playerid, -1, "Usa: /yann [texto].");
 		}
 		else ErrorAdmin(playerid, 2);
		return 1;
}

YCMD:pann(playerid, params[], help)
{
    if(Administrador[playerid] >= 2)
		{
		    new textrojo[50], stringjkk[100];
	    	if (!sscanf(params, "s[50]", textrojo))
			{
				format(stringjkk, sizeof(stringjkk), "~p~%s", textrojo);
				GameTextForAll(stringjkk, 2000, 3);
			}
	  		else SendClientMessage(playerid, -1, "Usa: /pann [texto].");
 		}
 		else ErrorAdmin(playerid, 2);
		return 1;
}

YCMD:vann(playerid, params[], help)
{
    if(Administrador[playerid] >= 2)
		{
		    new textrojo[50], stringjkk[100];
	    	if (!sscanf(params, "s[50]", textrojo))
			{
				format(stringjkk, sizeof(stringjkk), "~g~~h~~h~%s", textrojo);
				GameTextForAll(stringjkk, 2000, 3);
			}
	  		else SendClientMessage(playerid, -1, "Usa: /vann [texto].");
 		}
 		else ErrorAdmin(playerid, 2);
		return 1;
}

YCMD:ann(playerid, params[], help)
{
    if(Administrador[playerid] >= 2)
		{
		    new textrojo[50], stringjkk[100];
	    	if (!sscanf(params, "s[50]", textrojo))
			{
				format(stringjkk, sizeof(stringjkk), "~w~~h~~h~%s", textrojo);
				GameTextForAll(stringjkk, 2000, 3);
			}
	  		else SendClientMessage(playerid, -1, "Usa: /rann [texto].");
 		}
 		else ErrorAdmin(playerid, 2);
		return 1;
}

YCMD:mute(playerid, params[], help)
{
	if(Administrador[playerid] >= 3)
	{
 		if (!sscanf(params, "iis[90]", params[0], params[1], params[2]))
		{
			new string[128];
 			if (IsPlayerConnected(params[0]))
  			{
   				format(string, sizeof(string), "{00FFFF}* Administrador %s a muteado al jugador %s - (Razón: %s)[tiempo: %dmin/s].", GetName(playerid), GetName(params[0]), params[2], params[1]);
    			SendClientMessageToAll(-1, string);
				Mute[params[0]] = 1;
				Digito1Mute[params[0]] = params[1];
				Digito2Mute[params[0]] = 0;
				format(queryx, sizeof(queryx), "UPDATE `jugadores` SET Muteado=%d WHERE Nombre='%s'", Mute[params[0]], GetName(params[0]));
				mysql_function_query(Conexion, queryx, true, "OnQueryFinish", "ii", 2, params[0]);
				stringTime2Mute[params[0]] = SetTimerEx("TiempoMuteContador", 1000, false, "i", params[0]);
				SendClientMessage(params[0], -1, "{AB0000}* Has sido suspendido del chat general por mal comportamiento.");
   	 		}
        	else SendClientMessage(playerid, -1, "El jugador no se encuentra conectado.");
      	}
	  	else SendClientMessage(playerid, -1, "Usa: /mute [id] [tiempo(en minutos)] [razón].");
   	}
	else return ErrorAdmin(playerid, 3);
	return 1;
}

funcion RegresarJugadorMute(playerid)
{
    if(Mute[playerid] == 1)
	{
	    SendString(playerid, "{00FF00}*** Has salido del servidor estando silenciado. [Tiempo: %dmin/s + 3min por salir].", Digito1Mute[playerid]);
	    Digito1Mute[playerid] += 3;
	    KillTimerEx(playerid, stringTime2Mute[playerid]);
	    TogglePlayerControllable(playerid, true);
	    stringTime2Mute[playerid] = SetTimerEx("TiempoMuteContador", 1000, false, "i", playerid);
	}
	return 1;
}

funcion TiempoMuteContador(playerid)
{
	if(Mute[playerid] == 1)
	{
		if(Digito2Mute[playerid] == 0)
		{
			if(Digito1Mute[playerid] >= 1)
			{
				Digito1Mute[playerid] -= 1;
				Digito2Mute[playerid] = 60;
			}
			if(Digito1Mute[playerid] == 0 && Digito2Mute[playerid] == 0)
			{
				KillTimer(stringTime2Mute[playerid]);
				SendClientMessage(playerid, -1, "{00FFFF}*** Has cumplido tu tiempo de silencio.");
				SendClientMessage(playerid, -1, "{FFFFFF}    Sigue las reglas para no volver a ser sancionado(/reglas).");
				Mute[playerid] = 0;
				format(queryx, sizeof(queryx), "UPDATE `jugadores` SET Muteado=%d WHERE Nombre='%s'", Mute[playerid], GetName(playerid));
				mysql_function_query(Conexion, queryx, true, "OnQueryFinish", "ii", 2, playerid);
  				Digito1Mute[playerid] = 0;
				Digito2Mute[playerid] = 0;
  				return 1;
			}
		}
		if(Digito2Mute[playerid] <= 60)
		{
			Digito2Mute[playerid] -= 1;
		}
		stringTime2Mute[playerid] = SetTimerEx("TiempoMuteContador", 1000, false, "i", playerid);
	}
	return 1;
}

YCMD:desmute(playerid, params[], help)
{
	if(Administrador[playerid] >= 3)
	{
	    if (!sscanf(params, "i", params[0]))
		{
       		new string[160];
        	if (IsPlayerConnected(params[0]))
        	{
        	    if(Mute[params[0]] == 1)
        	    {
   	 	    		format(string, sizeof(string), "{00FFFF}* Administrador %s a desmuteado al jugador %s.", GetName(playerid), GetName(params[0]));
		    		SendClientMessageToAll(-1, string);
					Mute[params[0]] = 0;
					format(queryx, sizeof(queryx), "UPDATE `jugadores` SET Muteado=%d WHERE Nombre='%s'", Mute[params[0]], GetName(params[0]));
					mysql_function_query(Conexion, queryx, true, "OnQueryFinish", "ii", 2, params[0]);
  					Digito1Mute[params[0]] = 0;
					Digito2Mute[params[0]] = 0;
					KillTimer(stringTime2Mute[params[0]]);
				}
				else return SendClientMessage(playerid, Amarillo, "Este jugador no se encuentra silenciado.");
   	 		}
        	else SendClientMessage(playerid, -1, "El jugador no se encuentra conectado.");
      	}
	  	else SendClientMessage(playerid, -1, "Usa: /desmute [id].");
   	}
	else return ErrorAdmin(playerid, 3);
	return 1;
}

YCMD:respawn(playerid, params[], help)
{
	if(Administrador[playerid] >= 3)
	{
 		if (!sscanf(params, "i", params[0]))
		{
			new string[60];
 			if (IsPlayerConnected(params[0]))
  			{
   				format(string, sizeof(string), "{00FF8A}* Administrador %s te a respawnenado.", GetName(params[0]));
    			SendClientMessage(params[0], -1, string);
    			format(stringp2, sizeof(stringp2), "{00FF8A}* %s fue spawneado satisfactoriamente.", GetName(params[0]));
    			SendClientMessage(playerid, -1, stringp2);
				SpawnPlayer(params[0]);
   	 		}
        	else SendClientMessage(playerid, -1, "El jugador no se encuentra conectado.");
      	}
	  	else SendClientMessage(playerid, -1, "Usa: /respawn [id].");
   	}
	else return ErrorAdmin(playerid, 3);
	return 1;
}

//COMANDOS ADMINS 4

YCMD:cclima(playerid, params[], help)
{
	if(Administrador[playerid] >= 4)
	{
 		if (!sscanf(params, "i", params[0]))
		{
			new string[70];
			format(string, sizeof(string), "{00FF8A}* Administrador %s cambió el clima.", GetName(playerid));
			SendClientMessageToAll(-1, string);
			SpawnPlayer(params[0]);
      	}
	  	else SendClientMessage(playerid, -1, "Usa: /cclima [clima].");
   	}
	else return ErrorAdmin(playerid, 4);
	return 1;
}

YCMD:darskin(playerid, params[], help)
{
	if(Administrador[playerid] >= 4)
	{
 		if (!sscanf(params, "ii", params[0], params[1]))
		{
			new string[100];
 			if (IsPlayerConnected(params[0]))
  			{
   				format(string, sizeof(string), "{FF8D00}* Administrador %s te a colocado el skin %d.", GetName(playerid), params[1]);
    			SendClientMessage(params[0], -1, string);
    			format(stringp2, sizeof(stringp2), "{FF8D00}* Le das dado el Skin '%d' al jugador %s.", params[1], GetName(params[0]));
    			SendClientMessage(playerid, -1, stringp2);
				SetPlayerSkin(params[0], params[1]);
   	 		}
        	else SendClientMessage(playerid, -1, "El jugador no se encuentra conectado.");
      	}
	  	else SendClientMessage(playerid, -1, "Usa: /darskin [id] [skin-id].");
   	}
	else return ErrorAdmin(playerid, 4);
	return 1;
}

YCMD:matartodos(playerid, params[], help)
{
	if(Administrador[playerid] >= 4)
	{
		new string[160];
		format(string, sizeof(string), "{BD0000}* Administrador %s mató a todos los jugadores.", GetName(playerid));
		SendClientMessageToAll(-1, string);
		for(new i = 0; i <= MP; i++){ SetPlayerHealth(i, 0); }
   	}
	else return ErrorAdmin(playerid, 4);
	return 1;
}

YCMD:desararmatodos(playerid, params[], help)
{
	if(Administrador[playerid] >= 4)
	{
		new string[160];
		format(string, sizeof(string), "{BD0000}* Administrador %s desarmo a todos los jugadores.", GetName(playerid));
		SendClientMessageToAll(-1, string);
		for(new i = 0; i <= MP; i++){ ResetPlayerWeapons(i); }
   	}
	else return ErrorAdmin(playerid, 4);
	return 1;
}

YCMD:ban(playerid, params[], help)
{
	if(Administrador[playerid] >= 4)
	{
        if (!sscanf(params, "is[150]", params[0], params[1]))
		{
 			//if(playerid != params[0])
   			//{
				if(IsPlayerConnected(params[0]))
				{
					if(Administrador[params[0]] == 0 && Administrador[playerid] <= 9)
					{
				    	BanearJugador(playerid, params[0], params[1]);
					}
					else
					{
					    if(Administrador[playerid] <= 9)
					    {
							SendClientMessage(playerid, -1, "{FFFF00}Este usuario pertenece al Equipo de Administración y no puedes ser baneado bajo nínguna circunstancia.");
						}
						else
						{
						    BanearJugador(playerid, params[0], params[1]);
						}
					}
				}
				else SendClientMessage(playerid, -1, "El jugador no se encuentra conectado.");
			//}
      		//else SendClientMessage(playerid, -1, "{FFD600}*** No puedes hacerlo contigo mismo.");
      	}
	  	else SendClientMessage(playerid, -1, "Usa: /ban [id] [razón].");
	}
  	else return ErrorAdmin(playerid, 4);
  	return 1;
}

funcion BanearJugador(playerid, banplayer, razonban[])
{
    static stringjx[128], string[128], string3[128], ano, mes, dia, hora, minuto, segundo, beban;
    getdate(ano, mes, dia);
   	gettime(hora, minuto, segundo);
   	beban = 1;
	format(stringjx, sizeof(stringjx), "* %s ha sido baneado por el Administrador %s - (Razón: %s).", GetName(banplayer), GetName(playerid), razonban, ano, mes, dia, hora, minuto, segundo);
	BaneadoCuenta[banplayer] = 1;
	SetPlayerCameraPos(banplayer, -114.01, -235.15, 53.56);
	SetPlayerCameraLookAt(banplayer, -112.51, -230.38, 53.96);
	SetPlayerPos(banplayer, -83.523696, -202.579925, 1.769127);
	SetPlayerInterior(banplayer, 0);
	format(queryx, sizeof(queryx), "UPDATE `jugadores` SET Banned=%d WHERE Nombre='%s'", beban, GetName(banplayer));
	mysql_function_query(Conexion, queryx, true, "OnQueryFinish", "ii", 0, banplayer);
	SendClientMessage(banplayer, -1, "{FF0000}=============================================================================================");
	format(string, sizeof(string), "{FFEA00}* Has sido baneado por el Administrador '%s' por '%s'", GetName(playerid), razonban);
	SendClientMessage(banplayer, -1, string);
	SendClientMessage(banplayer, -1, " {FFEA00}Si crees que se trata de un error por favor visita nuestras páginas oficiales.");
	format(string3, sizeof(string3), " {FFEA00}Fecha de la sanción: (Fecha: %d/%d/%d | Hora: %d:%d:%d) - .", dia, mes, ano, hora, minuto, segundo);
	SendClientMessage(banplayer, -1, string3);
	SendClientMessageToAll(Rojo, stringjx);
	SendClientMessage(banplayer, -1, "{FF0000}=============================================================================================");
	GameTextForPlayer(banplayer, "~n~~n~~r~~h~~h~Baneado!~n~~r~~h~~h~www.virtualzone.com", 2000000000000, 3);
	SetPlayerTime(banplayer, 22, 0);
	SetPlayerWeather(banplayer, 23);
	BanTime[playerid] = SetTimerEx("BanPlayer", 500, 1, "ii", playerid, banplayer);
	return 1;
}

funcion BanPlayer(playerid, player)
{
	KillTimer(BanTime[playerid]);
	Ban(player);
	return 1;
}

//SISTEMA DEATHMATCH
stock randomEx(min, max)
{
    //Credits to y_less
    new rand = random(max-min)+min;
    return rand;
}

YCMD:dmbase(playerid, params[], help)
{
	if(Administrador[playerid] >= 3 || Vip[playerid] >= 3)
	{
	    if (!sscanf(params, "i", params[0]))
		{
		    if(DeathMatch == false)
		    {
	    		if(MapRandomDM == 0)
				{
		    		SendClientMessage(playerid, -1, "{FFE700}* DeathMatch: no fue posible iniciar el mapa por no haber autorización.");
		    		SendClientMessage(playerid, -1, "  Si eres Administrador(+lvl8) revisa el Panel Administrativo para más información.");
  				}
  				else
  				{
  		    		MapaDeathMatchAzar(params[0]);
					stop MREX;
					KillTimer(stringTime);
					MensajeErrorPlayerDM = playerid;
					MapaTerminoBien = 0;
					ResetearVariablesG();
					for(new b; b < MAX_PLAYERS; b++) //Evitar posibles bugs con jugadores dentro del evento por alguna razón.
					{
				    	if(JugadorEnDMM[b] == true)
				    	{
							ResetearVariablesM(b);
						}
					}
					stop iniciarmapai;
  				}
			}
			else SendClientMessage(playerid, -1, "{FFE700}*** No puedes iniciar un nuevo DeathMatch cuando ya hay uno activado.");
		}
	}
	else return SendClientMessage(playerid, -1, "{FFE700}* No tienes autorización para utilizar este comando. (Admin +Lvl3 o +VIP3).");
	return 1;
}

//EXTRAER DATOS DE LA BASE DE DATOS:
funcion MapaDeathMatchAzar(IDMapa)
{
	if(MapRandomDM == 1){
	new string[128], string2[128], Cache:result, content[20], content2[20], ms = GetTickCount();
	//Equipos, TiempoMapa
	mysql_format(Conexion, queryx, sizeof(queryx), "SELECT `NombreMapa`, `NombreCreador`, `PosX`, `PosY`, `PosZ`, `PosA`, `Pos2X`, `Pos2Y`, `Pos2Z`, `Pos2A`, `Pos3X`, `Pos3Y`, `Pos3Z`, `Pos3A`, `Int`, `World`, `MaximoPlayers`, `Survival`, `MaximoKills`, `Equipos`, `Individual`, `TiempoMapa` FROM `deathmatchzones` WHERE ID=%d", IDMapa);
	result = mysql_query(Conexion, queryx);
	cache_get_field_content(0, "NombreMapa", content);
	strmid(NombreEvento, content, 0, strlen(content), 30);
	mxx = cache_get_field_content_float(0, "PosX");
	if(mxx == 0) //Mensaje error para jugador que haya activado uno manual
	{
	    ResetearVariablesG();
	    stop iniciarmapai;
	    MREX = defer MapaRandomEX();
	    SendClientMessage(MensajeErrorPlayerDM, -1, "*** DeathMatch: el id del mapa que colocaste no se encuentra disponible.");
	    printf("Error 03: Se produjo un error al iniciar un Mapa DeathMatch ID: %d", IDMapa);
	    print("El sistema lanzo un nuevo Random Map para desbugear");
	    return 1;
 	}
	myy = cache_get_field_content_float(0, "PosY");
	mzz = cache_get_field_content_float(0, "PosZ");
	maa = cache_get_field_content_float(0, "PosA");
	mxx2 = cache_get_field_content_float(0, "Pos2X");
	myy2 = cache_get_field_content_float(0, "Pos2Y");
	mzz2 = cache_get_field_content_float(0, "Pos2Z");
	maa2 = cache_get_field_content_float(0, "Pos2A");
	mxx3 = cache_get_field_content_float(0, "Pos3X");
	myy3 = cache_get_field_content_float(0, "Pos3Y");
	mzz3 = cache_get_field_content_float(0, "Pos3Z");
	maa3 = cache_get_field_content_float(0, "Pos3A");
	mint = cache_get_field_content_int(0, "Int");
	mworld = cache_get_field_content_int(0, "World");
	//mmp = cache_get_field_content_int(0, "MaximoPlayers");
	msvv = cache_get_field_content_int(0, "Survival");
	mmk = cache_get_field_content_int(0, "MaximoKills");
	tmdm = cache_get_field_content_int(0, "TiempoMapa");
	cache_get_field_content(0, "NombreCreador", content2);
	strmid(NombreCreadorDM, content2, 0, strlen(content2), 30);
	GameTextForAll("~r~~h~DeathMatch!", 3000, 3);
	cache_delete(result, Conexion);
	DeathMatch = true;
	MapaIniciado = true;
	printf("El DeathMatch '%s' se activo, numero de serie '%d'", NombreEvento, IDMapa);
	stop MREX;
	iniciarmapai = defer iniciarmapa();
	format(string, sizeof(string), "* {FF2A50}DeathMatch: \"%s\" ha dado inicio. Escribe: /deathmatch para unirte a la partida!", NombreEvento);
	SendClientMessageToAll(-1, string);
 	format(string2, sizeof(string2), "*                                {FFFFFF}(Creador: {00E900}%s - {FFFFFF}ejecutado en {00E900}%dms{FFFFFF}).", NombreCreadorDM, GetTickCount()-ms);
	for(new b; b < MAX_PLAYERS; b++) if(Administrador[b] >= 1) SendClientMessage(b, -1, string2);
	}
	printf("El DeathMatch esta desactivado");
    return 1;
}

funcion UnirseDeathMatch(playerid)
{
	if(DeathMatch == true)
	{
		if(MapaIniciado == true)
		{
			new stringbox[300];
			switch(random(3))
			{
				case 0:{
					SetPlayerPosEx(playerid, mxx, myy, mzz, maa, mint, mworld);
				}
				case 1:{
					SetPlayerPosEx(playerid, mxx2, myy2, mzz2, maa2, mint, mworld);
				}
				case 2:{
					SetPlayerPosEx(playerid, mxx3, myy3, mzz3, maa3, mint, mworld);
				}
			}
			SendClientMessage(playerid, -1, "{FFFF00}* Espera a que se unan más jugadores a la partida.");
			SendClientMessage(playerid, -1, "{FFFF00}* Usa: /salir si deseas salir.");
			ResetPlayerWeapons(playerid);
			GameTextForPlayer(playerid, "~r~~h~Has entrado ~n~ ~g~~h~~h~deathmatch!~n~~n~Esperando jugadores....", 9000, 3);
			JugadorEnDMM[playerid] = true;
			EstaDM[playerid] = 1;
			//Detecta que modo de juego es para mandar su box respectivamente:
			if(mme == 1)
			{
				format(stringbox, sizeof(stringbox), "{FFFFFF}DeathMatch: {FF0000}'%s'\n{FFC200}Instrucciones:\n{FFFFFF}En este modo tendrás que ayudar a tu Equipo a llegar a {FF0000}'%d'{FFFFFF} para ganar.\n{FFFFFF}Cada vez que mueras regresarás hasta finalizar la ronda.\n\n{FFFFFF}¡Mucha suerte!", NombreEvento, mmk);
				ShowPlayerDialog(playerid, 779, DIALOG_STYLE_MSGBOX, "{FFFFFF}Instrucciones:", stringbox, "Salir", "");
			}
			else
			{
				format(stringbox, sizeof(stringbox), "{FFFFFF}DeathMatch: {FF0000}'%s'\n{FFC200}Instrucciones:\n{FFFFFF}En este modo individual tendrás que ser el primero en llegar {FF0000}'%d'{FFFFFF} para ganar.\n{FFFFFF}Cada vez que mueras regresarás hasta finalizar la ronda.\n\n{FFFFFF}¡Mucha suerte!", NombreEvento, mmk);
				ShowPlayerDialog(playerid, 779, DIALOG_STYLE_MSGBOX, "{FFFFFF}Instrucciones:", stringbox, "Salir", "");
			}
			if(msvv == 1)
			{
				format(stringbox, sizeof(stringbox), "{FFFFFF}DeathMatch: {FF0000}'%s'\n{FFC200}Instrucciones:\n{FFFFFF}En este modo survival tendrás que ser el último jugador vivo para ganar.\n{FFFFFF}En está ronda no respawnearas automaticamente aquí.\n\n{FFFFFF}¡Mucha suerte!", NombreEvento);
				ShowPlayerDialog(playerid, 779, DIALOG_STYLE_MSGBOX, "{FFFFFF}Instrucciones:", stringbox, "Salir", "");
			}
		}
		else
		{
			SendClientMessage(playerid, -1, "{FFFF00}* El DeathMatch ya dio inicio, entraste como espectador.");
		}
	}
	return 1;
}

timer iniciarmapa[63000]()
{
	if(JugadoresDentro >= JugadoresNecesariosDM)
	{
		if(mme == 1)
		{
			EquiposAlAzarMapa();
			for(new b; b < MAX_PLAYERS; b++)
			{
				if(JugadorEnDMM[b] == true)
				{
					TogglePlayerControllable(b, false);
					DarAntiSpawnKill[b] = true;
				}
			}
		}
		if(mme == 0 && msvv == 0)
		{
			IniciarPartida();
			for(new b; b < MAX_PLAYERS; b++)
			{
				if(JugadorEnDMM[b] == true)
				{
					TogglePlayerControllable(b, false);
					DarAntiSpawnKill[b] = true;
				}
			}
		}
		if(msvv == 1)
		{
			IniciarSurvival();
			for(new b; b < MAX_PLAYERS; b++)
			{
				if(JugadorEnDMM[b] == true)
				{
					//TogglePlayerControllable(b, false);
					DarAntiSpawnKill[b] = true;
				}
			}
		}
	}
    StopMapa();
}

funcion StopMapa(){
	stop iniciarmapai;
	SendClientMessageToAll(-1, "* {FFFF00}DeathMatch: fue cancelado por falta de participantes(+4)");
	MapaTerminoBien = 1;
	ResetearVariablesG();
	for(new b; b < MP; b++)
	{
		if(JugadorEnDMM[b] == true)
		{
			ResetearVariablesM(b);
		}
	}
	return 1;
}

funcion IniciarSurvival()
{
	if(JugadoresDentro >= 1)
	{
	    JugadoresEntraron = JugadoresDentro; // Almacenamos la cantidad de personas que entraron
	    stringTime = SetTimer("TiempoMapaContador", 1000, false);
		Digito1 = tmdm;
  		Digito2 = 60;
		for(new b; b < MP; b++)
    	{
    	    //ObtenerTOP();
			if(JugadorEnDMM[b] == true)
			{
				SetPlayerColor(b, 0x99FFCDFF);
				MapaIniciado = false;
				SendClientMessage(b, -1, "* {FFFF00}Survival: Elimina a todos tus enemigos y se el último jugador en pie!");
				SendClientMessage(b, -1, "* {FFFF00}Escribe: /salir para salir del modo Survival.");
				SendClientMessage(b, -1, "* {FFFF00}Usa: /msp para cambiar a modo Espectador.");
				GameTextForPlayer(b, "~r~~h~~h~Comienza el survival!", 2000, 3);
				//PTDShow(b, TOPTD0[b]);
			    PTDShow(b, TiempoDMContador[b]);
				switch(random(3))
				{
				case 0:{
					SetPlayerPosEx(b, mxx, myy, mzz + 700, maa, mint, mworld);
					TogglePlayerControllable(b, true);
				}
				case 1:{
					SetPlayerPosEx(b, mxx2, myy2, mzz2 + 700, maa2, mint, mworld);
					TogglePlayerControllable(b, true);
				}
				case 2:{
					SetPlayerPosEx(b, mxx3, myy3, mzz3 + 700, maa3, mint, mworld);
					TogglePlayerControllable(b, true);
				}
				}
				TogglePlayerControllable(b, true);
				ResetPlayerWeapons(b);
				GivePlayerWeapon(b, 46, 1);
				switch(random(6))
				{
				case 0:{
					GivePlayerWeapon(b, 24, 15);
				}
				case 1:{
					GivePlayerWeapon(b, 23, 15);
				}
				case 2:{
					GivePlayerWeapon(b, 22, 15);
				}
				case 3:{
					GivePlayerWeapon(b, 25, 15);
				}
				case 4:{
					GivePlayerWeapon(b, 26, 15);
				}
				case 5:{
					GivePlayerWeapon(b, 27, 15);
				}
				}
				//Arma Random 2
				switch(random(7))
				{
				case 0:{
					GivePlayerWeapon(b, 28, 15);
				}
				case 1:{
					GivePlayerWeapon(b, 29, 15);
				}
				case 2:{
					GivePlayerWeapon(b, 32, 15);
				}
				case 3:{
					GivePlayerWeapon(b, 31, 15);
				}
				case 4:{
					GivePlayerWeapon(b, 30, 15);
				}
				case 5:{
					GivePlayerWeapon(b, 33, 15);
				}
				case 6:{
					GivePlayerWeapon(b, 34, 15);
				}
				}
				SetPlayerAttachedObject(b, 1, 371, 1, 0.0000, -0.0954, -0.0012, 359.8081, 89.4325, 358.1167);
				GivePlayerWeapon(b, 31, 1000);
				ConteoYDescongelar(b);
			}
		}
	}
	return 1;
}

funcion ConteoYDescongelar(playerid)
{
    TogglePlayerControllable(playerid, true);
	return 1;
}

funcion EquiposAlAzarMapa()
{
	if(JugadoresDentro >= 1)
	{
		for(new b; b < MAX_PLAYERS; b++)
		{
			if(JugadorEnDMM[b] == true)
			{
				if(EquiposDM[MERDM] > EquiposDM[MEADM])
 				{
   					ERDM[b] = EQUIPO_AZUL;
   					EquiposDM[MEADM] += 2;
   					//EquipoEvento(b);
 				}
 				else if(EquipoEV[MEADM] > EquipoEV[MERDM])
 				{
   					ERDM[b] = MERDM;
   					EquiposDM[MERDM] += 2;
   					//EquipoEvento(b);
   				}
   			}
 		}
 	}
   	else SendClientMessageToAll(-1, "{FFD100}DeathMatch cancelado por falta de participantes."); //REactiva los Eventos Automaticos
 	return 1;
}

funcion IniciarPartida()
{
	if(JugadoresDentro >= 1)
	{
	    stringTime = SetTimer("TiempoMapaContador", 1000, false);
		Digito1 = tmdm;
  		Digito2 = 60;
		for(new b; b < MAX_PLAYERS; b++)
		{
			ObtenerTOP();
			MapaIniciado = false;
			if(JugadorEnDMM[b] == true)
			{
				SendClientMessage(b, -1, "* {FFFF00}DeathMatch: Elimina a todos tus enemigos y se el mejor de la partida!");
				SendClientMessage(b, -1, "* {FFFF00}Escribe: /salir para salir del modo DeathMatch.");
				SendClientMessage(b, -1, "* {FFFF00}Usa: /msp para cambiar a modo Espectador.");
				GameTextForPlayer(b, "~r~~h~~h~Comienza la ronda!", 2000, 3);
				PTDShow(b, TOPTD0[b]);
			    PTDShow(b, TiempoDMContador[b]);
				switch(random(3))
				{
				case 0:{
					SetPlayerPosEx(b, mxx, myy, mzz, maa, mint, mworld);
				}
				case 1:{
					SetPlayerPosEx(b, mxx2, myy2, mzz2, maa2, mint, mworld);
				}
				case 2:{
					SetPlayerPosEx(b, mxx3, myy3, mzz3, maa3, mint, mworld);
				}
				}
				TogglePlayerControllable(b, true);
				ResetPlayerWeapons(b);
				GivePlayerWeapon(b, 24, 1000);
				GivePlayerWeapon(b, 25, 1000);
				GivePlayerWeapon(b, 34, 1000);
				//GivePlayerWeapon(b, 31, 1000);

			}
		}
	}
	return 1;
}

funcion RegresarAlJuego(playerid)
{
  	SendClientMessage(playerid, -1, "* {FFFF00}DeathMatch: Has regresado a la partida...");
  	SendClientMessage(playerid, -1, "* {FFFF00}Escribe: /salir para salir del modo DeathMatch.");
  	GameTextForPlayer(playerid, "~r~~h~~h~Spawneado!", 2000, 3);
  	PTDShow(playerid, TOPTD0[playerid]);
  	switch(random(3))
  	{
    case 0:{
      	SetPlayerPosEx(playerid, mxx, myy, mzz, maa, mint, mworld);
    }
    case 1:{
      	SetPlayerPosEx(playerid, mxx2, myy2, mzz2, maa2, mint, mworld);
    	}
    case 2:{
     	 SetPlayerPosEx(playerid, mxx3, myy3, mzz3, maa3, mint, mworld);
    	}
  	}
  	TogglePlayerControllable(playerid, true);
  	ResetPlayerWeapons(playerid);
  	GivePlayerWeapon(playerid, 24, 1000);
  	GivePlayerWeapon(playerid, 25, 1000);
  	GivePlayerWeapon(playerid, 34, 1000);
	return 1;
}

stock ObtenerTOP()
{
	new
      playerScores[MAX_PLAYERS][rankingEnum],
      index;
    for(new i; i != MAX_PLAYERS; ++i)
    {
      if(IsPlayerConnected(i) && !IsPlayerNPC(i) && JugadorEnDMM[i] == true)
      {
        playerScores[index][player_Score] = KillsEnMapaDM[i];
        playerScores[index++][player_ID] = i;
      }
    }
    GetPlayerHighestScores(playerScores, 0, index);

    new
      score_Text[256] = "~n~",
      player_Name[20]
    ;

    for(new i; i < 10; ++i)
    {
      if(i < index)
      {
        GetPlayerName(playerScores[i][player_ID], player_Name, sizeof(player_Name));
        format(score_Text, sizeof(score_Text), "%s~n~~y~~h~%d. ~w~~h~~h~%s - ~r~~h~%d", score_Text, i + 1, player_Name, playerScores[i][player_Score]);
      }
      else
        format(score_Text, sizeof(score_Text), "%s~n~~y~~h~%d.", score_Text, i + 1);
    }
    for(new b; b < MP; ++b)
    {
    	if(JugadorEnDMM[b] == true || JugadorEnMSP[b] == true)
    	{
    		TOP3DMensaje(b, score_Text);
    	}
    }
	return 1;
}

stock ObtenerTOPFinalizado()
{
	new
      playerScores[MAX_PLAYERS][rankingEnum],
      index;
    for(new i; i != MAX_PLAYERS; ++i)
    {
      if(IsPlayerConnected(i) && !IsPlayerNPC(i) && JugadorEnDMM[i] == true)
      {
        playerScores[index][player_Score] = KillsEnMapaDM[i];
        playerScores[index++][player_ID] = i;
      }
    }
    GetPlayerHighestScores(playerScores, 0, index);


    new
      score_Text[256] = "\n",
      player_Name[20];

    for(new i; i < 15; ++i)
    {
      if(i < index)
      {
        GetPlayerName(playerScores[i][player_ID], player_Name, sizeof(player_Name));
        format(score_Text, sizeof(score_Text), "%s {FFFFFF}%d. {C600C3}%s{FFFFFF}: %d\n", score_Text, i + 1, player_Name, playerScores[i][player_Score]);
      }
      else
        format(score_Text, sizeof(score_Text), "%s {FFFFFF}%d.\n", score_Text, i + 1);
    }
    if(MostrarEstadisticas == true)
    {
    	for(new i; i != MAX_PLAYERS; ++i)
    	{
    		if(JugadorEnDMM[i] == true || JugadorEnMSP[i] == true)
    		{
    			ShowPlayerDialog(i, 777, DIALOG_STYLE_MSGBOX, "{C600C3}TOP15: Mejores Killers", score_Text, "Salir", "");
    			FinalizarMapai = defer FinalizarMapa();
    		}
    	}
    }
	return 1;
}

//FUNCION EN PROGRESO
//SPEC PLAYERS
funcion SpectateNext(playerid) {
    new bool:fl;
    foreach(new i:Player) if(JugadorEnDMM[i] == true && i > JugadorSpecDM[playerid]) {
        new tdstring[85];
        fl = true;
        JugadorSpecDM[playerid] = i;
        format(tdstring, sizeof(tdstring), "~<~ ~g~~h~Spectate: ~w~%s ~>~", GetName(JugadorSpecDM[playerid]));
        TogglePlayerSpectating(playerid, false);
        PlayerSpectatePlayer(playerid, i);
        break;
    }
    if(!fl) {
    	if(JugadorEnMSP[playerid] == true){
    		TogglePlayerSpectating(playerid, false);
        	JugadorSpecDM[playerid] = -1;
        	SpectateNext(playerid);
    }
    }
    return 1;
}

funcion SpectatePrevious(playerid) {
    new bool:fl;
    for(new i = MP, j; i > j; i--) if(JugadorEnDMM[i] == true  && i > JugadorSpecDM[playerid]) {
        new tdstring[85];
        fl = true;
        JugadorSpecDM[playerid] = i;
        format(tdstring, sizeof(tdstring), "~<~ ~g~~h~Spectate: ~w~%s ~>~", GetName(JugadorSpecDM[playerid]));
        PlayerSpectatePlayer(playerid, i);
        break;
    }
    if(!fl) {
    	if(JugadorEnMSP[playerid] == true){
    		TogglePlayerSpectating(playerid, false);
        	JugadorSpecDM[playerid] = 50;
        	SpectatePrevious(playerid);
    }
    }
    return 1;
}

funcion JugadorPerdio(playerid)
{
	new X[50];
    ResetearVariablesM(playerid);
    SendClientMessage(playerid, -1, "* {00FF00}Has sido eliminado de la ronda Survival!");
    SendClientMessage(playerid, -1, "  No has ganado nada en está ronda, suerte para la próxima.");
    format(X, sizeof(X), "%d jugadores en batalla!", JugadoresDentro);
    ActualizarSurvival(X);
	return 1;
}

stock ActualizarSurvival(const string[])
{
	new X[72];
	format(X, sizeof(X), "%s", string);
 	for(new i; i < MP; i++)
 	{
		PTDShow(i, DMInfo[i]);
		PlayerTextDrawSetString(i, DMInfo[i], X);
		Sonido(i);
	}
	return 1;
}

funcion AcabarRonda(NombreGanador)
{
	new stringganador[128];
	DeathMatch = false; //EVITAR POSIBLES BUGS
	//Mensaje de Ganador para todos:
	format(stringganador, sizeof(stringganador), "* {00FF00}DeathMatch: %s(%d) ha ganado la ronda individual DeathMatch - con %d kills!", GetName(NombreGanador), NombreGanador, KillsEnMapaDM[NombreGanador]);
	SendClientMessageToAll(-1, stringganador);
	//AQUI IRA LOS PREMIOS, QUE HARÉ DESPUES:
	GameTextForPlayer(NombreGanador, "~n~~n~~r~~h~~h~Felicidades ~n~~r~~h~~h~has ganado!", 3000, 3);
	//Congelar a todos:
	for(new i; i < MP; i++)
    {
    	if(JugadorEnDMM[i] == true)
    	{
    		TogglePlayerControllable(i, false);
    		SendClientMessage(i, -1, "* {FFFF00}DeathMatch: La ronda ha terminado, en segundos serás spawneado...");
    		//Elimina el TOP10(TextDraw):
    		PTDHide(i, TOPTD0[i]);
    		PTDHide(i, TOPTD1[i]);
    		PTDHide(i, TOPTD2[i]);
    		SpawnPlayer(i);
    		//Da el TOP15 a todos los players deentro(también los Espectadores):
    	}
    }
    //Timer para spawnear y resetear variables:
    MostrarEstadisticas = true;
	ObtenerTOPFinalizado();
	return 1;
}

funcion AcabarRondaSurvival()
{
	new stringganador[128];
	DeathMatch = false; //EVITAR POSIBLES BUGS
	//Mensaje de Ganador para todos:
	for(new i; i < MP; i++)
    {
        if(JugadorEnDMM[i] == true)
    	{
			format(stringganador, sizeof(stringganador), "* {00FF00}Survival: %s(%d) ha ganado la ronda Survival - con %d kills! (jugadores inscritos: %d)", GetName(i), i, KillsEnMapaDM[i], JugadoresEntraron);
			SendClientMessageToAll(-1, stringganador);
			//AQUI IRA LOS PREMIOS, QUE HARÉ DESPUES:
			GameTextForPlayer(i, "~n~~n~~r~~h~~h~Felicidades ~n~~r~~h~~h~has ganado!", 3000, 3);
			//Elimina el TOP10(TextDraw):
    		PTDHide(i, TOPTD0[i]);
    		PTDHide(i, TOPTD1[i]);
    		PTDHide(i, TOPTD2[i]);
    		SpawnPlayer(i);
    		break;
		}
		return 1;
	}
    //Timer para spawnear y resetear variables(mapa):
    FinalizarMapai = defer FinalizarMapa();
	return 1;
}

timer FinalizarMapa[2000]()
{
	ResetearVariablesG();
	MapaTerminoBien = 1;
	//Spawnea a todos los jugadores participantes:
	for(new i; i < MP; i++)
    {
    	if(JugadorEnDMM[i] == true)
    	{
    		TogglePlayerControllable(i, true);
    		//Resetea variables para siguiente ronda:
			ResetearVariablesM(i);
    	}
    }
	stop FinalizarMapai;
}

funcion ResetearVariablesM(playerid)
{
  	//VariablesIndiviales:
  	JugadorEnDMM[playerid] = false;
  	KillsEnMapaDM[playerid] = 0;
  	JugadorSpecDM[playerid] = 0;
  	JugadorEnMSP[playerid] = false;
  	MostrarEstadisticas = false;
  	PTDHide(playerid, TiempoDMContador[playerid]);
  	PTDHide(playerid, TOPTD0[playerid]);
  	PTDHide(playerid, TOPTD1[playerid]);
	return 1;
}

funcion ResetearVariablesG()
{
	NombreEvento = "_";
	JugadoresDentro = 0;
	JugadoresEntraron = 0;
	DeathMatch = false;
	MapaIniciado = false;
	mxx = 0.0;
	myy = 0.0;
  	mzz = 0.0;
  	maa = 0.0;
  	mxx2 = 0.0;
  	myy2 = 0.0;
  	mzz2 = 0.0;
  	maa2 = 0.0;
  	mxx3 = 0.0;
  	myy3 = 0.0;
  	mzz3 = 0.0;
  	maa3 = 0.0;
  	mint = 0;
  	mworld = 0;
//  	mmp = 0;
  	msvv = 0;
  	mmk = 0;
  	mme = 0;
//  	mtm = 0;
	tmdm = 0;
  	MostrarEstadisticas = false;
  	KillTimer(stringTime);
  	for(new i; i < MP; i++) //Reseteamos todas las mochilas que se hayan creado
	{
		DestroyDynamicObject(MochilaObjecto[i]);
		Delete3DTextLabel(MochilaLabel[i]);
		MochilaObjecto[i] = 0;
	}
  	print("DEATHMATCH FINALIZADO CORRECTAMENTE, ESPERANDO RESPUESTA DEL SERVIDOR...");
  	if(MapaTerminoBien == 1) MREX = defer MapaRandomEX();
  	return 1;
}

// Enviamos un random Mapa(extraemos el numero random de la base de datos y de ahi colocamos el numero maximo que el random debe llegar).
// Se envia un timer y se activa cuando el randomex se ejecuta.
timer MapaRandomEX[20000]()
{
	new Cache:result, nr, numero, IDa = 0;
	new nm = 1;
    mysql_format(Conexion, queryx, sizeof(queryx), "SELECT `NumeroMapas`, `NumeroRandom` FROM `deathmatchzonesmax` WHERE ID=%d", IDa);
	result = mysql_query(Conexion, queryx);
//	nm2 = cache_get_field_content_int(0, "NumeroMapas");
	nr = cache_get_field_content_int(0, "NumeroRandom");
	numero = randomEx(nm, nr);
	MapaDeathMatchAzar(numero);
	cache_delete(result, Conexion);
	stop MREX;
	return 1;
}

stock GetPlayerHighestScores(array[][rankingEnum], left, right)
{
    new
        tempLeft = left,
        tempRight = right,
        pivot = array[(left + right) / 2][player_Score],
        tempVar
    ;
    while(tempLeft <= tempRight)
    {
        while(array[tempLeft][player_Score] > pivot) tempLeft++;
        while(array[tempRight][player_Score] < pivot) tempRight--;

        if(tempLeft <= tempRight)
        {
            tempVar = array[tempLeft][player_Score], array[tempLeft][player_Score] = array[tempRight][player_Score], array[tempRight][player_Score] = tempVar;
            tempVar = array[tempLeft][player_ID], array[tempLeft][player_ID] = array[tempRight][player_ID], array[tempRight][player_ID] = tempVar;
            tempLeft++, tempRight--;
        }
    }
    if(left < tempRight) GetPlayerHighestScores(array, left, tempRight);
    if(tempLeft < right) GetPlayerHighestScores(array, tempLeft, right);
}

//TIMER DE MAPA
funcion TiempoMapaContador()
{
	new stringg[80];
			if(Digito2 == 0)
			{
				if(Digito1 >= 1)
				{
					Digito1 -= 1;
	    			Digito2 = 60;
				}
				if(Digito1 == 0 && Digito2 == 0)
				{
		    		//CUANDO LOS DOS DIGITOS QUEDEN EN CEROS... ENTONCES TERMINAMOS TANTO EL DEATHMATCH COMO EL TIMER.
		    		FinalizarMapai = defer FinalizarMapa();
		    		KillTimer(stringTime);
		    		SendClientMessageToAll(-1, "{FFEC00}* DeathMatch: fue finalizado por agotarse el tiempo limite(+10m).");
				}
			}
			if(Digito2 <= 60)
			{
				Digito2 -= 1;
				if(Digito1 <= 9)
				{
					format(stringg, sizeof(stringg), "Tiempo Restante: ~n~          0%d:%d", Digito1, Digito2);
					if(Digito2 <= 9)
					{
		    			format(stringg, sizeof(stringg), "Tiempo Restante: ~n~          0%d:0%d", Digito1, Digito2);
					}
				}
				else
				{
					format(stringg, sizeof(stringg), "Tiempo Restante: ~n~          %d:%d", Digito1, Digito2);
					if(Digito2 <= 9)
					{
		    			format(stringg, sizeof(stringg), "Tiempo Restante: ~n~          %d:0%d", Digito1, Digito2);
					}
				}
			}
	for(new i; i < JugadoresDentro; i++)
	{
		if(JugadorEnDMM[i] == true)
		{
		    //DeathMatchTiempoString(i, stringg);
		    PTDShow(i, TiempoDMContador[i]);
     		PlayerTextDrawSetString(i, TiempoDMContador[i], stringg);
		}
	}
	stringTime = SetTimer("TiempoMapaContador", 1000, false);
	return 1;
}



stock TOP3DMensaje(playerid, text[])
{
     new X[250];
     format(X, sizeof(X), "%s", text);
	 PTDShow(playerid, TOPTD1[playerid]);
     PlayerTextDrawSetString(playerid, TOPTD1[playerid], X);
     return 1;
}

stock DeathMatchTiempoString(playerid, text[])
{
     new X[50];
     format(X, sizeof(X), "%s", text);
	 PTDShow(playerid, TiempoDMContador[playerid]);
     PlayerTextDrawSetString(playerid, TiempoDMContador[playerid], X);
     return 1;
}

stock BoxInformacionBolsa(playerid, text[])
{
     new X[250];
     format(X, sizeof(X), "%s", text);
	 PTDShow(playerid, SurvivalInfo3[playerid]);
	 PTDShow(playerid, SurvivalInfo[playerid]);
     PlayerTextDrawSetString(playerid, SurvivalInfo3[playerid], X);
     return 1;
}

stock BoxInformacionName(playerid, text[])
{
     new X[250];
     format(X, sizeof(X), "%s", text);
	 PTDShow(playerid, SurvivalInfo2[playerid]);
     PlayerTextDrawSetString(playerid, SurvivalInfo2[playerid], X);
     return 1;
}

//COMANDOS NIVEL 5

forward CrearEvento();
public CrearEvento()
{
	switch(random(3))
	{
		case 0:
		{
	  		EventoCLB();
	  		KillTimer(EventoCargarTimer);
	  		print("El Evento CLB fue iniciado correctamente");
	  		EventoEnCurso = 1;
    	}
		case 1:
		{
		 	//EventoIndividual1();
		 	EventoGvsB();
		 	KillTimer(EventoCargarTimer);
		 	print("El Evento GrovevsBallas fue iniciado correctamente");
		 	EventoEnCurso = 2;
		}
		case 2:
		{
			//EventoTDM();
			EventoCLB();
			KillTimer(EventoCargarTimer);
			print("El Evento TDM fue iniciado correctamente");
			EventoEnCurso = 1;
		}
   	}
 	return 1;
}

forward EventoCLB();
public EventoCLB()
{
	SendClientMessageToAll(-1, "{00FFFF}* El Evento {FFFFFF}\"Capturar la Bandera\"{00FFFF} está por comenzar!");
	SendClientMessageToAll(-1, "{00FFFF} Escribe: {FFFFFF}\"/unirse\"{00FFFF} para unirte a la batalla. Inicia en {FFFFFF}60{00FFFF} segundos!");
	//GameTextForAll("~n~~n~~y~~h~~h~Capturar la Bandera:~n~~g~~h~~h~/evento!", 6500, 5);
	CDEVENTO = SetTimer("ActivarElEvento", 60000, 0); //M1 Minuto 60000
	FlagRoja = CreatePickup(2914, 1, -1927.126708, -2886.924804, 4.679237, 50494);
	FlagAzul = CreatePickup(2914, 1, -1801.121704, -2814.390380, 4.548093, 50494);
	TextRoja = Create3DTextLabel("¡Bandera del Equipo Rojo!\n", 0xFF0000FF, -1927.126708, -2886.924804, 4.679237, 30.0, 50494, 0);
	TextAzul = Create3DTextLabel("¡Bandera del Equipo Azul!\n", 0x006EFFFF, -1801.121704, -2814.390380, 4.548093, 30.0, 50494, 0);
	EquipoEV[EQUIPO_AZUL] = 1;
	EntradaLibre = true;
	//for(new b; b < MAX_PLAYERS; b++){
	//PlayerTextDrawSetString(b, InfoEvento[b], "~y~Capturar la Bandera~w~~h~ est"a_a" por comenzar. Escribe: ~y~/unirse~w~~h~.");
	//PlayerTextDrawShow(b, InfoEvento[b]);}
	KillTimer(EventoCargarTimer);
	EventoEnCurso = 1;
	return 1;
}

funcion ActivarElEvento()
{
	KillTimer(CDEVENTO);
	if(JugadoresEnEvento >= 1)
	{
		EntradaLibre = false;
		for(new b; b < MAX_PLAYERS; b++)
		{
			//PlayerTextDrawHide(b, InfoEvento[b]);
			if(EnEvento[b] == 1)
			{
				if(EquipoEV[EQUIPO_ROJO] > EquipoEV[EQUIPO_AZUL])
 				{
   					RoAEquipo[b] = EQUIPO_AZUL;
   					EquipoEV[EQUIPO_AZUL] += 2;
   					EquipoEvento(b);
 				}
 				else if(EquipoEV[EQUIPO_AZUL] > EquipoEV[EQUIPO_ROJO])
 				{
   					RoAEquipo[b] = EQUIPO_ROJO;
   					EquipoEV[EQUIPO_ROJO] += 2;
   					EquipoEvento(b);
   				}
   			}
 		}
 	}
   	else SendClientMessageToAll(-1, "{FFD100}El Evento Capturar la Bandera se canceló por falta de participantes."), EventoCargarTimer = SetTimer("CrearEvento", 60000, true); //REactiva los Eventos Automaticos
 	return 1;
}

funcion EquipoEvento(playerid)
{
	KillTimer(CDEVENTOJ[playerid]);
	if(RoAEquipo[playerid] == EQUIPO_ROJO)
	{
		//new rand = random(sizeof(PosicionesRojos));
		GameTextForPlayer(playerid, "_~n~_~n~_~n~_~n~_~r~~h~~h~Eres del equipo Rojo!", 1000, 6);
		ShowPlayerDialog(playerid, AYUDAEVENTO, DIALOG_STYLE_MSGBOX, "{009FFF}Ayuda Eventos:", "{FFFFFF}Entraste al evento Capturar la Bandera.\n{FFFFFF}En este evento tendrás que capturar la bandera del equipo contrario para ganar.\n{FFFFFF}Recuerda también proteger la tuya.\n{FFFFFF}Habrá dos Equipos, {FF0000}Rojos {FFFFFF}y {0A7DF3}Azules{FFFFFF} y serás elegidos al azar por el sistema.", "Aceptar", "");
		switch(random(2))//Evita salir en la misma posición y hacer que se inmovilicen otros
		{
			case 0: SetPlayerPosEx(playerid, -1927.916748, -2874.566650 + 3, 4.686317, 66.405227, 0, 50494);
			case 1: SetPlayerPosEx(playerid, -1927.916748 + 3, -2874.566650, 4.686317, 66.405227, 0, 50494);
		}
		//SetPlayerPosEx(playerid, 1139.825439, 2774.697021, 10.531295, 306.008972, 0, 50494);
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 24, 1000);
		GivePlayerWeapon(playerid, 34, 100);
		GivePlayerWeapon(playerid, 31, 1000);
		GivePlayerWeapon(playerid, 25, 100);
		SetPlayerColor(playerid, 0xB30000FF);
	}
	else if(RoAEquipo[playerid] == EQUIPO_AZUL)
	{
		//new rand = random(sizeof(PosicionesAzules));
		GameTextForPlayer(playerid, "_~n~_~n~_~n~_~n~_~b~~h~~h~Eres del equipo Azul!", 1000, 6);
		ShowPlayerDialog(playerid, AYUDAEVENTO, DIALOG_STYLE_MSGBOX, "{009FFF}Ayuda Eventos:", "{FFFFFF}Entraste al evento Capturar la Bandera.\n{FFFFFF}En este evento tendrás que capturar la bandera del equipo contrario para ganar.\n{FFFFFF}Recuerda también proteger la tuya.\n{FFFFFF}Habrá dos Equipos, {FF0000}Rojos {FFFFFF}y {0A7DF3}Azules{FFFFFF} y serás elegidos al azar por el sistema.", "Aceptar", "");
		switch(random(2))
		{
			case 0: SetPlayerPosEx(playerid, -1801.379150, -2802.111816 + 3, 4.627378, 60.600730, 0, 50494);
			case 1: SetPlayerPosEx(playerid, -1801.379150 + 3, -2802.111816, 4.627378, 60.600730, 0, 50494);
		}
		//SetPlayerPosEx(playerid, PosicionesAzules[rand][0], PosicionesAzules[rand][1], PosicionesAzules[rand][2], PosicionesAzules[rand][3], 0, 50494);
		//SetPlayerPosEx(playerid, 1394.846679, 2788.926025, 10.820312, 205.623535, 0, 50494);
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 24, 1000);
		GivePlayerWeapon(playerid, 34, 100);
		GivePlayerWeapon(playerid, 31, 1000);
		GivePlayerWeapon(playerid, 25, 100);
		SetPlayerColor(playerid, 0x0084FFFF);
	}
	return 1;
}

forward EventoGvsB();
public EventoGvsB()
{
	SendClientMessageToAll(-1, "{00FFFF}* El Evento {FFFFFF}\"{00BE03}Grove v{DD0095}s Ballas{00FFFF}\" está por comenzar!");
	SendClientMessageToAll(-1, "{00FFFF} Escribe: {FFFFFF}\"/unirse\"{00FFFF} para unirte a la batalla. Inicia en {FFFFFF}60{00FFFF} segundos!");
	//GameTextForAll("~n~~n~~y~~h~~h~Capturar la Bandera:~n~~g~~h~~h~/evento!", 6500, 5);
	CDEVENTO = SetTimer("ActivarElEvento2", 60000, 0); //M1 Minuto 60000
	EquipoEV[EQUIPO_AZUL] = 1;
	EntradaLibre = true;
	//for(new b; b < MAX_PLAYERS; b++){
	//PlayerTextDrawSetString(b, InfoEvento[b], "~y~Grove vs Ballas~w~~h~ est"a_a" por comenzar. Escribe: ~y~/unirse~w~~h~.");
	//PlayerTextDrawShow(b, InfoEvento[b]);}
	KillTimer(EventoCargarTimer);
	EventoEnCurso = 2;
	return 1;
}

funcion ActivarElEvento2()
{
	KillTimer(CDEVENTO);
	if(JugadoresEnEvento >= 1)
	{
		EntradaLibre = false;
		for(new b; b < MAX_PLAYERS; b++)
		{
			//PlayerTextDrawHide(b, InfoEvento[b]);
			if(EnEvento[b] == 1)
			{
				if(EquipoEV[EQUIPO_ROJO] > EquipoEV[EQUIPO_AZUL])
 				{
   					RoAEquipo[b] = EQUIPO_AZUL;
   					EquipoEV[EQUIPO_AZUL] += 2;
   					EquipoEventoGvsB(b);
 				}
 				else if(EquipoEV[EQUIPO_AZUL] > EquipoEV[EQUIPO_ROJO])
 				{
   					RoAEquipo[b] = EQUIPO_ROJO;
   					EquipoEV[EQUIPO_ROJO] += 2;
   					EquipoEventoGvsB(b);
   				}
   			}
 		}
 	}
   	else SendClientMessageToAll(-1, "{FFD100}El Evento Grove vs Ballas se canceló por falta de participantes."), EventoCargarTimer = SetTimer("CrearEvento", 60000, true); //REactiva los Eventos Automaticos
 	return 1;
}

funcion EquipoEventoGvsB(playerid)
{
	KillTimer(CDEVENTOJ[playerid]);
	if(RoAEquipo[playerid] == EQUIPO_ROJO)
	{
		GameTextForPlayer(playerid, "_~n~_~n~_~n~_~n~_~g~~h~~h~Eres del equipo Grove!", 1000, 6);
		ShowPlayerDialog(playerid, AYUDAEVENTO, DIALOG_STYLE_MSGBOX, "{009FFF}Ayuda Eventos:", "{FFFFFF}Entraste al evento {00BE03}Grove v{DD0095}s Ballas.\n{FFFFFF}En este evento tendrás que llegar a 100 kills para poder ganar.\n{FFFFFF}El primer Equipo en llegar a los 100 kills ganará..\n{FFFFFF}Habrá dos Equipos, {00BE03}Grove {FFFFFF}y {DD0095}Balla{FFFFFF} y serás elegidos al azar por el sistema.", "Aceptar", "");
		PlayerTextDrawShow(playerid, TeamKills[0][playerid]);
		PlayerTextDrawShow(playerid, TeamKills[1][playerid]);
		switch(random(3))//Evita salir en la misma posición y hacer que se inmovilicen otros
		{
			case 0: SetPlayerPosEx(playerid, 2536.292480, -1664.624877, 15.155521, 182.285507, 0, 203);
			case 1: SetPlayerPosEx(playerid, 2511.974365, -1705.536865, 13.432870, 14.671751, 0, 203);
			case 2: SetPlayerPosEx(playerid, 2503.652099, -1640.858398, 13.515241, 171.256103, 0, 203);
		}
		switch(random(3))//Evita salir en la misma posición y hacer que se inmovilicen otros
		{
			case 0: SetPlayerSkin(playerid, 105);
			case 1: SetPlayerSkin(playerid, 106);
			case 2: SetPlayerSkin(playerid, 107);
		}
		SendClientMessage(playerid, -1, "{FFE900}*** ¡Recibiste un skin Grove al azar! Puedes cambiarlo si no te sientes comodo, usa: /skin [modelo].");
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 24, 1000);
		GivePlayerWeapon(playerid, 34, 100);
		GivePlayerWeapon(playerid, 31, 1000);
		GivePlayerWeapon(playerid, 25, 100);
		SetPlayerColor(playerid, 0x00BE03FF);
		PlayerTextDrawShow(playerid, TeamKills[3][playerid]);
	}
	else if(RoAEquipo[playerid] == EQUIPO_AZUL)
	{
		GameTextForPlayer(playerid, "_~n~_~n~_~n~_~n~_~b~~h~~h~Eres del equipo Balla!", 1000, 6);
		ShowPlayerDialog(playerid, AYUDAEVENTO, DIALOG_STYLE_MSGBOX, "{009FFF}Ayuda Eventos:", "{FFFFFF}Entraste al evento {00BE03}Grove v{DD0095}s Ballas.\n{FFFFFF}En este evento tendrás que llegar a 100 kills para poder ganar.\n{FFFFFF}El primer Equipo en llegar a los 100 kills ganará..\n{FFFFFF}Habrá dos Equipos, {00BE03}Grove {FFFFFF}y {DD0095}Balla{FFFFFF} y serás elegidos al azar por el sistema.", "Aceptar", "");
		PlayerTextDrawShow(playerid, TeamKills[0][playerid]);
		PlayerTextDrawShow(playerid, TeamKills[1][playerid]);
		switch(random(3))//Evita salir en la misma posición y hacer que se inmovilicen otros
		{
			case 0: SetPlayerPosEx(playerid, 2362.344238, -1678.398193, 13.547405, 3.518918, 0, 203);
			case 1: SetPlayerPosEx(playerid, 2357.182617, -1639.988037, 13.496489, 180.530822, 0, 203);
			case 2: SetPlayerPosEx(playerid, 2385.394775, -1636.728149, 13.492415, 179.193984, 0, 203);
		}
		switch(random(3))//Evita salir en la misma posición y hacer que se inmovilicen otros
		{
			case 0: SetPlayerSkin(playerid, 102);
			case 1: SetPlayerSkin(playerid, 103);
			case 2: SetPlayerSkin(playerid, 104);
		}
		SendClientMessage(playerid, -1, "{FFE900}*** ¡Recibiste un skin Balla al azar! Puedes cambiarlo si no te sientes comodo, usa: /skin [modelo].");
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 24, 1000);
		GivePlayerWeapon(playerid, 34, 100);
		GivePlayerWeapon(playerid, 31, 1000);
		GivePlayerWeapon(playerid, 25, 100);
		SetPlayerColor(playerid, 0xDD0095FF);
		PlayerTextDrawShow(playerid, TeamKills[3][playerid]);
	}
	return 1;
}

YCMD:unirse(playerid, params[], help)
{
	if(EventoEnCurso == 0)
	{
		SendClientMessage(playerid, -1, "{FFE900}* No hay ningún evento activado para poder participar!");
	}
	else if(EventoEnCurso == 1)
	{
		MensajeEventoCLB(playerid);
	}
	else if(EventoEnCurso == 2)
	{
		MensajeEventoGvsB(playerid);
	}
	return 1;
}

YCMD:desbugeventos(playerid, params[], help)
{
	CrearEvento();
	SendClientMessage(playerid, -1, "{FFE900}* Eventos desbugeados correctamente!");
	return 1;
}

YCMD:ctf(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Administrador[playerid] >= 5)
	{
		EventoCLB();
		SendClientMessage(playerid, -1, "{FFE900}Has activado el Evento correctamente.");
	}
	else return ErrorAdmin(playerid, 5);
	return 1;
}

YCMD:gvsb(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Administrador[playerid] >= 5)
	{
		EventoGvsB();
		SendClientMessage(playerid, -1, "{FFE900}Has activado el Evento correctamente.");
	}
	else return ErrorAdmin(playerid, 5);
	return 1;
}

funcion MensajeEventoCLB(playerid)
{
	if(EntradaLibre == false) return SendClientMessage(playerid, -1, "No tienes autorización para unirte al evento.");
	if(EnEvento[playerid] == 1) return SendClientMessage(playerid, -1, "Ya estás inscrito en el Evento.");
	SendClientMessage(playerid, -1, "{FF9B00}Has entrado al Evento Capturar la Bandera, espera a que se unan más jugadores. Comienza en 60 segundos.");
	SendClientMessage(playerid, -1, "*** Escribe: /sv para declinar tu inscripción al Evento, sólo lo puedes hacer antes de comenzar!");
	EnEvento[playerid] = 1;
	JugadoresEnEvento += 1;
	return 1;
}

funcion MensajeEventoGvsB(playerid)
{
	if(EntradaLibre == false) return SendClientMessage(playerid, -1, "No tienes autorización para unirte al evento.");
	if(EnEvento[playerid] == 1) return SendClientMessage(playerid, -1, "Ya estás inscrito en el Evento.");
	SendClientMessage(playerid, -1, "{FF9B00}Has entrado al Evento Grove vs Ballas, espera a que se unan más jugadores. Comienza en 60 segundos.");
	SendClientMessage(playerid, -1, "*** Escribe: /sv para declinar tu inscripción al Evento, sólo lo puedes hacer antes de comenzar!");
	EnEvento[playerid] = 1;
	JugadoresEnEvento += 1;
	return 1;
}

//====== FIN SISTEMA DE EVENTOS AL AZAR

YCMD:limpiarreportes(playerid, params[], help)
{
	if(Administrador[playerid] >= 5)
	{
	    new LimpiarRP[2], tmpbuf[128];
	    LimpiarRP = "";
		strmid(ReportesCelda[1], LimpiarRP, 0, strlen(LimpiarRP), 2);
 		strmid(ReportesCelda[2], LimpiarRP, 0, strlen(LimpiarRP), 2);
  		strmid(ReportesCelda[3], LimpiarRP, 0, strlen(LimpiarRP), 2);
   		strmid(ReportesCelda[4], LimpiarRP, 0, strlen(LimpiarRP), 2);
    	strmid(ReportesCelda[5], LimpiarRP, 0, strlen(LimpiarRP), 2);
    	strmid(ReportesCelda[6], LimpiarRP, 0, strlen(LimpiarRP), 2);
    	strmid(ReportesCelda[7], LimpiarRP, 0, strlen(LimpiarRP), 2);
    	strmid(ReportesCelda[8], LimpiarRP, 0, strlen(LimpiarRP), 2);
    	strmid(ReportesCelda[9], LimpiarRP, 0, strlen(LimpiarRP), 2);
    	strmid(ReportesCelda[10], LimpiarRP, 0, strlen(LimpiarRP), 2);
        ReportesActivosOcupados[1] = 0;
        ReportesActivosOcupados[2] = 0;
        ReportesActivosOcupados[3] = 0;
        ReportesActivosOcupados[4] = 0;
        ReportesActivosOcupados[5] = 0;
        ReportesActivosOcupados[6] = 0;
        ReportesActivosOcupados[7] = 0;
        ReportesActivosOcupados[8] = 0;
        ReportesActivosOcupados[9] = 0;
        ReportesActivosOcupados[10] = 0;
		ReportesGenerales = 0;
		SendClientMessage(playerid, -1, "{FFE900}*** Los últimos diez reportes hechos han sido borrados.");
		format(tmpbuf, sizeof(tmpbuf), "*** AdminInfo: %s(id:%d) a limpiado la lista de los últimos reportes.", GetName(playerid), playerid);
		AdminInfoOtro(tmpbuf);
	}
	else return ErrorAdmin(playerid, 5);
	return 1;
}

YCMD:dinerotodos(playerid, params[], help)
{
	if(Administrador[playerid] >= 5)
	{
	    if (!sscanf(params, "i", params[0]))
		{
			GetPlayerName(playerid, nombre, sizeof(nombre));
			format(stringj, sizeof(stringj), "{00FF8A}* Administrador %s a regalado $%d a todos los jugadores.", nombre, aDinero(params[0]));
			SendClientMessageToAll(-1, stringj);
    		foreach(new i : Player)
			{
				DineroJugador[i] += params[0];
				ResetPlayerMoney(i);
				GivePlayerMoney(i, DineroJugador[i]);
			}
		}
		else SendClientMessage(playerid, -1, "Usa: /dinerotodos [cantidad].");
	}
	else return ErrorAdmin(playerid, 5);
	return 1;
}

YCMD:sdv(playerid, params[], help)
{
	if(Administrador[playerid] >= 5)
	{
		new string[100];
		format(string, sizeof(string), "{FF8D00}* Administrador %s saco a todos de sus vehiculos.", GetName(playerid));
		SendClientMessageToAll(-1, string);
		for(new i = 0; i <= MP; i++){ RemovePlayerFromVehicle(i); }
   	}
	else return ErrorAdmin(playerid, 5);
	return 1;
}

YCMD:sv(playerid, params[], help)
{
	if(Administrador[playerid] >= 4)
	{
 		if (!sscanf(params, "i", params[0]))
		{
			new string[160];
 			if (IsPlayerConnected(params[0]))
  			{
   				format(string, sizeof(string), "{FF8D00}* Administrador %s te saco de tu vehiculo.", GetName(playerid));
    			SendClientMessage(params[0], -1, string);
    			format(stringp2, sizeof(stringp2), "{FF8D00}* Has sacado al jugador %s de su vehiculo.", GetName(params[0]));
    			SendClientMessage(playerid, -1, stringp2);
				RemovePlayerFromVehicle(params[0]);
   	 		}
        	else SendClientMessage(playerid, -1, "El jugador no se encuentra conectado.");
      	}
	  	else SendClientMessage(playerid, -1, "Usa: /sv(sacar de su vehiculo) [id].");
   	}
	else return ErrorAdmin(playerid, 4);
	return 1;
}

YCMD:mutetodos(playerid, params[], help)
{
	if(Administrador[playerid] >= 5)
	{
		new string[100];
		format(string, sizeof(string), "{00FF8A}* Administrador %s a silenciado a todos los jugadores.", GetName(playerid));
		SendClientMessageToAll(-1, string);
		for(new i = 0; i <= MP; i++){ Mute[i] = 1; }
   	}
	else return ErrorAdmin(playerid, 5);
	return 1;
}

YCMD:unmutetodos(playerid, params[], help)
{
	if(Administrador[playerid] >= 5)
	{
		new string[100];
		format(string, sizeof(string), "{00FF8A}* Administrador %s a desmuteado a todos los jugadores.", GetName(playerid));
		SendClientMessageToAll(-1, string);
		for(new i = 0; i <= MP; i++){ Mute[i] = 0; }
   	}
	else return ErrorAdmin(playerid, 5);
	return 1;
}

YCMD:musica(playerid, params[], help)
{
	if(Administrador[playerid] >= 5)
	{
 		ShowPlayerDialog(playerid, 3, DIALOG_STYLE_INPUT, "Música ON-LINE","{FFFFFF}Inserte la música que desea reproducir para todos:","Aceptar","Cancelar");
	}
	else return ErrorAdmin(playerid, 5);
	return 1;
}

YCMD:congelar(playerid, params[], help)
{
	if(Administrador[playerid] >= 5)
	{
        if (!sscanf(params, "is[150]", params[0], params[1]))
		{
 			if(playerid != params[0])
   			{
				if(IsPlayerConnected(params[0]))
				{
				    new string[88];
				    if (congelado[params[0]] == 1) return SendClientMessage(playerid, -1, "El jugador ya se encuentra congelado.");
			    	congelado[params[0]] = 1;
					format(string, sizeof(string), ""CA"* Administrador %s a congelado al jugador %s. (Razón: %s).", GetName(playerid), GetName(params[0]), params[1]);
			    	SendClientMessageToAll(-1, string);
					TogglePlayerControllable(params[0], false);
			    	SetCameraBehindPlayer(params[0]);
				}
				else SendClientMessage(playerid, -1, "El jugador no se encuentra conectado.");
			}
    		else SendClientMessage(playerid, -1, "{FFD600}*** No puedes hacerlo contigo mismo.");
      	}
	  	else SendClientMessage(playerid, -1, "Usa: /congelar [id] [razón].");
	}
  	else return ErrorAdmin(playerid, 5);
  	return 1;
}

YCMD:descongelar(playerid, params[], help)
{
	if(Administrador[playerid] >= 5)
	{
        if (!sscanf(params, "i", params[0]))
		{
 			//if(playerid != params[0])
   			//{
				if(IsPlayerConnected(params[0]))
				{
				    new string[88];
					format(string, sizeof(string), "{00E2FF}* Administrador %s a descongelado al jugador %s.", GetName(playerid), GetName(params[0]));
			    	SendClientMessageToAll(-1, string);
					TogglePlayerControllable(params[0], true);
			    	SetCameraBehindPlayer(params[0]);
			    	congelado[params[0]] = 0;
				}
				else SendClientMessage(playerid, -1, "El jugador no se encuentra conectado.");
			//}
    		//else SendClientMessage(playerid, -1, "{FFD600}*** No puedes hacerlo contigo mismo.");
      	}
	  	else SendClientMessage(playerid, -1, "Usa: /descongelar [id].");
	}
  	else return ErrorAdmin(playerid, 5);
  	return 1;
}

//COMANDOS NIVEL 6
YCMD:dinero(playerid, params[], help)
{
	if(Administrador[playerid] >= 6)
	{
        if (!sscanf(params, "ii", params[0], params[1]))
		{
			if(IsPlayerConnected(params[0]))
			{
    			new string[88];
				format(string, sizeof(string), "{00FF8A}* Administrador %s te a dado $%d de dinero.", GetName(playerid), params[1]);
    			format(stringp2, sizeof(stringp2), "{00FF8A}* Le diste $%d al jugador %s.", params[1], GetName(params[0]));
    			SendClientMessage(params[0], -1, string);
    			SendClientMessage(playerid, -1, stringp2);
    			DineroJugador[params[0]] += params[1];
       			GivePlayerMoney(params[0], DineroJugador[params[0]]);
			}
			else SendClientMessage(playerid, -1, "El jugador no se encuentra conectado.");
		}
	  	else SendClientMessage(playerid, -1, "Usa: /dinero [id] [dinero].");
	}
  	else return ErrorAdmin(playerid, 6);
  	return 1;
}

YCMD:arespawn(playerid, params[], help)
{
	if(Administrador[playerid] >= 6)
	{
	    new string[76];
	    format(string, sizeof(string), "{00FF8A}* Administrador %s a respawneado a todos los jugadores.", GetName(params[0]));
		SendClientMessageToAll(-1, string);
 		for(new i = 0; i <= MP; i++){ SpawnPlayer(i); }
	}
	else return ErrorAdmin(playerid, 6);
	return 1;
}

YCMD:congelartodos(playerid, params[], help)
{
	if(Administrador[playerid] >= 6)
	{
	    new string[76];
	    format(string, sizeof(string), ""CA"* Administrador %s a congelado a todos los jugadores.", GetName(params[0]));
		SendClientMessageToAll(-1, string);
 		for(new i = 0; i <= MP; i++){ TogglePlayerControllable(i, false); SetCameraBehindPlayer(i); }
	}
	else return ErrorAdmin(playerid, 6);
	return 1;
}

YCMD:descongelartodos(playerid, params[], help)
{
	if(Administrador[playerid] >= 6)
	{
	    new string[76];
	    format(string, sizeof(string), ""CA"* Administrador %s a descongelado a todos los jugadores.", GetName(params[0]));
		SendClientMessageToAll(-1, string);
 		for(new i = 0; i <= MP; i++){ TogglePlayerControllable(i, true); SetCameraBehindPlayer(i); }
	}
	else return ErrorAdmin(playerid, 6);
	return 1;
}

YCMD:invisible(playerid, params[], help)
{
	if(Administrador[playerid] >= 6)
	{
	    SetPlayerColor(playerid, 0x00000000);
	    SendClientMessage(playerid, -1, "{FFD400}*** Has activado la invisibilidad. (No te verás en el radar de los jugadores).");
 	}
	else return ErrorAdmin(playerid, 6);
	return 1;
}

YCMD:expulsartodos(playerid, params[], help)
{
	if(Administrador[playerid] >= 6)
	{
	    new string[76];
	    format(string, sizeof(string), "{C50000}* Administrador %s a kickeado a todos del servidor.", GetName(params[0]));
		SendClientMessageToAll(Rojo, string);
 		for(new i = 0; i <= MP; i++){ Kick(i); }
 	}
	else return ErrorAdmin(playerid, 6);
	return 1;
}

YCMD:vw(playerid, params[], help)
{
	if(Administrador[playerid] >= 6)
	{
        if (!sscanf(params, "ii", params[0], params[1]))
		{
			if(IsPlayerConnected(params[0]))
			{
    			new string[88];
				format(string, sizeof(string), "{00FF00}* Administrador %s cambió tu vw(virtualworld) a %d.", GetName(playerid), params[1]);
    			format(stringp2, sizeof(stringp2), "{00FF00}* Has cambiado el Virtual-World al jugador %s hacía el %d.", GetName(params[0]), params[1]);
    			SendClientMessage(params[0], -1, string);
    			SendClientMessage(playerid, -1, stringp2);
    			SetPlayerVirtualWorld(params[0], params[1]);
			}
			else SendClientMessage(playerid, -1, "El jugador no se encuentra conectado.");
		}
	  	else SendClientMessage(playerid, -1, "Usa: /vw [id] [vw(virtual-world)].");
	}
  	else return ErrorAdmin(playerid, 6);
  	return 1;
}

YCMD:int(playerid, params[], help)
{
	if(Administrador[playerid] >= 6)
	{
        if (!sscanf(params, "ii", params[0], params[1]))
		{
			if(IsPlayerConnected(params[0]))
			{
    			new string[88];
				format(string, sizeof(string), "{00FF00}* Administrador %s cambió tu interior a %d.", GetName(playerid), params[1]);
    			format(stringp2, sizeof(stringp2), "{00FF00}* Has cambiado el Interior al jugador %s hacía el %d.", GetName(params[0]), params[1]);
    			SendClientMessage(params[0], -1, string);
    			SendClientMessage(playerid, -1, stringp2);
    			SetPlayerInterior(params[0], params[1]);
			}
			else SendClientMessage(playerid, -1, "El jugador no se encuentra conectado.");
		}
	  	else SendClientMessage(playerid, -1, "Usa: /int [id] [int(interior)].");
	}
  	else return ErrorAdmin(playerid, 6);
  	return 1;
}

//COMANDOS ADMIN NIVEL 7(CR7 :D)
YCMD:bc(playerid, params[], help)
{
	if(Administrador[playerid] >= 7)
	{
	    LimpiarChatGeneral();
 	}
	else return ErrorAdmin(playerid, 7);
	return 1;
}

YCMD:ptp(playerid, params[], help)
{
	if(Administrador[playerid] >= 7)
	{
        if (!sscanf(params, "ii", params[0], params[1]))
		{
			if(IsPlayerConnected(params[0]) && IsPlayerConnected(params[1]))
			{
    			    new Float:X,Float:Z,Float:Y;
		    		GetPlayerPos(params[0],X,Y,Z);
		    		SetPlayerPos(params[1],X,Y,Z);
			}
			else
			{
		    	SendClientMessage(playerid, -1, "Uno de los jugadores no está conectado.");
		    	return 1;
			}
		}
	  	else SendClientMessage(playerid, -1, "Usa: /ptp [id/jugador 1] hacía [id/jugador 2].");
	}
  	else return ErrorAdmin(playerid, 7);
  	return 1;
}

YCMD:muertefalsa(playerid, params[], help)
{
	if(Administrador[playerid] >= 7)
	{
        if (!sscanf(params, "iii", params[0], params[1], params[2]))
		{
			if(IsPlayerConnected(params[0]))
			{
    			SendDeathMessage(params[0], params[1], params[2]);
			}
			else SendClientMessage(playerid, -1, "El jugador no se encuentra conectado.");
		}
	  	else SendClientMessage(playerid, -1, "Usa: /muertefalsa [id] [muerte] [razón(números/texto no)].");
	}
  	else return ErrorAdmin(playerid, 7);
  	return 1;
}

YCMD:traertodos(playerid, params[], help)
{
	if(Administrador[playerid] >= 7)
	{
	    new string[76], Float:X,Float:Y, Float:Z;
	    GetPlayerPos(playerid,X,Y,Z);
	    format(string, sizeof(string), "{00FF00}* Administrador %s teletrasporto a todos a su posición.", GetName(playerid));
		SendClientMessageToAll(-1, string);
 		for(new i = 0; i <= MP; i++){ SetPlayerPosExV(i,X+1,Y,Z+2); }
	}
	else return ErrorAdmin(playerid, 7);
	return 1;
}

YCMD:godmode(playerid, params[], help)
{
	if(Administrador[playerid] >= 8)
	{
	    if(GODMOD[playerid] == 0)
		{
			SendClientMessage(playerid, -1, "{00FF00}*** Has habilitado el godmode y ahora no recibirás daño.");
			SendClientMessage(playerid, -1, "   Para inhabilitarlo escribe el mismo comando.");
			GameTextForPlayer(playerid, "~r~~h~~h~Godmode~n~on!", 2000, 3);
        	SetPlayerHealth(playerid, 10000);
        	GODMOD[playerid] = 1;
        	//TextDrawShowForPlayer(playerid, GODMODActivo);
  		}
  		else
  		{
  		    SendClientMessage(playerid, -1, "{00FF00}*** Has deshabilitado el godmode y ahora recibirás daño.");
  		    SetPlayerHealth(playerid, 99.9);
  		    GameTextForPlayer(playerid, "~r~~h~~h~Godmode~n~off!", 2000, 3);
  		    GODMOD[playerid] = 0;
  		    //TextDrawHideForPlayer(playerid, GODMODActivo);
    	}
	}
	else return ErrorAdmin(playerid, 8);
	return 1;
}

YCMD:darscore(playerid, params[], help)
{
	if(Administrador[playerid] >= 8)
	{
        if (!sscanf(params, "ii", params[0], params[1]))
		{
			if(IsPlayerConnected(params[0]))
			{
    			new string[88];
				format(string, sizeof(string), "{00FF00}* Administrador %s te dio %d de score.", GetName(playerid), params[1]);
    			format(stringp2, sizeof(stringp2), "{00FF00}* Jugador %s recibió %d de score.", GetName(params[0]), params[1]);
    			SendClientMessage(params[0], -1, string);
    			SendClientMessage(playerid, -1, stringp2);
    			ScoreGeneralJugador[params[0]] += params[1];
				SetPlayerScore(params[0], ScoreGeneralJugador[params[0]]);
			}
			else SendClientMessage(playerid, -1, "El jugador no se encuentra conectado.");
		}
	  	else SendClientMessage(playerid, -1, "Usa: /darscore [id] [cantidad].");
	}
  	else return ErrorAdmin(playerid, 8);
  	return 1;
}

YCMD:darrangoasesino(playerid, params[], help)
{
	if(Administrador[playerid] >= 10)
	{
        if (!sscanf(params, "iiii", params[0], params[1], params[2], params[3]))
		{
			if(IsPlayerConnected(params[0]))
			{
    			new string[88];
				format(string, sizeof(string), "{00FF00}* Administrador %s te dio nivel %d de rango de asesino.", GetName(playerid), params[1]);
    			format(stringp2, sizeof(stringp2), "{00FF00}* Jugador %s recibió nivel %d de rango de asesino.", GetName(params[0]), params[1]);
    			SendClientMessage(params[0], -1, string);
    			SendClientMessage(playerid, -1, stringp2);
    			NIVEL_KILLS[params[0]] = params[1];
    			KillsAsesino[params[0]] = params[2];
    			MAX_KILLSASESINO[params[0]] = params[3];
    			EstadisticasInfo(params[0]);
			}
			else SendClientMessage(playerid, -1, "El jugador no se encuentra conectado.");
		}
	  	else SendClientMessage(playerid, -1, "Usa: /darscore [id] [cantidad].");
	}
  	else return ErrorAdmin(playerid, 10);
  	return 1;
}

YCMD:darpuntaje(playerid, params[], help)
{
	if(Administrador[playerid] >= 10)
	{
        if (!sscanf(params, "ii", params[0], params[1]))
		{
			if(IsPlayerConnected(params[0]))
			{
    			new string[88];
				format(string, sizeof(string), "{00FF00}* Administrador %s te dio %d de kills-asesino.", GetName(playerid), params[1]);
    			format(stringp2, sizeof(stringp2), "{00FF00}* El jugador %s recibió %d de kills-asesino.", GetName(params[0]), params[1]);
    			SendClientMessage(params[0], -1, string);
    			SendClientMessage(playerid, -1, stringp2);
    			PuntajeJugador[params[0]] += params[1];
				ScoreGeneralJugador[params[0]] += PuntajeJugador[params[0]];
				SetPlayerScore(params[0], GetPlayerScore(params[0]) + ScoreGeneralJugador[params[0]]);
				EstadisticasInfo(params[0]);
			}
			else SendClientMessage(playerid, -1, "El jugador no se encuentra conectado.");
		}
	  	else SendClientMessage(playerid, -1, "Usa: /darpuntaje [id] [cantidad(recuerda que contaran como asesinatos)].");
	}
  	else return ErrorAdmin(playerid, 8);
  	return 1;
}

/*YCMD:darrango(playerid, params[], help)
{
	if(Administrador[playerid] >= 8)
	{
        if (!sscanf(params, "ii", params[0], params[1]))
		{
			if(IsPlayerConnected(params[0]))
			{
    			new string[88];
				format(string, sizeof(string), "{E4D700}Administrador %s te dio %d de puntaje-asesino.", GetName(playerid), params[1]);
    			format(stringp2, sizeof(stringp2), "{E4D700}Jugador %s recibió %d de puntaje-asesino.", GetName(params[0]), params[1]);
    			SendClientMessage(params[0], -1, string);
    			SendClientMessage(playerid, -1, stringp2);
			 	new X[50];
     			format(X, sizeof(X), "%s", RangoNombreTD[params[1]-1]);
	 			PTDShow(params[0], RangoJugadorTD[params[0]]);
 				PlayerTextDrawSetString(params[0], RangoJugadorTD[params[0]], X);
				EstadisticasInfo(params[0]);
				EstadisticasInfo(params[0]);
			}
			else SendClientMessage(playerid, -1, "El jugador no se encuentra conectado.");
		}
	  	else SendClientMessage(playerid, -1, "Usa: /darpuntaje [id] [cantidad(recuerda que contaran como asesinatos)].");
	}
  	else return ErrorAdmin(playerid, 8);
  	return 1;
}*/

/*YCMD:darpuntuacion(playerid, params[], help)
{
	if(Administrador[playerid] >= 8)
	{
        if (!sscanf(params, "ii", params[0], params[1]))
		{
			if(IsPlayerConnected(params[0]))
			{
    			new string[88];
				format(string, sizeof(string), "{E4D700}Administrador %s te dio %d de puntuacion juego.", GetName(playerid), params[1]);
    			format(stringp2, sizeof(stringp2), "{E4D700}Jugador %s recibió %d de puntuacion juego.", GetName(params[0]), params[1]);
    			SendClientMessage(params[0], -1, string);
    			SendClientMessage(playerid, -1, stringp2);
    			KillsEnMapaDM[params[0]] += params[1];
    			ObtenerTOP();
			}
			else SendClientMessage(playerid, -1, "El jugador no se encuentra conectado.");
		}
	  	else SendClientMessage(playerid, -1, "Usa: /darpuntuacion [id] [cantidad(recuerda que contaran como asesinatos)].");
	}
  	else return ErrorAdmin(playerid, 8);
  	return 1;
}*/

YCMD:reiniciarveh(playerid, params[], help)
{
	if(Administrador[playerid] >= 9)
	{
	    new string[76];
	    format(string, sizeof(string), "{00FF8A}* Administrador %s a reiniciado todos los vehículos.", GetName(playerid));
		SendClientMessageToAll(-1, string);
 		for(new i = 0; i < MP; i++) { for(new v = 0; v < MAX_VEHICLES; v++) { if(!IsPlayerInVehicle(i,v)) SetVehicleToRespawn(v); } }
	}
	else return ErrorAdmin(playerid, 9);
	return 1;
}

YCMD:rdmd(playerid, params[], help)
{
	if(Administrador[playerid] >= 9)
	{
	    new string[76];
	    format(string, sizeof(string), "* AdminInfo: %s(ID:%d) desactivo el randommap(deathmatch).", GetName(playerid), playerid);
		AdminInfoOtro(string);
 		ResetearVariablesM(playerid);
 		ResetearVariablesG();
 		MapRandomDM = 0;
	}
	else return ErrorAdmin(playerid, 9);
	return 1;
}

YCMD:rdma(playerid, params[], help)
{
	if(Administrador[playerid] >= 9)
	{
	    new string[76];
	    format(string, sizeof(string), "* AdminInfo: %s(ID:%d) activo el randommap(deathmatch).", GetName(playerid), playerid);
		AdminInfoOtro(string);
 		MapRandomDM = 1;
 		SendClientMessage(playerid, -1, "{FFEC00}*** Un DeathMatch será activado automáticamente en unos min/seg por el sistema.");
 		MREX = defer MapaRandomEX();
	}
	else return ErrorAdmin(playerid, 9);
	return 1;
}

YCMD:gravedad(playerid, params[], help)
{
	if(Administrador[playerid] >= 9)
	{
	    if (!sscanf(params, "i", params[0]))
		{
	    	new string[76];
	    	format(string, sizeof(string), "{00FF8A}* Administrador %s a establecido la gravedad en %d.", GetName(playerid), params[0]);
			SendClientMessageToAll(-1, string);
			SetGravity(params[0]);
 		}
 		else return MensajeJugador(-1, "Usa: /gravedad [gravedad(ten cuidado con este comando)].");
	}
	else return ErrorAdmin(playerid, 9);
	return 1;
}

YCMD:maxping(playerid, params[], help)
{
	if(Administrador[playerid] >= 10)
	{
	    if (!sscanf(params, "d", params[0]))
		{
			new string[90];
			format(string, sizeof(string), "* AdminInfo: %s a establecido el ping máximo en %d.", GetName(playerid), params[0]);
			AdminInfoOtro(string);
			MAXPING = params[0];
 		}
 		else return MensajeJugador(-1, "Usa: /maxping [máximo de ping].");
	}
	else return ErrorAdmin(playerid, 10);
	return 1;
}

stock PlayerMaxPingCheck(playerid)
{
	new ping = GetPlayerPing(playerid);
	if(ping >= MAXPING)
	{
		new string[128];
	    format(string, sizeof(string), "{C00000}* AdminServer: %s a sido autokickeado por Exceso de Ping. (Valor máximo: %d).", GetName(playerid), MAXPING);
		SendClientMessageToAll(-1, string);
		KickTime[playerid] = SetTimerEx("KickPlayer", 500, 1, "ii", playerid, playerid);
	}
}

stock SendString(playerid, const str[], define)
{
	new tmpbuf[128];
	format(tmpbuf, sizeof(tmpbuf), str, define);
	SendClientMessage(playerid, -1, tmpbuf);
}

funcion TiempoReinicioContador()
{
	new stringg[80];
			if(Digito2R == 0)
			{
				if(Digito1R >= 1)
				{
					Digito1R -= 1;
	    			Digito2R = 60;
				}
				if(Digito1R == 0 && Digito2R == 0)
				{
		    		KillTimer(stringTime2);
		    		SendClientMessageToAll(-1, "{FFEC00}*** El servidor está siendo reiniciado...");
		    		GameTextForAll("_", 1200, 3);
		    		//mysql_reconnect();
		    		GameModeExit();
		    		return 1;
				}
			}
			if(Digito2R <= 60)
			{
				Digito2R -= 1;
				if(Digito1R <= 9)
				{
					format(stringg, sizeof(stringg), "~n~~n~~r~~h~~h~Reinicio: ~n~~r~~h~~h~0%d:%d", Digito1R, Digito2R);
					if(Digito2R <= 9)
					{
		    			format(stringg, sizeof(stringg), "~n~~n~~r~~h~~h~Reinicio: ~n~~r~~h~~h~0%d:0%d", Digito1R, Digito2R);
					}
				}
				else
				{
					format(stringg, sizeof(stringg), "~n~~n~~r~~h~~h~Reinicio: ~n~~r~~h~~h~%d:%d", Digito1R, Digito2R);
					if(Digito2R <= 9)
					{
		    			format(stringg, sizeof(stringg), "~n~~n~~r~~h~~h~Reinicio: ~n~~r~~h~~h~%d:0%d", Digito1R, Digito2R);
					}
				}
			}
   	GameTextForAll(stringg, 1200, 3);
	stringTime2 = SetTimer("TiempoReinicioContador", 1000, false);
	for(new i=0; i<MP; i++) PlayerPlaySound(i, 1139, 0.0, 0.0, 0.0);
	return 1;
}

YCMD:reinicio(playerid, params[], help)
{
	if(Administrador[playerid] >= 10)
	{
 		if (!sscanf(params, "i", params[0]))
		{
		    if(params[0] < 1 || params[0] > 60) return SendClientMessage(playerid, -1, "No puedes establecer un reinicio con ese tiempo. (+1min|-60min).");
			if(Digito1R == 0 && Digito2R == 0)
			{
		    	Digito1R = params[0];
		    	Digito2R = 0;
            	stringTime2 = SetTimer("TiempoReinicioContador", 1000, false);
            	format(stringp2, sizeof(stringp2), "* AdminInfo: %s estableció un reinicio en %d minuto/s.", GetName(playerid), params[0]);
    			AdminInfoOtro(stringp2);
            }
	  		else SendClientMessage(playerid, -1, "Ya hay un reinicio programado no puedes reprogramarlo.");
     	}
	  	else SendClientMessage(playerid, -1, "Usa: /reinicio [tiempo(en minutos ej: /reinicio 1)].");
   	}
	else return ErrorAdmin(playerid, 10);
	return 1;
}

YCMD:setadmin(playerid, params[], help)
{
	if(Administrador[playerid] >= 10)
	{
 		if (!sscanf(params, "ii", params[0], params[1]))
		{
			new string[160], string3[130], ano, mes, dia;
 			if (IsPlayerConnected(params[0]))
  			{
  			    if(Administrador[params[0]] < params[1])
  			    {
    				GameTextForPlayer(params[0], "~n~~r~~h~~h~Ascendido a...~n~Administrador!", 3000, 3);
    				getdate(ano, mes, dia);
    				format(stringp2, sizeof(stringp2), "* AdminInfo: %s dio Administrador nivel %d a %s.", GetName(playerid), params[1], GetName(params[0]));
    				AdminInfoOtro(stringp2);
    			
 					format(string, sizeof(string), "{FFEA00}* Has sido ascendido de rango/añadido a Administrador por '%s'!", GetName(playerid));
    				SendClientMessage(params[0], -1, string);
    				SendClientMessage(params[0], -1, " {FFEA00}Escribe: /acmds para recibir ayuda administrativa de tus nuevos comandos.");
    				SendClientMessage(params[0], -1, " {FFEA00}No olvides siempre revisar /reportes para estar pendientes de los cheats/hacks del servidor.");
 					format(string3, sizeof(string3), " {FFEA00}Has sido ingresado al grupo administrativo el día %d/%d/%d.", dia, mes, ano);
    				SendClientMessage(params[0], -1, string3);
    				SendClientMessage(params[0], -1, " {FFEA00}De parte del equipo que conforma el staff del servidor te damos una cordial bienvenida.");
    				SendClientMessage(params[0], -1, "{FF0000}=============================================================================================");
					Administrador[params[0]] = params[1];
					format(queryx, sizeof(queryx), "UPDATE `jugadores` SET NivelAdmin=%d WHERE Nombre='%s'", Administrador[params[0]], GetName(params[0]));
    				mysql_function_query(Conexion, queryx, true, "OnQueryFinish", "ii", 2, params[0]);
 				}
 				else
 				{
 				    format(stringp2, sizeof(stringp2), "* AdminInfo: %s a degradado a Administrador nivel %d a %s.", GetName(playerid), params[1], GetName(params[0]));
    				AdminInfoOtro(stringp2);
    				format(string, sizeof(string), "{FFEA00}* Has sido degradado de rango a Administrador nivel '%d' por '%s'!", params[1], GetName(playerid));
    				SendClientMessage(params[0], -1, string);
    				Administrador[params[0]] = params[1];
					format(queryx, sizeof(queryx), "UPDATE `jugadores` SET NivelAdmin=%d WHERE Nombre='%s'", Administrador[params[0]], GetName(params[0]));
    				mysql_function_query(Conexion, queryx, true, "OnQueryFinish", "ii", 2, params[0]);
 				}
   	 		}
        	else SendClientMessage(playerid, -1, "El jugador no se encuentra conectado.");
      	}
	  	else SendClientMessage(playerid, -1, "Usa: /setadmin [id] [nivel].");
   	}
	else return ErrorAdmin(playerid, 10);
	return 1;
}

YCMD:setvip(playerid, params[], help)
{
	if(Administrador[playerid] >= 10)
	{
 		if (!sscanf(params, "ii", params[0], params[1]))
		{
			new string[128], dia, mes, ano, string3[128];
 			if (IsPlayerConnected(params[0]))
  			{
    			GameTextForPlayer(params[0], "~n~~r~~h~~h~Rango v.i.p~n~agregado!", 3000, 3);
    			getdate(ano, mes, dia);
    			format(stringp2, sizeof(stringp2), "* AdminInfo: %s dio VIP%d a %s.", GetName(playerid), params[1], GetName(params[0]));
    			AdminInfoOtro(stringp2);
    			SendClientMessage(params[0], -1, "{FF0000}=============================================================================================");
 				format(string, sizeof(string), "{FFEA00}* Has recibido VIP%d del Administrador '%s'!", params[1], GetName(playerid));
    			SendClientMessage(params[0], -1, string);
    			SendClientMessage(params[0], -1, " {FFEA00}Escribe: /vcmds para recibir ayuda de tus nuevos comandos.");
    			SendClientMessage(params[0], -1, " {FFEA00}Recuerda que el abuso de los comandos VIP puede ser causa de baneo permanente.");
 				format(string3, sizeof(string3), " {FFEA00}Has sido ingresado al grupo administrativo el día %d/%d/%d.", dia, mes, ano);
    			SendClientMessage(params[0], -1, string3);
    			SendClientMessage(params[0], -1, "{FF0000}=============================================================================================");
				Vip[params[0]] = params[1];
				format(queryx, sizeof(queryx), "UPDATE `jugadores` SET Vip=%d WHERE Nombre='%s'", Vip[params[0]], GetName(params[0]));
    			mysql_function_query(Conexion, queryx, true, "OnQueryFinish", "ii", 2, params[0]);
   	 		}
        	else SendClientMessage(playerid, -1, "El jugador no se encuentra conectado.");
      	}
	  	else SendClientMessage(playerid, -1, "Usa: /setvip [id] [nivel].");
   	}
	else return ErrorAdmin(playerid, 10);
	return 1;
}

YCMD:acmds(playerid, params[], help)
{
	if (Administrador[playerid] == 1)
	{
 		ShowPlayerDialog(playerid, 2002, DIALOG_STYLE_LIST, "{00FFBD}Panel de Administrador","Ayuda Administrativa\nNivel 1\n","Seleccionar","Cancelar");
		return 1;
	}
	else if (Administrador[playerid] == 2)
	{
 		ShowPlayerDialog(playerid, 2002, DIALOG_STYLE_LIST, "{00FFBD}Panel de Administrador","Ayuda Administrativa\nNivel 1\nNivel 2\n","Seleccionar","Cancelar");
   		return 1;
	}
	else if (Administrador[playerid] == 3)
	{
		ShowPlayerDialog(playerid, 2002, DIALOG_STYLE_LIST, "{00FFBD}Panel de Administrador","Ayuda Administrativa\nNivel 1\nNivel 2\nNivel 3\n","Seleccionar","Cancelar");
  		return 1;
	}
	else if (Administrador[playerid] == 4)
	{
		ShowPlayerDialog(playerid, 2002, DIALOG_STYLE_LIST, "{00FFBD}Panel de Administrador","Ayuda Administrativa\nNivel 1\nNivel 2\nNivel 3\nNivel 4\n","Seleccionar","Cancelar");
  		return 1;
	}
	else if (Administrador[playerid] == 5)
	{
 		ShowPlayerDialog(playerid, 2002, DIALOG_STYLE_LIST, "{00FFBD}Panel de Administrador","Ayuda Administrativa\nNivel 1\nNivel 2\nNivel 3\nNivel 4\nNivel 5\n","Seleccionar","Cancelar");
   		return 1;
	}
	else if (Administrador[playerid] == 6)
	{
        ShowPlayerDialog(playerid, 2002, DIALOG_STYLE_LIST, "{00FFBD}Panel de Administrador","Ayuda Administrativa\nNivel 1\nNivel 2\nNivel 3\nNivel 4\nNivel 5\nNivel 6\n","Seleccionar","Cancelar");
        return 1;
	}
	else if (Administrador[playerid] == 7)
	{
 		ShowPlayerDialog(playerid, 2002, DIALOG_STYLE_LIST, "{00FFBD}Panel de Administrador","Ayuda Administrativa\nNivel 1\nNivel 2\nNivel 3\nNivel 4\n-Nivel 5\nNivel 6\nNivel 7\n","Seleccionar","Cancelar");
   		return 1;
	}
	else if (Administrador[playerid] == 8)
	{
 		ShowPlayerDialog(playerid, 2002, DIALOG_STYLE_LIST, "{00FFBD}Panel de Administrador","Ayuda Administrativa\nNivel 1\nNivel 2\nNivel 3\nNivel 4\nNivel 5\nNivel 6\nNivel 7\nNivel 8\n","Seleccionar","Cancelar");
   		return 1;
	}
	else if (Administrador[playerid] == 9)
	{
		ShowPlayerDialog(playerid, 2002, DIALOG_STYLE_LIST, "{00FFBD}Panel de Administrador","Ayuda Administrativa\nNivel 1\nNivel 2\nNivel 3\nNivel 4\nNivel 5\nNivel 6\nNivel 7\nNivel 8\nNivel 9\n","Seleccionar","Cancelar");
  		return 1;
	}
	else if (Administrador[playerid] == 10)
	{
 		ShowPlayerDialog(playerid, 2002, DIALOG_STYLE_LIST, "{00FFBD}Panel de Administrador","Ayuda Administrativa\nNivel 1\nNivel 2\nNivel 3\nNivel 4\nNivel 5\nNivel 6\nNivel 7\nNivel 8\nNivel 9\nNivel 10\n","Seleccionar","Cancelar");
   		return 1;
	}
	else return ErrorAdmin(playerid, 1);
}
//Nivel Legendario
YCMD:lsay(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Legendario[playerid] >= 1)
	{
		if (!sscanf(params, "s[90]", params[0]))
		{
			new x[170];
			format(x, sizeof(x), "{6C6B82}*** Legendario Negro %s: %s", GetName(playerid), params[0]);
			SendClientMessageToAll(-1, x);
		}
		else SendClientMessage(playerid, -1, "Usa: /lsay [texto a mostrar].");
	}
	else SendClientMessage(playerid, Rojo, "Comando solo para Usuarios Legendarios nivel 1.");
	return 1;
}

YCMD:nsay(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Legendario[playerid] == 3)
	{
		if (!sscanf(params, "s[90]", params[0]))
		{
			new x[170];
			format(x, sizeof(x), "{FFFF65}*** Legendario Oro %s: %s", GetName(playerid), params[0]);
			SendClientMessageToAll(-1, x);
		}
		else SendClientMessage(playerid, -1, "Usa: /nsay [texto a mostrar].");
	}
	else SendClientMessage(playerid, Rojo, "Comando solo para Usuarios Legendarios nivel 3.");
	return 1;
}

YCMD:lcolor(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Legendario[playerid] >= 1)
	{
		SetPlayerColor(playerid, 0xFFD700FF);
		SendClientMessage(playerid, -1, "{FFD700}Color Legendario colocado correctamente");
	}
	else SendClientMessage(playerid, Rojo, "Comando solo para Usuarios Legendarios nivel 3.");
	return 1;
}

YCMD:ncolor(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(Legendario[playerid] == 3)
	{
		SetPlayerColor(playerid, 0xFFD700FF);
		SendClientMessage(playerid, -1, "{FFD700}Color Legendario colocado correctamente");
	}
	else SendClientMessage(playerid, Rojo, "Comando solo para Usuarios Legendarios nivel 3.");
	return 1;
}

YCMD:anticheat(playerid, params[], help)
{
    if(Administrador[playerid] >= 1)
	{
	    new string[90];
	    format(string, sizeof(string), "{FF0000}Administrador %s activo el AntiCheat(Minigun).", GetName(playerid));
		SendClientMessageToAll(Rojo, string);
    	AntiCheatMinigun = 1;
	}
	else return ErrorAdmin(playerid, 1);
	return 1;
}

YCMD:aminigun(playerid, params[], help)
{
    new string[90];
    format(string, sizeof(string), "{FF0000}Administrador %s activo el AntiCheat(Minigun).", GetName(playerid));
	SendClientMessageToAll(Rojo, string);
    JugadoresCantidadMinijuegos[0] += 1;
	return 1;
}

YCMD:xxxxminijuegos(playerid, params[], help)
{
    new stringaa[1550], X[1000];
    format(X, sizeof(X),"{FFB100}Minigun               Jugadores: {FFFFFF}%d\n{FFB100}Minigun2              Jugadores: {FFFFFF}%d\n{FFB100}Minigun3              Jugadores: {FFFFFF}%d\n{FFB100}SniperDM             Jugadores: {FFFFFF}%d\n", JugadoresCantidadMinijuegos[0], JugadoresCantidadMinijuegos[1], JugadoresCantidadMinijuegos[2], JugadoresCantidadMinijuegos[3]);
    format(stringaa, sizeof(stringaa), "{FFB100}MotosierraDM     Jugadores: {FFB100}%d\n{00ABFF}RocketDM              Jugadores: {FFB100}%d\n{00ABFF}Paintball-WW    Jugadores: {FFFFFF}%d\n{FFB100}ZonaDM-WW     Jugadores: {FFFFFF}%d\n{FFB100}ZonaDM2-WW    Jugadores: {FFFFFF}%d\n{FFB100}ZonaDM3-WW    Jugadores: {FFFFFF}%d\n", JugadoresCantidadMinijuegos[4],
	JugadoresCantidadMinijuegos[5], JugadoresCantidadMinijuegos[6], JugadoresCantidadMinijuegos[7],
	JugadoresCantidadMinijuegos[8], JugadoresCantidadMinijuegos[9], JugadoresCantidadMinijuegos[10]);
	strcat(X, stringaa);
	format(stringaa, sizeof(stringaa), "{FFB100}ZonaDM4-WW    Jugadores: {FFFFFF}%d\n{FFB100}ZonaDM5-RW Jugadores:    {FFFFFF}%d\n{FFB100}ZonaDM6-RW    Jugadores: {FFFFFF}%d\n{FFB100}ZonaDM7-RW    Jugadores: {FFFFFF}%d\n",
	JugadoresCantidadMinijuegos[11], JugadoresCantidadMinijuegos[12], JugadoresCantidadMinijuegos[13],
	JugadoresCantidadMinijuegos[14], JugadoresCantidadMinijuegos[15]);
	strcat(X, stringaa);
    ShowPlayerDialog(playerid, 2014, DIALOG_STYLE_LIST, "{FFB100}Lista de Minijuegos:", X,"Seleccionar","Cancelar");
	return 1;
}

YCMD:minigunj(playerid, params[], help)
{
	GivePlayerWeapon(playerid, 38, 3000);
	EstaDM[playerid] = 0;
	return 1;
}

YCMD:minigunj2(playerid, params[], help)
{
	GivePlayerWeapon(playerid, 38, 3000);
	EstaDM[playerid] = 1;
	return 1;
}

YCMD:tlp(playerid, params[], help)
{
    if (!sscanf(params, "s[20]", params[0]))
	{
	new Float:X, Float:Z, Float:Y, Float:Rotation;
	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, Rotation);
	SendClientMessage(playerid, Amarillo,"Posición guardada correctamente.");
	new File:pos=fopen("POSICIONES.txt", io_append);
	format(stringj, sizeof(stringj), "{%f, %f, %f, %f}//%s\r\n", X, Y, Z, Rotation, params[0]);
	fwrite(pos, stringj);
	fclose(pos);
	}
	return 1;
}

YCMD:crearzonacc(playerid, params[], help)
{
	#pragma unused params
	if(!IsPlayerAdmin(playerid)) return SendClientMessage(playerid, -1, "{FF0000}* Comando solo para Administradores nivel RCON.");
	//if(Spawned[playerid] == false) return SendClientMessage(playerid, -1, "{FF0000}* Debes spawnear antes.");
	if(GangZone[playerid] == true) return SendClientMessage(playerid, -1, "{FF0000}* Ya has creado está zona!");
	if(IsPlayerInAnyVehicle(playerid)) RemovePlayerFromVehicle(playerid);
	ShowPlayerDialog(playerid, 9540, DIALOG_STYLE_LIST, "Creador de Zonas Conquistables:", "Crear Zona", "Aceptar", "Salir");
	return 1;
}

YCMD:duelo(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
    if (!sscanf(params, "iii", params[0], params[1], params[2]))
	{
	    //if(playerid != params[0])
		//{
			if(IsPlayerConnected(params[0]))
			{
			    if(params[1] > 0 || params[1] < 4)
			    {
			    	if(params[2] > 0 || params[2] < 5)
			    	{
			    	    if(InvitacionActiva[params[0]] == 0)
			    	    {
							DueloArmasTipo[params[0]] = params[1];
							DueloArenaTipo[params[0]] = params[2];
							DueloArmasTipo[playerid] = params[1];
							DueloArenaTipo[playerid] = params[2];
			    			new tString[150], tString2[150], ArmaTEXT[12], ArmaTEXTp[12];
       						if (DueloArmasTipo[params[0]] == 1) ArmaTEXT = "WW";
    						if (DueloArmasTipo[params[0]] == 2) ArmaTEXT = "RW";
    						if (DueloArmasTipo[params[0]] == 3) ArmaTEXT = "Solo Desert";
    						if (DueloArmasTipo[playerid] == 1) ArmaTEXTp = "WW";
    						if (DueloArmasTipo[playerid] == 2) ArmaTEXTp = "RW";
    						if (DueloArmasTipo[playerid] == 3) ArmaTEXTp = "Solo Desert";
      						format(tString, sizeof(tString), "{FFFF00}* Has invitado al jugador %s a un duelo Armas tipo %s en la Arena %d.", GetName(params[0]), ArmaTEXTp, params[2]);
   							SendClientMessage(playerid, -1, tString);
   							format(tString2, sizeof(tString2), "{00FF00}* Duelo: %s te ha invitado a un duelo con Armas %s en la Arena %d. Usa: /aceptar <%d>, para aceptar el duelo.", GetName(playerid), ArmaTEXT, params[2], playerid);
   							SendClientMessage(params[0], -1, tString2);
   							SendClientMessage(params[0], -1, "{FFFF00}La invitación estará activa solo 30 segundos, después se desactivará automaticamente.");
   							SendClientMessage(playerid, -1, "{FFFF00}La invitación estará activa solo 30 segundos, después se desactivará automaticamente.");

	   						InvitadoAlDuelo[params[0]] = playerid;
   							HasInvitadoAlDuelo[playerid] = 1;
							InvitacionActiva[playerid] = 1;
							InvitacionActiva[params[0]] = 1;
						}
						else SendClientMessage(playerid, -1, "Éste jugador ya tiene una invitación a duelo activa.");
					}
					else SendClientMessage(playerid, -1, "Solo puedes elegir entre las Arenas 1, 2, 3.");
				}
				else SendClientMessage(playerid, -1, "Solo puedes elegir entre las Armas 1, 2, 3.");
			}
			else SendClientMessage(playerid, -1, "El jugador no se encuentra conectado.");
		//}
		//else SendClientMessage(playerid, -1, "{FFD600}*** No puedes hacerlo contigo mismo.");
 	}
 	else SendClientMessage(playerid, -1, "Usa: /duelo [id] [ww(1)/rw(2)/sd(3)] [arena(1-3)]."), SendClientMessage(playerid, -1, "Ejemplo: /duelo 0 3 2.");
 	return 1;
}

YCMD:aceptar(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
    if (!sscanf(params, "i", params[0]))
	{
	    if(playerid != params[0])
		{
			if(IsPlayerConnected(params[0]))
			{
			    new tString3[128], ArmaTEXT[12];
                if(InvitadoAlDuelo[playerid] == params[0])
                {
                	new wvramdom = 10003000 + random(89939999);
       				if (DueloArmasTipo[playerid] == 1) ArmaTEXT = "WW";
					if (DueloArmasTipo[playerid] == 2) ArmaTEXT = "RW";
					if (DueloArmasTipo[playerid] == 3) ArmaTEXT = "Solo Desert";
                	format(tString3, sizeof(tString3), "{00FF00}* Duelo: Se a iniciado un duelo entre %s y %s con Armas %s en la Arena %d. ¡Usa: /verduelos!", GetName(playerid), GetName(params[0]), ArmaTEXT, DueloArenaTipo[playerid]);
        			SendClientMessageToAll(-1, tString3);
   					InitializeDuel(playerid, wvramdom);
        			InitializeDuelEx(params[0], wvramdom);
        			JugadorEnElDuelo[playerid] = 1;
        			JugadorEnElDuelo[params[0]] = 1;
        			DueloID1 = playerid;
        			DueloID2 = params[0];
           			DueloEnProgreso = 1;
           		}
           		else SendClientMessage(playerid, -1, "* No hay ninguna invitación a duelo de este jugador.");
			}
			else SendClientMessage(playerid, -1, "El jugador no se encuentra conectado.");
		}
		else SendClientMessage(playerid, -1, "{FFD600}*** No puedes hacerlo contigo mismo.");
 	}
 	else SendClientMessage(playerid, -1, "Usa: /duelo [id].");
 	return 1;
}

YCMD:verduelo(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(!sscanf(params, "i", params[0]))
	{
		if(JugadorEnElDuelo[params[0]] == 1)
		{
			new playerState = GetPlayerState(playerid);
			new stringg[100];
			if(playerState == PLAYER_STATE_SPECTATING)
    		{
				ViendoDuelo[playerid] = 1;
				EstaDM[playerid] = 1;
				TogglePlayerSpectating(playerid, true);
				PlayerSpectatePlayer(playerid, params[0], SPECTATE_MODE_NORMAL);
				GameTextForPlayer(playerid, "~g~~h~~h~"a_xa"Viendo duelo!", 3000, 3);
				SendClientMessage(playerid, -1, "Puedes escribir el mismo comando para actualizar la cámara. Cuando desees salir usa /verdoff.");
			}
			else
			{
				ViendoDuelo[playerid] = 1;
				EstaDM[playerid] = 1;
				TogglePlayerSpectating(playerid, true);
				PlayerSpectatePlayer(playerid, params[0], SPECTATE_MODE_NORMAL);
				format(stringg, sizeof(stringg), "{00FF00}Has entrado al modo espectador. Estás viendo a %s(%d)!", GetName(params[0]), params[0]);
				SendClientMessage(playerid, -1, stringg);
				GameTextForPlayer(playerid, "~g~~h~~h~"a_xa"Viendo duelo!", 3000, 3);
				SendClientMessage(playerid, -1, "Puedes escribir el mismo comando para actualizar la cámara. Cuando desees salir usa /verdoff.");
				GetPlayerWeaponData(playerid, 0, aArma[0][playerid], aMun[0][playerid]);
				GetPlayerWeaponData(playerid, 1, aArma[1][playerid], aMun[1][playerid]);
				GetPlayerWeaponData(playerid, 2, aArma[2][playerid], aMun[2][playerid]);
				GetPlayerWeaponData(playerid, 3, aArma[3][playerid], aMun[3][playerid]);
				GetPlayerWeaponData(playerid, 4, aArma[4][playerid], aMun[4][playerid]);
				GetPlayerWeaponData(playerid, 5, aArma[5][playerid], aMun[5][playerid]);
				GetPlayerWeaponData(playerid, 6, aArma[6][playerid], aMun[6][playerid]);
				GetPlayerWeaponData(playerid, 7, aArma[7][playerid], aMun[7][playerid]);
				GetPlayerWeaponData(playerid, 8, aArma[8][playerid], aMun[8][playerid]);
				GetPlayerWeaponData(playerid, 9, aArma[9][playerid], aMun[9][playerid]);
				GetPlayerWeaponData(playerid, 10, aArma[10][playerid], aMun[10][playerid]);
				GetPlayerPos(playerid, GPX[playerid], GPY[playerid], GPZ[playerid]);
				GetPlayerFacingAngle(playerid, GPA[playerid]);
				GetPlayerHealth(playerid, vVida[playerid]);
				GetPlayerArmour(playerid, aArmad[playerid]);
			}
		}
		else SendClientMessage(playerid, -1, "No hay ningún duelo en progreso con ese jugador.");
	}
	else SendClientMessage(playerid, -1, "Usa: /verduelo [id]");
	return 1;
}

YCMD:verdoff(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
	if(ViendoDuelo[playerid] == 1)
	{
		SetPlayerPosEx(playerid, GPX[playerid], GPY[playerid], GPZ[playerid], GPA[playerid], 0, 0);
		GivePlayerWeapon(playerid, aArma[0][playerid], aMun[0][playerid]);
		GivePlayerWeapon(playerid, aArma[1][playerid], aMun[1][playerid]);
		GivePlayerWeapon(playerid, aArma[2][playerid], aMun[2][playerid]);
		GivePlayerWeapon(playerid, aArma[3][playerid], aMun[3][playerid]);
		GivePlayerWeapon(playerid, aArma[4][playerid], aMun[4][playerid]);
		GivePlayerWeapon(playerid, aArma[5][playerid], aMun[5][playerid]);
		GivePlayerWeapon(playerid, aArma[6][playerid], aMun[6][playerid]);
		GivePlayerWeapon(playerid, aArma[7][playerid], aMun[7][playerid]);
		GivePlayerWeapon(playerid, aArma[8][playerid], aMun[8][playerid]);
		GivePlayerWeapon(playerid, aArma[9][playerid], aMun[9][playerid]);
		GivePlayerWeapon(playerid, aArma[10][playerid], aMun[10][playerid]);
		SetPlayerHealth(playerid, vVida[playerid]);
		SetPlayerArmour(playerid, aArmad[playerid]);
		GPX[playerid] = 0.0;
		GPY[playerid] = 0.0;
		GPZ[playerid] = 0.0;
		GPA[playerid] = 0.0;
		EstaDM[playerid] = 0;
		ViendoDuelo[playerid] = 0;
		vVida[playerid] = 0.0;
		aArmad[playerid] = 0.0;
		TogglePlayerSpectating(playerid, false);
		SetCameraBehindPlayer(playerid);
		SendClientMessage(playerid, -1, "Has dejado de ver el duelo. Regresaste a tu posición.");
	}
	else if(ViendoDuelo[playerid] == 0)
	{
		SendClientMessage(playerid, -1, "{FFFF00}No estás viendo ningún duelo en este momento!");
	}
	return 1;
}

YCMD:cancelar(playerid, params[], help)
{
	if(ComandosBloqueados[playerid] == true) return SendClientMessage(playerid, -1, "{FFFF00}* No hagas flood de comandos, es sancionado."), DesbloquearComandosP(playerid);
    if(HasInvitadoAlDuelo[playerid] == -0)
    {
        SendClientMessage(playerid, -1, "Cancelaste la invitación a duelo. Usa: /duelo <id> para re-enviar otro!");
        HasInvitadoAlDuelo[playerid] = 1000000000;
    }
    else SendClientMessage(playerid, -1, "No has invitado a nadie a duelo");
	return 1;
}

YCMD:siduelo(playerid, params[], help){ InvitacionActiva[playerid] = 0; return 1; }
YCMD:dv(playerid, params[], help){
    if (!sscanf(params, "i", params[0]))
	{
	    new stringgg[100];
    	format(stringgg, sizeof(stringgg), "VariableDuelo: %d Variable de Duelo ambos: %d", InvitadoAlDuelo[params[0]], JugadorEnElDuelo[params[0]]);
    	SendClientMessage(playerid, -1, stringgg);
    	Legendario[playerid] = 3;
    	TAGLN[playerid] = 1;
	}
	return 1;
}
//duelos
//duelos
funcion InitializeDuel(playerid, wv)
{
    if(DueloArmasTipo[playerid] == 1) ResetPlayerWeapons(playerid), GivePlayerWeapon(playerid, 24, 3000), GivePlayerWeapon(playerid, 25, 3000), GivePlayerWeapon(playerid, 34, 900);
   	if(DueloArmasTipo[playerid] == 2) ResetPlayerWeapons(playerid), GivePlayerWeapon(playerid, 26, 3000), GivePlayerWeapon(playerid, 28, 3000), GivePlayerWeapon(playerid, 31, 900);
   	if(DueloArmasTipo[playerid] == 3) ResetPlayerWeapons(playerid), GivePlayerWeapon(playerid, 24, 3000);
   	Conteo[playerid] = 11;
   	SetPlayerHealth(playerid, 99.9);
   	SetPlayerArmour(playerid, 99.9);
    if(DueloArenaTipo[playerid] == 1){
   	SetPlayerPosEx(playerid, -1394.3578,1281.2749,1039.8672, 176.7160, 16, wv);
   	SetCameraBehindPlayer(playerid);
   	TogglePlayerControllable(playerid, 0);
   	SetPlayerVirtualWorld(playerid, 1000);
   	SendClientMessage(playerid, -1, "{FF0000}=============================================================================================");
   	SendClientMessage(playerid, -1, "{E9FE00}* El duelo se ha iniciado, debes derrotar a tu rival para ganar.");
   	SendClientMessage(playerid, -1, "{E9FE00} Recuerda que puedes usar /salir para salir del duelo, pero contará como duelo perdido.");
   	SendClientMessage(playerid, -1, "{FF0000}=============================================================================================");
   	DueloTimer[playerid]  = SetTimerEx("DuelCountDown", 1000, 1, "i", playerid);
   	return 1;
   	}
   	else if(DueloArenaTipo[playerid] == 2){
   	SetPlayerPosEx(playerid, 298.443511, -134.787567, 1004.062500, 91.829933, 7, wv);
   	SetCameraBehindPlayer(playerid);
   	TogglePlayerControllable(playerid, 0);
   	SetPlayerVirtualWorld(playerid, 1000);
    SendClientMessage(playerid, -1, "{FF0000}=============================================================================================");
   	SendClientMessage(playerid, -1, "{E9FE00}* El duelo se ha iniciado, debes derrotar a tu rival para ganar.");
   	SendClientMessage(playerid, -1, "{E9FE00} Recuerda que puedes usar /salir para salir del duelo, pero contará como duelo perdido.");
   	SendClientMessage(playerid, -1, "{FF0000}=============================================================================================");
   	DueloTimer[playerid]  = SetTimerEx("DuelCountDown", 1000, 1, "i", playerid);
   	return 1;
   	}
   	else if(DueloArenaTipo[playerid] == 3){
   	SetPlayerPosEx(playerid, 1416.707885, -21.259851, 1000.926330, 91.200736, 1, wv);
   	SetCameraBehindPlayer(playerid);
   	TogglePlayerControllable(playerid, 0);
   	SetPlayerVirtualWorld(playerid, 1000);
   	SendClientMessage(playerid, -1, "{FF0000}=============================================================================================");
   	SendClientMessage(playerid, -1, "{E9FE00}* El duelo se ha iniciado, debes derrotar a tu rival para ganar.");
   	SendClientMessage(playerid, -1, "{E9FE00} Recuerda que puedes usar /salir para salir del duelo, pero contará como duelo perdido.");
   	SendClientMessage(playerid, -1, "{FF0000}=============================================================================================");
   	DueloTimer[playerid]  = SetTimerEx("DuelCountDown", 1000, 1, "i", playerid);
   	return 1;
   	}
   	else if(DueloArenaTipo[playerid] == 4){
   	SetPlayerPosEx(playerid, -975.398986, 1061.204467, 1345.671875, 92.852821, 10, wv);
   	SetCameraBehindPlayer(playerid);
   	TogglePlayerControllable(playerid, 0);
   	SetPlayerVirtualWorld(playerid, 1000);
   	SendClientMessage(playerid, -1, "{FF0000}=============================================================================================");
   	SendClientMessage(playerid, -1, "{E9FE00}* El duelo se ha iniciado, debes derrotar a tu rival para ganar.");
   	SendClientMessage(playerid, -1, "{E9FE00} Recuerda que puedes usar /salir para salir del duelo, pero contará como duelo perdido.");
   	SendClientMessage(playerid, -1, "{FF0000}=============================================================================================");
   	DueloTimer[playerid]  = SetTimerEx("DuelCountDown", 1000, 1, "i", playerid);
   	return 1;
   	}
   	return 1;
}

funcion InitializeDuelEx(playerid, wv)
{
   	if(DueloArmasTipo[playerid] == 1) ResetPlayerWeapons(playerid), GivePlayerWeapon(playerid, 24, 3000), GivePlayerWeapon(playerid, 25, 3000), GivePlayerWeapon(playerid, 34, 900);
   	if(DueloArmasTipo[playerid] == 2) ResetPlayerWeapons(playerid), GivePlayerWeapon(playerid, 26, 3000), GivePlayerWeapon(playerid, 28, 3000), GivePlayerWeapon(playerid, 31, 900);
   	if(DueloArmasTipo[playerid] == 3) ResetPlayerWeapons(playerid), GivePlayerWeapon(playerid, 24, 3000);
   	Conteo[playerid] = 11;
   	SetPlayerHealth(playerid, 99.9);
   	SetPlayerArmour(playerid, 99.9);
    if(DueloArenaTipo[playerid] == 1){
   	SetPlayerPosEx(playerid, -1400.8364,1211.2992,1039.8672, 355.6077, 16, wv);
   	SetCameraBehindPlayer(playerid);
   	TogglePlayerControllable(playerid, 0);
   	SetPlayerVirtualWorld(playerid, 1000);
   	SendClientMessage(playerid, -1, "{FF0000}=============================================================================================");
   	SendClientMessage(playerid, -1, "{E9FE00}* El duelo se ha iniciado, debes derrotar a tu rival para ganar.");
   	SendClientMessage(playerid, -1, "{E9FE00} Recuerda que puedes usar /salir para salir del duelo, pero contará como duelo perdido.");
   	SendClientMessage(playerid, -1, "{FF0000}=============================================================================================");
   	DueloTimer[playerid]  = SetTimerEx("DuelCountDown", 1000, 1, "i", playerid);
   	return 1;
   	}
   	else if(DueloArenaTipo[playerid] == 2){
   	SetPlayerPosEx(playerid, 273.942169, -135.382034, 1004.062500, 270.011291, 7, wv);
   	SetCameraBehindPlayer(playerid);
   	TogglePlayerControllable(playerid, 0);
   	SetPlayerVirtualWorld(playerid, 1000);
   	SendClientMessage(playerid, -1, "{FF0000}=============================================================================================");
   	SendClientMessage(playerid, -1, "{E9FE00}* El duelo se ha iniciado, debes derrotar a tu rival para ganar.");
   	SendClientMessage(playerid, -1, "{E9FE00} Recuerda que puedes usar /salir para salir del duelo, pero contará como duelo perdido.");
   	SendClientMessage(playerid, -1, "{FF0000}=============================================================================================");
   	DueloTimer[playerid]  = SetTimerEx("DuelCountDown", 1000, 1, "i", playerid);
   	return 1;
   	}
   	else if(DueloArenaTipo[playerid] == 3){
   	SetPlayerPosEx(playerid, 1360.824462, -22.169157, 1000.921875, 272.390167, 1, wv);
   	SetCameraBehindPlayer(playerid);
   	TogglePlayerControllable(playerid, 0);
   	SetPlayerVirtualWorld(playerid, 1000);
   	SendClientMessage(playerid, -1, "{FF0000}=============================================================================================");
   	SendClientMessage(playerid, -1, "{E9FE00}* El duelo se ha iniciado, debes derrotar a tu rival para ganar.");
   	SendClientMessage(playerid, -1, "{E9FE00} Recuerda que puedes usar /salir para salir del duelo, pero contará como duelo perdido.");
   	SendClientMessage(playerid, -1, "{FF0000}=============================================================================================");
   	DueloTimer[playerid]  = SetTimerEx("DuelCountDown", 1000, 1, "i", playerid);
   	return 1;
   	}
   	else if(DueloArenaTipo[playerid] == 4){
   	SetPlayerPosEx(playerid, -1130.030273, 1057.910644, 1346.414062, 272.371185, 10, wv);
   	SetCameraBehindPlayer(playerid);
   	TogglePlayerControllable(playerid, 0);
   	SetPlayerVirtualWorld(playerid, 1000);
   	SendClientMessage(playerid, -1, "{FF0000}=============================================================================================");
   	SendClientMessage(playerid, -1, "{E9FE00}* El duelo se ha iniciado, debes derrotar a tu rival para ganar.");
   	SendClientMessage(playerid, -1, "{E9FE00} Recuerda que puedes usar /salir para salir del duelo, pero contará como duelo perdido.");
   	SendClientMessage(playerid, -1, "{FF0000}=============================================================================================");
   	DueloTimer[playerid]  = SetTimerEx("DuelCountDown", 1000, 1, "i", playerid);
   	return 1;
   	}
   	return 1;
}

funcion DuelCountDown(playerid)
{
   new tString[15];
   Conteo[playerid] --;
   PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
   format(tString, sizeof(tString), "~r~~h~~h~%d", Conteo[playerid]);
   GameTextForPlayer(playerid, tString, 900, 3);
   if(Conteo[playerid] == 0)
   {
        KillTimer(DueloTimer[playerid]);
        TogglePlayerControllable(playerid, 1);
        GameTextForPlayer(playerid,"~g~~h~~h~"a_xa"Derrotalo!", 900, 3);
        return 1;
   }
   return 1;
}

funcion DesbloquearComandosP(playerid)
{
	DCJ[playerid]  = SetTimerEx("DBCJ", 2000, 1, "i", playerid);
	ComandosBloqueados[playerid] = false;
	return 1;
}

funcion DBCJ(playerid)
{
	KillTimer(DCJ[playerid]);
	ComandosBloqueados[playerid] = true;
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	//Sistema de Autos
	if(vehicleid == VehiculoVentaSF[0])
	{
		static istringj[500];
        strcat(istringj, "{FF9F00}Glendale Shit en Venta: \n\n{FF9F00}Categoría: {FFFFFF}Saloon\n{FF9F00}Precio: {FFFFFF}$10000\n{FF9F00}Nitro: {FFFFFF}Inhabilitado\n{FF9F00}Spawn: {FFFFFF}Cada Muerte\n");
        strcat(istringj, "{FF9F00}Radio: {FFFFFF}Habilitado\n{FF9F00}Cerradura: {FFFFFF}Habilitado\n{FF9F00}Ruedas: {FFFFFF}Inhabilitado\n{FF9F00}Color: {FFFFFF}Negro\n{FF9F00}Trabajo: {FFFFFF}No\n\n{FFFFFF}Pulsa Aceptar si deseas autorizar la compra.");
		ShowPlayerDialog(playerid, DIALOGOAUTOSCOMPRAR, DIALOG_STYLE_MSGBOX, "Comprar Auto:", istringj, "Aceptar", "Cancelar");
	}
	if(vehicleid == VehiculoVentaSF[1])
	{
		SendClientMessage(playerid, -1, "Has subido al auto número 1.");
	}
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	return 1;
}

//AF

public OnPlayerStateChange(playerid, newstate, oldstate)
{

	if(newstate == PLAYER_STATE_DRIVER)
	{
	    //VelocimetroL[playerid] = CreateProgressBar(492.00, 421.00, 82.50, 5.19, 11069439, 100.0);
        ShowProgressBarForPlayer(playerid, VelocimetroL[playerid]);
        PlayerTextDrawShow(playerid, VelocidadKMH);
		VelocimetroTimer[playerid] = SetTimerEx("Actualizar", 100, true, "i", playerid);
		SetProgressBarMaxValue(VelocimetroL[playerid], 250.0);
 		SetProgressBarColor(VelocimetroL[playerid], -888605185);
 		SetProgressBarMaxValue(VelocimetroL[playerid], 100);
 		SetProgressBarValue(VelocimetroL[playerid], 100);
 		UpdateProgressBar(VelocimetroL[playerid], playerid);
		new CASCO = random(4);
		if (CASCO == 0) { SetPlayerAttachedObject(playerid, 1, 18976, 2,0.08,0.0,0.0,85.0,90.0,0.0,1.2,1.2,1.2); }
		else if (CASCO == 1) { SetPlayerAttachedObject(playerid, 1, 18977, 2,0.08,0.0,0.0,85.0,90.0,0.0,1.2,1.2,1.2); }
		if (CASCO == 2) { SetPlayerAttachedObject(playerid, 1, 18978, 2,0.08,0.0,0.0,85.0,90.0,0.0,1.2,1.2,1.2); }
		else if (CASCO == 3) { SetPlayerAttachedObject(playerid, 1, 18979, 2,0.08,0.0,0.0,85.0,90.0,0.0,1.2,1.2,1.2); }
		return 1;
	}
	if(oldstate == PLAYER_STATE_DRIVER)
	{
		KillTimer(VelocimetroTimer[playerid]);
        //DestroyProgressBar(VelocimetroL[playerid]);
        PlayerTextDrawHide(playerid, VelocidadKMH);
		VelocimetroL[playerid] = INVALID_BAR_ID;
		RemovePlayerAttachedObject(playerid, 1);
		EstadisticasRangoAsesino(playerid);
		return 1;
	}
	return 1;
}

funcion EstadisticasRangoAsesino(playerid)
{
    ShowProgressBarForPlayer(playerid, VelocimetroL[playerid]);
    SetProgressBarMaxValue(VelocimetroL[playerid], MAX_KILLSASESINO[playerid]);
    SetProgressBarValue(VelocimetroL[playerid], KillsAsesino[playerid]);
	UpdateProgressBar(VelocimetroL[playerid], playerid);
	PlayerTextDrawShow(playerid, VelocidadKMH);
	PlayerTextDrawColor(playerid, VelocidadKMH, -888605185);
	PlayerTextDrawHide(playerid, PROMODE[playerid]);
    new stryng[15];
	if(MAX_KILLSASESINO[playerid] >= 0){
		format(stryng, sizeof(stryng), "         %d/%d", KillsAsesino[playerid], MAX_KILLSASESINO[playerid]);
    	PlayerTextDrawSetString(playerid, VelocidadKMH, stryng);
 	}
  	if(MAX_KILLSASESINO[playerid] >= 100){
		format(stryng, sizeof(stryng), "       %d/%d", KillsAsesino[playerid], MAX_KILLSASESINO[playerid]);
    	PlayerTextDrawSetString(playerid, VelocidadKMH, stryng);
 	}
 	if(MAX_KILLSASESINO[playerid] >= 1000){
		format(stryng, sizeof(stryng), "      %d/%d", KillsAsesino[playerid], MAX_KILLSASESINO[playerid]);
    	PlayerTextDrawSetString(playerid, VelocidadKMH, stryng);
 	}
 	if(MAX_KILLSASESINO[playerid] >= 10000){
		format(stryng, sizeof(stryng), "  %d/%d", KillsAsesino[playerid], MAX_KILLSASESINO[playerid]);
    	PlayerTextDrawSetString(playerid, VelocidadKMH, stryng);
 	}
 	if(Legendario[playerid] == 3)
 	{
 		PlayerTextDrawSetString(playerid, VelocidadKMH, "   Legendario");
 		PlayerTextDrawColor(playerid, VelocidadKMH, 0xFFD700FF);
 		SetProgressBarColor(VelocimetroL[playerid], 0xFFD700FF);
 		SetProgressBarMaxValue(VelocimetroL[playerid], 100);
 		SetProgressBarValue(VelocimetroL[playerid], 100);
 		UpdateProgressBar(VelocimetroL[playerid], playerid);
 	}
 	format(queryx, sizeof(queryx), "UPDATE `jugadores` SET `Rango`='%d', `MaxKills`='%d', `KillsAsesinoRango`='%d' WHERE Nombre='%s'", NIVEL_KILLS[playerid], MAX_KILLSASESINO[playerid], KillsAsesino[playerid], GetName(playerid));
   	mysql_function_query(Conexion, queryx, true, "OnQueryFinish", "ii", 2, playerid);
 	return 1;
}

funcion Actualizar(playerid)
{
    new Velo;
	if((Velo = GetPlayerSpeed(playerid)) && VelocimetroL[playerid] != INVALID_BAR_ID)
	{
		SetProgressBarValue(VelocimetroL[playerid], Velo);
		UpdateProgressBar(VelocimetroL[playerid], playerid);
	}

 	if(VelocidadKMH != PlayerText:INVALID_TEXT_DRAW)
 	{
 	    new stryng[22];
 		PlayerTextDrawColor(playerid, VelocidadKMH, -888605185);
 		if(GetPlayerSpeed(playerid) >= 1){
		format(stryng, sizeof(stryng), "        %d KM/H", GetPlayerSpeed(playerid));
    	PlayerTextDrawSetString(playerid, VelocidadKMH, stryng);
    	}
 	    if(GetPlayerSpeed(playerid) >= 100){
		format(stryng, sizeof(stryng), "       %d KM/H", GetPlayerSpeed(playerid));
    	PlayerTextDrawSetString(playerid, VelocidadKMH, stryng);
    	}
    	if(GetPlayerSpeed(playerid) >= 1000){
		format(stryng, sizeof(stryng), "       %d KM/H", GetPlayerSpeed(playerid));
    	PlayerTextDrawSetString(playerid, VelocidadKMH, stryng);
    	}
	}
    return 1;
}

stock GetPlayerSpeed(playerid)
{
    new Float:ST[4];
    if(IsPlayerInAnyVehicle(playerid))
    GetVehicleVelocity(GetPlayerVehicleID(playerid),ST[0],ST[1],ST[2]);
    else GetPlayerVelocity(playerid,ST[0],ST[1],ST[2]);
    ST[3] = floatsqroot(floatpower(floatabs(ST[0]), 2.0) + floatpower(floatabs(ST[1]), 2.0) + floatpower(floatabs(ST[2]), 2.0)) * 300.3;
    return floatround(ST[3]);
}

public OnPlayerEnterCheckpoint(playerid)
{
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	return 1;
}

//============== SISTEMA DE CARRERAS =======================//
public OnPlayerEnterRaceCheckpoint(playerid)
{
	if(CPProgess[playerid] == TotalCP -1)
	{
		new
		    TimeStamp,
		    TotalRaceTime,
		    string[128],
		    rFile[290],
		    pName[MAX_PLAYER_NAME],
			rTime[3],
			Prize[2],
			TempTotalTime,
			TempTime[3]
		;
		Position++;
		GetPlayerName(playerid, pName, sizeof(pName));
		TimeStamp = GetTickCount();
		TotalRaceTime = TimeStamp - RaceTick;
		ConvertTime(var, TotalRaceTime, rTime[0], rTime[1], rTime[2]);
		switch(Position)
		{
		    case 1: Prize[0] = (random(random(5000)) + 10000), Prize[1] = 5, JgRp[playerid] = 1, RacesS[playerid]++;
		    case 2: Prize[0] = (random(random(4500)) + 9000), Prize[1] = 5, RacesSx[playerid]++;
		    case 3: Prize[0] = (random(random(4000)) + 8000), Prize[1] = 5, RacesSx[playerid]++;
		    case 4: Prize[0] = (random(random(3500)) + 7000), Prize[1] = 4, RacesSx[playerid]++;
		    case 5: Prize[0] = (random(random(3000)) + 6000), Prize[1] = 4, RacesSx[playerid]++;
		    case 6: Prize[0] = (random(random(2500)) + 5000), Prize[1] = 4, RacesSx[playerid]++;
		    case 7: Prize[0] = (random(random(2000)) + 4000), Prize[1] = 5, RacesSx[playerid]++;
		    case 8: Prize[0] = (random(random(1500)) + 3000), Prize[1] = 2, RacesSx[playerid]++;
		    case 9: Prize[0] = (random(random(1000)) + 2000), Prize[1] = 1, RacesSx[playerid]++;
		    default: Prize[0] = random(random(1000)), Prize[1] = 1;
		}
		format(string, sizeof(string), "{00FF00}*** %s termino la carrera \"%s\" en la posición (%d/%d) tiempo: (%d:%d:%d).", pName, RaceName, Position, JoinCount, rTime[0], rTime[1], rTime[2]);
        SendClientMessageToAll(-1, string);
        NoJump[playerid] = 0;
        RaceEnter[playerid] = 0;
        DineroJugador[playerid] += Prize[0];
        ResetPlayerMoney(playerid);
        GivePlayerMoney(playerid, DineroJugador[playerid]);
		ScoreGeneralJugador[playerid] += Prize[1];
		SetPlayerScore(playerid, ScoreGeneralJugador[playerid]);
		DisablePlayerRaceCheckpoint(playerid);
		CPProgess[playerid]++;
		CarreraFinish(playerid, Position, Prize[0], Prize[1]);
		NoJump[playerid] = 0;
		if(FinishCount >= JoinCount) return StopRace();

		if(FinishCount <= 5)
		{
			format(rFile, sizeof(rFile), "/rRaceSystem/%s.RRACE", RaceName);
		    format(string, sizeof(string), "BestRacerTime_%d", TimeProgress);
		    TempTotalTime = dini_Int(rFile, string);
		    ConvertTime(var1, TempTotalTime, TempTime[0], TempTime[1], TempTime[2]);
		    if(TotalRaceTime <= dini_Int(rFile, string) || TempTotalTime == 0)
		    {
		        dini_IntSet(rFile, string, TotalRaceTime);
				format(string, sizeof(string), "Mejor Corredor_%d", TimeProgress);
				format(string, sizeof(string), "BestRacer_%d", TimeProgress);
				dini_Set(rFile, string, pName);
				TimeProgress++;
		    }
		}
		FinishCount++;
    }
	else
	{
		CPProgess[playerid]++;
		CPCoords[CPProgess[playerid]][3]++;
		RacePosition[playerid] = floatround(CPCoords[CPProgess[playerid]][3], floatround_floor);
	    SetCP(playerid, CPProgess[playerid], CPProgess[playerid]+1, TotalCP, RaceType);
	    PlayerPlaySound(playerid, 1137, 0.0, 0.0, 0.0);
	}
    return 1;
}

funcion CarreraFinish(playerid, ps, p1, p2)
{
	new string0[100];
 	format(string0, sizeof(string0), ""CA"Resultados: Posición: %d Dinero: $%d Score: %d.", ps, p1, p2);
    SendClientMessage(playerid, -1, string0);
   	return 1;
}

funcion BorrarTDRace(playerid)
{
	KillTimerEx(playerid, 44);
    TextDrawHideForPlayer(playerid, InfoRace0);
    TextDrawHideForPlayer(playerid, InfoRace1);
    TextDrawHideForPlayer(playerid, InfoRace2);
    TextDrawHideForPlayer(playerid, InfoRace3);
    TextDrawHideForPlayer(playerid, InfoRace4);
    return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

public OnRconCommand(cmd[])
{
	return 1;
}

public OnObjectMoved(objectid)
{
	return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
	if(pickupid == FlagRoja)
	{
		if(RoAEquipo[playerid] == EQUIPO_ROJO)
		{
			if(JugadorTieneLaFlagAzul[playerid] == 1 && LaBanderaEstaRoja == 0)
			{
				GameTextForAll("_~n~_~n~_~n~_~n~_~r~~h~~h~El equipo Rojo~n~~r~~h~~h~Gana la ronda!", 1600, 6);
				KillTimer(EventoCargarTimer);
				EventoCargarTimer = SetTimer("CrearEvento", 60000, true);
				for(new b; b < MP; b++)
				{
					if(EnEvento[b] == 1)
					{
						TogglePlayerControllable(b, 0);
						DestroyPickup(FlagRoja);
						EventoEnCurso = 0;
						SpawnearJugadores[b] = SetTimerEx("SpawnearEvento", 5000, false, "i", b);
					}
				}

			}
			if(LaBanderaEstaRoja == 1)
			{
				GameTextForAll("_~n~_~n~_~n~_~n~_~r~~h~~h~El equipo Rojo~n~~r~~h~~h~recupero la bandera!!", 1600, 6);
			}
		}
		if(RoAEquipo[playerid] == EQUIPO_AZUL)
		{
			GameTextForAll("_~n~_~n~_~n~_~n~_~b~~h~~h~EL equipo azul~n~~b~~h~~h~tiene la bandera!", 1300, 6);
			SetPlayerAttachedObject(playerid, 0, 2914, 5, 0.039999, 0.010000, 0.036999, 0.000000, 153.000106, -159.899963, 1.000000, 1.000000, 1.000000, 0, 0);
			DestroyPickup(FlagRoja);
			JugadorTieneLaFlagRojo[playerid] = 1;
			Delete3DTextLabel(TextRoja);
			LaBanderaEstaRoja = 1;
		}
	}

	else if(pickupid == FlagAzul)
	{
		if(RoAEquipo[playerid] == EQUIPO_AZUL)
		{
			if(JugadorTieneLaFlagRojo[playerid] == 1 && LaBanderaEstaAzul == 0)
			{
				GameTextForAll("_~n~_~n~_~n~_~n~_~b~~h~~h~EL equipo azul~n~~b~~h~~h~gana la ronda!", 1300, 6);
				KillTimer(EventoCargarTimer);
				EventoCargarTimer = SetTimer("CrearEvento", 60000, true);
				for(new b; b < MP; b++)
				{
					if(EnEvento[b] == 1)
					{
						TogglePlayerControllable(b, 0);
						DestroyPickup(FlagAzul);
						EventoEnCurso = 0;
						SpawnearJugadores[b] = SetTimerEx("SpawnearEvento", 5000, false, "i", b);
					}
				}
			}
			if(LaBanderaEstaAzul == 1)
			{
				GameTextForAll("_~n~_~n~_~n~_~n~_~b~~h~~h~EL equipo Azul~n~~b~~h~~h~recupero la bandera!", 1300, 6);
			}
		}
		if(RoAEquipo[playerid] == EQUIPO_ROJO)
		{
			GameTextForAll("_~n~_~n~_~n~_~n~_~r~~h~~h~EL equipo rojo~n~~r~~h~~h~tiene la bandera!", 1300, 6);
			SetPlayerAttachedObject(playerid, 0, 2914, 5, 0.039999, 0.010000, 0.036999, 0.000000, 153.000106, -159.899963, 1.000000, 1.000000, 1.000000, 0, 0);
			DestroyPickup(FlagAzul);
			JugadorTieneLaFlagAzul[playerid] = 1;
			Delete3DTextLabel(TextAzul);
			LaBanderaEstaAzul = 1;
		}
	}
	if(pickupid == JETPACKA[playerid])
	{
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USEJETPACK);
	}
	return 1;
}

//Función que respawnea a los jugadores dentro del evento.
funcion SpawnearEvento(playerid)
{
	KillTimer(SpawnearJugadores[playerid]);
	print("El Evento se finalizo correctamente!");
	EnEvento[playerid] = 0;
	JugadoresEnEvento = 0;
	EventoEnCurso = 0;
	EntradaLibre = false;
	JugadorTieneLaFlagAzul[playerid] = 0;
	JugadorTieneLaFlagRojo[playerid] = 0;
	LaBanderaEstaAzul = 0;
	LaBanderaEstaRoja = 0;
	PlayerTextDrawHide(playerid, TeamKills[0][playerid]);
	PlayerTextDrawHide(playerid, TeamKills[1][playerid]);
	DestroyPickup(FlagAzul);
	Delete3DTextLabel(TextAzul);
	RemovePlayerAttachedObject(playerid, 0);
	TeamKillsSuma[0] = 0;
	TeamKillsSuma[1] = 0;
	TeamDeahts[0] = 0;
	TeamDeahts[1] = 0;
	EquipoEV[EQUIPO_ROJO] = 0;
	EquipoEV[EQUIPO_AZUL] = 0;
	RoAEquipo[playerid] = 0;
	SpawnPlayer(playerid);
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
    new Menu:current;
    current = GetPlayerMenu(playerid);

	if(current == PanelAdmin1)
    {
        switch(row)
        {
            case 0:
			{
			    SetWeather(1);
			    HideMenuForPlayer(PanelAdmin1, playerid);
			    TogglePlayerControllable(playerid, 1);
				new stryng[60];
				format(stryng, sizeof(stryng), "{FFA300}* Administrador %s cambió el clima.", GetName(playerid));
    			SendClientMessageToAll(-1, stryng);
    			SendClientMessage(playerid, 0x00CFC4FF, "{B7FF00}* En ocaciones los climas tardan algunos segundos en dar efecto.");
            }
            case 1:
			{
			    SetWeather(11);
			    HideMenuForPlayer(PanelAdmin1, playerid);
			    TogglePlayerControllable(playerid, 1);
				new stryng[60];
				format(stryng, sizeof(stryng), "{FFA300}* Administrador %s cambió el clima.", GetName(playerid));
    			SendClientMessageToAll(-1, stryng);
    			SendClientMessage(playerid, 0x00CFC4FF, "{B7FF00}* En ocaciones los climas tardan algunos segundos en dar efecto.");
            }
            case 2:
			{
      			SetWeather(7);
			    HideMenuForPlayer(PanelAdmin1, playerid);
			    TogglePlayerControllable(playerid, 1);
				new stryng[60];
				format(stryng, sizeof(stryng), "{FFA300}* Administrador %s cambió el clima.", GetName(playerid));
    			SendClientMessageToAll(-1, stryng);
    			SendClientMessage(playerid, 0x00CFC4FF, "{B7FF00}* En ocaciones los climas tardan algunos segundos en dar efecto.");
            }
            case 3:
			{
          		SetWeather(8);
			    HideMenuForPlayer(PanelAdmin1, playerid);
			    TogglePlayerControllable(playerid, 1);
				new stryng[60];
				format(stryng, sizeof(stryng), "{FFA300}* Administrador %s cambió el clima.", GetName(playerid));
    			SendClientMessageToAll(-1, stryng);
    			SendClientMessage(playerid, 0x00CFC4FF, "{B7FF00}* En ocaciones los climas tardan algunos segundos en dar efecto.");
            }
            case 4:
			{
          		SetWeather(9);
			    HideMenuForPlayer(PanelAdmin1, playerid);
			    TogglePlayerControllable(playerid, 1);
				new stryng[60];
				format(stryng, sizeof(stryng), "{FFA300}* Administrador %s cambió el clima.", GetName(playerid));
    			SendClientMessageToAll(-1, stryng);
    			SendClientMessage(playerid, 0x00CFC4FF, "{B7FF00}* En ocaciones los climas tardan algunos segundos en dar efecto.");
			}
            case 5:
			{
			    SetWeather(19);
			    HideMenuForPlayer(PanelAdmin1, playerid);
			    TogglePlayerControllable(playerid, 1);
				new stryng[60];
				format(stryng, sizeof(stryng), "{FFA300}* Administrador %s cambió el clima.", GetName(playerid));
    			SendClientMessageToAll(-1, stryng);
    			SendClientMessage(playerid, 0x00CFC4FF, "{B7FF00}* En ocaciones los climas tardan algunos segundos en dar efecto.");
            }
            case 6:
			{
			    SetWeather(20);
			    HideMenuForPlayer(PanelAdmin1, playerid);
			    TogglePlayerControllable(playerid, 1);
				new stryng[60];
				format(stryng, sizeof(stryng), "{FFA300}* Administrador %s cambió el clima.", GetName(playerid));
    			SendClientMessageToAll(-1, stryng);
    			SendClientMessage(playerid, 0x00CFC4FF, "{B7FF00}* En ocaciones los climas tardan algunos segundos en dar efecto.");
            }
            case 7:
			{
			    HideMenuForPlayer(PanelAdmin1, playerid);
			    TogglePlayerControllable(playerid, 1);
			    SendClientMessage(playerid, 0x00CFC4FF, "{FFFFFF}* No has elegido ninguna opción.");
            }

        }
    }
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	return 1;
}

funcion DestroyBolsaText(playerid, idtimer)
{
    PTDHide(playerid, SurvivalInfo3[playerid]);
	PTDHide(playerid, SurvivalInfo2[playerid]);
	PTDHide(playerid, SurvivalInfo[playerid]);
	KillTimerEx(playerid, BolsaTimer[idtimer]);
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if(newkeys == 16)
	{
		if(EstaEditandoMapa[playerid] == true)
		{
			if(EstaEditandoPos1[playerid] == true)
			{
				GetPlayerPos(playerid, cx, cy, cz);
				GetPlayerFacingAngle(playerid, ca);
				cint = GetPlayerInterior(playerid);
				SendClientMessage(playerid, -1, "Posición establecida en el campo número uno.");
				EstaEditandoPos1[playerid] = false;
				POn1[playerid] = 1;
			}
			if(EstaEditandoPos2[playerid] == true)
			{
				GetPlayerPos(playerid, cx2, cy2, cz2);
				GetPlayerFacingAngle(playerid, ca2);
				cint = GetPlayerInterior(playerid);
				SendClientMessage(playerid, -1, "Posición establecida en el campo número dos.");
				EstaEditandoPos2[playerid] = false;
				POn2[playerid] = 1;
			}
			if(EstaEditandoPos3[playerid] == true)
			{
				GetPlayerPos(playerid, cx3, cy3, cz3);
				GetPlayerFacingAngle(playerid, ca3);
				cint = GetPlayerInterior(playerid);
				SendClientMessage(playerid, -1, "Posición establecida en el campo número tres.");
				EstaEditandoPos3[playerid] = false;
				POn3[playerid] = 1;
			}
		}
	}
	if(newkeys & KEY_FIRE)
    {
        for(new i; i < MP; i++)
		{
        	if(IsPlayerInRangeOfPoint(playerid, 1.0, SurvivalPosx[i], SurvivalPosy[i], SurvivalPosz[i]))
        	{
            	GivePlayerWeapon(playerid, ArmaSurvival[i][0], AmmoSurvival[i][0]);
            	GivePlayerWeapon(playerid, ArmaSurvival[i][1], AmmoSurvival[i][1]);
            	GivePlayerWeapon(playerid, ArmaSurvival[i][2], AmmoSurvival[i][2]);
            	GivePlayerWeapon(playerid, ArmaSurvival[i][3], AmmoSurvival[i][3]);
            	GivePlayerWeapon(playerid, ArmaSurvival[i][4], AmmoSurvival[i][4]);
            	DestroyDynamicObject(MochilaObjecto[i]);
				Delete3DTextLabel(MochilaLabel[i]);
				MochilaObjecto[i] = 0;
				PTDHide(playerid, SurvivalInfo3[playerid]);
	 			PTDHide(playerid, SurvivalInfo2[playerid]);
	 			PTDHide(playerid, SurvivalInfo[playerid]);
				//MochilaLabel[i] = 0;
				break;
        	}
		continue;
		}
    }
    if(newkeys & KEY_CROUCH)
    {
		new stryng2[37], coordsstring[500], X[700], ArmaText[25], ArmaText2[25], ArmaText3[25], ArmaText4[25], ArmaText5[25];
        for(new i; i < MP; i++)
		{
        	if(IsPlayerInRangeOfPoint(playerid, 1.0, SurvivalPosx[i], SurvivalPosy[i], SurvivalPosz[i]))
        	{
            	if(ArmaSurvival[i][0] == 24) ArmaText = "Desert Eagle";
	   			if(ArmaSurvival[i][0] == 23) ArmaText = "Silenciador 9mm";
    			if(ArmaSurvival[i][0] == 22) ArmaText = "Pistola 9mm";
    			if(ArmaSurvival[i][1] == 25) ArmaText2 = "Shotgun";
 				if(ArmaSurvival[i][1] == 26) ArmaText2 = "Recortada";
    			if(ArmaSurvival[i][1] == 27) ArmaText2 = "Shotgun combate";
    			if(ArmaSurvival[i][2] == 28) ArmaText3 = "UZI";
 				if(ArmaSurvival[i][2] == 29) ArmaText3 = "MP5";
    			if(ArmaSurvival[i][2] == 32) ArmaText3 = "TEC-9";
				if(ArmaSurvival[i][3] == 31) ArmaText4 = "M4";
    			if(ArmaSurvival[i][3] == 30) ArmaText4 = "AK-47";
    			if(ArmaSurvival[i][4] == 33) ArmaText5 = "Rifle";
    			if(ArmaSurvival[i][4] == 34) ArmaText5 = "Sniper";
    			switch(ArmaSurvival[i][0])
    			{
        			case 0:{}                                           
					case 24:{ format(coordsstring, sizeof(coordsstring), "%s            %d balas~n~", ArmaText, AmmoSurvival[i][0]); strcat(X, coordsstring);}
					case 23:{ format(coordsstring, sizeof(coordsstring), "%s            %d balas~n~", ArmaText, AmmoSurvival[i][0]); strcat(X, coordsstring);}
					case 22:{ format(coordsstring, sizeof(coordsstring), "%s            %d balas~n~", ArmaText, AmmoSurvival[i][0]); strcat(X, coordsstring);}
				}
				switch(ArmaSurvival[i][1])
    			{
        			case 0:{}
					case 25:{ format(coordsstring, sizeof(coordsstring), "%s            %d balas~n~", ArmaText2, AmmoSurvival[i][1]); strcat(X, coordsstring);}
					case 26:{ format(coordsstring, sizeof(coordsstring), "%s            %d balas~n~", ArmaText2, AmmoSurvival[i][1]); strcat(X, coordsstring);}
					case 27:{ format(coordsstring, sizeof(coordsstring), "%s            %d balas~n~", ArmaText2, AmmoSurvival[i][1]); strcat(X, coordsstring);}
				}
				switch(ArmaSurvival[i][2])
    			{
        			case 0:{}
					case 28:{ format(coordsstring, sizeof(coordsstring), "%s            %d balas~n~", ArmaText3, AmmoSurvival[i][2]); strcat(X, coordsstring);}
					case 29:{ format(coordsstring, sizeof(coordsstring), "%s            %d balas~n~", ArmaText3, AmmoSurvival[i][2]); strcat(X, coordsstring);}
					case 32:{ format(coordsstring, sizeof(coordsstring), "%s            %d balas~n~", ArmaText3, AmmoSurvival[i][2]); strcat(X, coordsstring);}
				}
				switch(ArmaSurvival[i][3])
    			{
        			case 0:{}
					case 31:{ format(coordsstring, sizeof(coordsstring), "%s            %d balas~n~", ArmaText4, AmmoSurvival[i][3]); strcat(X, coordsstring);}
					case 30:{ format(coordsstring, sizeof(coordsstring), "%s            %d balas~n~", ArmaText4, AmmoSurvival[i][3]); strcat(X, coordsstring);}
				}
				switch(ArmaSurvival[i][4])
    			{
        			case 0:{}
					case 33:{ format(coordsstring, sizeof(coordsstring), "%             %d balas~n~", ArmaText5, AmmoSurvival[i][4]); strcat(X, coordsstring);}
					case 34:{ format(coordsstring, sizeof(coordsstring), "%s            %d balas~n~", ArmaText5, AmmoSurvival[i][4]); strcat(X, coordsstring);}
				}
				BoxInformacionBolsa(playerid, X);
				format(stryng2, sizeof(stryng2),"%s:", NameBolsa);
				BoxInformacionName(playerid, stryng2);
				BolsaTimer[i] = SetTimerEx("DestroyBolsaText", 2500, false, "ii", playerid, i);
				break;
        	}
		continue;
		}
    }
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING && apiIDVigilado[playerid] != MP)
	{
		if(newkeys == KEY_SPRINT)
			AdvanceSpectate(playerid);
		//else if(newkeys == KEY_SPRINT)
			//ReverseSpectate(playerid);
	}
    if(newkeys & KEY_FIRE)
    {
        if (IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            if(NoJump[playerid] == 3)
			{
            new vehicleid = GetPlayerVehicleID(playerid);
            new Float:angle;
            GetVehicleZAngle(vehicleid, angle);

            new Float:velox, Float:veloy, Float:veloz;
            GetVehicleVelocity(vehicleid, velox, veloy, veloz);

            velox += floatsin(-angle, degrees);
            veloy += floatcos(-angle, degrees);
            SetVehicleVelocity(vehicleid, velox, veloy, veloz);
            GameTextForPlayer(playerid, "~n~~n~~n~~r~~h~turbooo", 600, 5);
            }
        }
    }

    if(newkeys == KEY_FIRE) {
        if(JugadorEnMSP[playerid] == true) {
            SpectatePrevious(playerid);
        }
    }
    if(newkeys == KEY_SPRINT) {
        if(JugadorEnMSP[playerid] == true) {
            SpectateNext(playerid);
        }
    }

   	if (newkeys & KEY_ACTION)
   	{
   	    if(NoJump[playerid] == 2)
		{
			if (IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    		{
    			GameTextForPlayer(playerid, "~n~~n~~n~~r~~h~turbooo", 600, 5);
				new Float:vx, Float:vy, Float:vz;
    			GetVehicleVelocity(GetPlayerVehicleID(playerid), vx, vy, vz);
    			if (floatabs(vx) < 3 && floatabs(vy) < 3 && floatabs(vz) < 3)
    			{
					SetVehicleVelocity(GetPlayerVehicleID(playerid), vx * SpeedBoostMultiplier[playerid], vy * SpeedBoostMultiplier[playerid], vz * SpeedBoostMultiplier[playerid]);
  				}
			}
		}
	}

	if(NoJump[playerid] == 1)
	{
		if(IsPlayerInAnyVehicle(playerid))
    	{
    		new nitro = GetPlayerVehicleID(playerid);
    		if (newkeys & KEY_FIRE)
    		{
    			RemoveVehicleComponent(nitro,1010);
    			AddVehicleComponent(nitro,1010);
    			GameTextForPlayer(playerid, "~n~~n~~n~~r~~h~nitrooo", 600, 5);
    		}
    	}
    }
    if (newkeys & KEY_CROUCH)
    {
        if(NoSALTO[playerid] ==1)
        {}
        	if (IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        	{
       		new
    		Float:f_x,
			Float:f_y,
			Float:f_z;

			GetVehicleVelocity(GetPlayerVehicleID(playerid), f_x, f_y, f_z);
			SetVehicleVelocity(GetPlayerVehicleID(playerid), f_x, f_y, f_z + 0.2);
			GameTextForPlayer(playerid, "~n~~n~~n~~r~~h~saltooo", 600, 5);
   		}
	}

	if(newkeys & KEY_YES)
   	{
        if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsPlayerConnected(playerid))
        {
        	GameTextForPlayer(playerid, "~n~~n~~n~~r~~h~vehiculo~n~~r~~h~volteado", 600, 5);
			new VehicleID, Float:Angle;
			VehicleID = GetPlayerVehicleID(playerid);
			GetVehicleZAngle(VehicleID, Angle);
			SetVehicleZAngle(VehicleID, Angle);
        }
        //CASAADMIN
        if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && IsPlayerConnected(playerid))
        {
        	if(IsPlayerInRangeOfPoint(playerid, 1.0, -1505.390991, 2475.138916, 75.430252))//JAULA FUERA
			{
				CargarMapa(playerid);
				TogglePlayerControllable(playerid, false);
				SetPlayerPos(playerid, -1497.310424, 2474.217773, 75.426422);
				SetPlayerInterior(playerid, 0);
				SendClientMessage(playerid, -1, "Espera unos segundos mientras se carga el mapa");
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, -1497.310424, 2474.217773, 75.426422))//JAULA DENTRO
			{
				CargarMapa(playerid);
				TogglePlayerControllable(playerid, false);
				SetPlayerPos(playerid, -1505.390991, 2475.138916, 75.430252);
				SetPlayerInterior(playerid, 0);
				SendClientMessage(playerid, -1, "Espera unos segundos mientras se carga el mapa");
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, -1401.353149, 2648.795410, 55.687500))//CASA FUERA
			{
				CargarMapa(playerid);
				TogglePlayerControllable(playerid, false);
				SetPlayerPos(playerid, -1390.7355,2652.3220,73.7706);
				SetPlayerInterior(playerid, 0);
				SendClientMessage(playerid, -1, "Espera unos segundos mientras se carga el mapa");
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, -1390.7355,2652.3220,73.7706))//CASA DENTRO
			{
				CargarMapa(playerid);
				TogglePlayerControllable(playerid, false);
				SetPlayerPos(playerid, -1401.353149, 2648.795410, 55.687500);
				SetPlayerInterior(playerid, 0);
				SendClientMessage(playerid, -1, "Espera unos segundos mientras se carga el mapa");
			}
			else if(IsPlayerInRangeOfPoint(playerid, 3.0, -1465.617919, 2531.445800, 56.091407))//ES
			{
				MoveDynamicObject(Elevador[playerid], -1468.74231, 2529.29150, 77.12576, 9.0,  0.00000, 0.00000, 0.75960);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 3.0, -1472.181884, 2530.906982, 76.198822))//EB
			{
				MoveDynamicObject(Elevador[playerid], -1468.34387, 2529.50732, 57.12370, 9.0,  0.00000, 0.00000, 180.88371);
			}
		}
    }

    new
 		string[256],
 		rNameFile[256],
   		rFile[256],
     	Float: vPos[4]
	;
	if(newkeys & KEY_FIRE)
	{
	    if(BuildRace == playerid+1)
	    {
		    if(BuildTakeVehPos == true)
		    {
		    	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, Rojo, "* No estás dentro de un vehiculo.");
				format(rFile, sizeof(rFile), "/rRaceSystem/%s.RRACE", BuildName);
				GetVehiclePos(GetPlayerVehicleID(playerid), vPos[0], vPos[1], vPos[2]);
				GetVehicleZAngle(GetPlayerVehicleID(playerid), vPos[3]);
		        dini_Create(rFile);
				dini_IntSet(rFile, "vModel", BuildModeVID);
				dini_IntSet(rFile, "rType", BuildRaceType);
		        format(string, sizeof(string), "vPosX_%d", BuildVehPosCount), dini_FloatSet(rFile, string, vPos[0]);
		        format(string, sizeof(string), "vPosY_%d", BuildVehPosCount), dini_FloatSet(rFile, string, vPos[1]);
		        format(string, sizeof(string), "vPosZ_%d", BuildVehPosCount), dini_FloatSet(rFile, string, vPos[2]);
		        format(string, sizeof(string), "vAngle_%d", BuildVehPosCount), dini_FloatSet(rFile, string, vPos[3]);
		        format(string, sizeof(string), ">> Vehicle Pos '%d' ha sido creada.", BuildVehPosCount+1);
		        SendClientMessage(playerid, Amarillo, string);
				BuildVehPosCount++;
			}
   			if(BuildVehPosCount >= 2)
		    {
		        BuildVehPosCount = 0;
		        BuildTakeVehPos = false;
		        ShowDialog(playerid, 605);
		    }
			if(BuildTakeCheckpoints == true)
			{
			    if(BuildCheckPointCount > MAX_RACE_CHECKPOINTS_EACH_RACE) return SendClientMessage(playerid, Rojo, ">> Tu has Exedido los checkpoints!");
			    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, Rojo, ">> You need to be in a vehicle");
				format(rFile, sizeof(rFile), "/rRaceSystem/%s.RRACE", BuildName);
				GetVehiclePos(GetPlayerVehicleID(playerid), vPos[0], vPos[1], vPos[2]);
				format(string, sizeof(string), "CP_%d_PosX", BuildCheckPointCount), dini_FloatSet(rFile, string, vPos[0]);
				format(string, sizeof(string), "CP_%d_PosY", BuildCheckPointCount), dini_FloatSet(rFile, string, vPos[1]);
				format(string, sizeof(string), "CP_%d_PosZ", BuildCheckPointCount), dini_FloatSet(rFile, string, vPos[2]);
    			format(string, sizeof(string), ">> Checkpoint '%d' Ha sido seteado!", BuildCheckPointCount+1);
		        SendClientMessage(playerid, Amarillo, string);
				BuildCheckPointCount++;
			}
		}
	}
	if(newkeys & KEY_SECONDARY_ATTACK)
	{
	    if(BuildTakeCheckpoints == true)
	    {
	        ShowDialog(playerid, 606);
			format(rNameFile, sizeof(rNameFile), "/rRaceSystem/RaceNames/RaceNames.txt");
			TotalRaces = dini_Int(rNameFile, "TotalRaces");
			TotalRaces++;
			dini_IntSet(rNameFile, "TotalRaces", TotalRaces);
			format(string, sizeof(string), "Race_%d", TotalRaces-1);
			format(rFile, sizeof(rFile), "/rRaceSystem/%s.RRACE", BuildName);
			dini_Set(rNameFile, string, BuildName);
			dini_IntSet(rFile, "TotalCP", BuildCheckPointCount);
			Loop(x, 5)
			{
				format(string, sizeof(string), "BestRacerTime_%d", x);
				dini_Set(rFile, string, "0");
				format(string, sizeof(string), "BestRacer_%d", x);
				dini_Set(rFile, string, "noone");
			}
	    }
	}
	return 1;
}

//MAPACARGANDO
funcion CargarMapa(playerid)
{
 	CargandoMapa[playerid] = SetTimerEx("CargadoMapa", 4000, false, "d", playerid);
  	return 1;
}

funcion CargadoMapa(playerid)
{
   	KillTimer(CargandoMapa[playerid]);
    TogglePlayerControllable(playerid, true);
    //SendClientMessage(playerid, -1, "El Mapa fue cargando correctamente, has sido descongelado");
    return 1;
}

funcion LoadRaceNames()
{
	new
	    rNameFile[64],
	    string[64]
	;
	format(rNameFile, sizeof(rNameFile), "/rRaceSystem/RaceNames/RaceNames.txt");
	TotalRaces = dini_Int(rNameFile, "TotalRaces");
	Loop(x, TotalRaces)
	{
	    format(string, sizeof(string), "Race_%d", x), strmid(RaceNames[x], dini_Get(rNameFile, string), 0, 20, sizeof(RaceNames));
	    //printf(">> Loaded Races: %s", RaceNames[x]);
	}
	return 1;
}

funcion LoadAutoRace(rName[])
{
	new
		rFile[290],
		string[128]
	;
	format(rFile, sizeof(rFile), "/rRaceSystem/%s.RRACE", rName);
	if(!dini_Exists(rFile)) return printf("Race \"%s\" doesn't exist!", rName);
	strmid(RaceName, rName, 0, strlen(rName), sizeof(RaceName));
	//RaceVehicle = dini_Int(rFile, "vModel");
	RaceType = dini_Int(rFile, "rType");
	TotalCP = dini_Int(rFile, "TotalCP");

	#if DEBUG_RACE == 1
	printf("VehicleModel: %d", RaceVehicle);
	printf("RaceType: %d", RaceType);
	printf("TotalCheckpoints: %d", TotalCP);
	#endif

	Loop(x, 2)
	{
		format(string, sizeof(string), "vPosX_%d", x), RaceVehCoords[x][0] = dini_Float(rFile, string);
		format(string, sizeof(string), "vPosY_%d", x), RaceVehCoords[x][1] = dini_Float(rFile, string);
		format(string, sizeof(string), "vPosZ_%d", x), RaceVehCoords[x][2] = dini_Float(rFile, string);
		format(string, sizeof(string), "vAngle_%d", x), RaceVehCoords[x][3] = dini_Float(rFile, string);
		#if DEBUG_RACE == 1
		printf("VehiclePos %d: %f, %f, %f, %f", x, RaceVehCoords[x][0], RaceVehCoords[x][1], RaceVehCoords[x][2], RaceVehCoords[x][3]);
		#endif
	}
	Loop(x, TotalCP)
	{
 		format(string, sizeof(string), "CP_%d_PosX", x), CPCoords[x][0] = dini_Float(rFile, string);
 		format(string, sizeof(string), "CP_%d_PosY", x), CPCoords[x][1] = dini_Float(rFile, string);
 		format(string, sizeof(string), "CP_%d_PosZ", x), CPCoords[x][2] = dini_Float(rFile, string);
 		#if DEBUG_RACE == 1
 		printf("RaceCheckPoint %d: %f, %f, %f", x, CPCoords[x][0], CPCoords[x][1], CPCoords[x][2]);
 		#endif
	}
	Position = 0;
	FinishCount = 0;
	JoinCount = 0;
	Loop(x, 2) PlayersCount[x] = 0;
	CountAmount = COUNT_DOWN_TILL_RACE_START;
	RaceTime = MAX_RACE_TIME;
	RaceBusy = 0x01;
	CountTimer = SetTimer("CountTillRace", 999, 1);
	//TimeProgress = 0;
	return 1;
}

funcion LoadRace(playerid, rName[])
{
	new
		rFile[290],
		string[128]
	;
	format(rFile, sizeof(rFile), "/rRaceSystem/%s.RRACE", rName);
	if(!dini_Exists(rFile)) return SendClientMessage(playerid, Blanco, "<!> Race doesn't exist!"), printf("Race \"%s\" doesn't exist!", rName);
	strmid(RaceName, rName, 0, strlen(rName), sizeof(RaceName));
	//RaceVehicle = dini_Int(rFile, "vModel");
	RaceType = dini_Int(rFile, "rType");
	TotalCP = dini_Int(rFile, "TotalCP");

	#if DEBUG_RACE == 1
	printf("VehicleModel: %d", RaceVehicle);
	printf("RaceType: %d", RaceType);
	printf("TotalCheckpoints: %d", TotalCP);
	#endif

	Loop(x, 2)
	{
		format(string, sizeof(string), "vPosX_%d", x), RaceVehCoords[x][0] = dini_Float(rFile, string);
		format(string, sizeof(string), "vPosY_%d", x), RaceVehCoords[x][1] = dini_Float(rFile, string);
		format(string, sizeof(string), "vPosZ_%d", x), RaceVehCoords[x][2] = dini_Float(rFile, string);
		format(string, sizeof(string), "vAngle_%d", x), RaceVehCoords[x][3] = dini_Float(rFile, string);
		#if DEBUG_RACE == 1
		printf("VehiclePos %d: %f, %f, %f, %f", x, RaceVehCoords[x][0], RaceVehCoords[x][1], RaceVehCoords[x][2], RaceVehCoords[x][3]);
		#endif
	}
	Loop(x, TotalCP)
	{
 		format(string, sizeof(string), "CP_%d_PosX", x), CPCoords[x][0] = dini_Float(rFile, string);
 		format(string, sizeof(string), "CP_%d_PosY", x), CPCoords[x][1] = dini_Float(rFile, string);
 		format(string, sizeof(string), "CP_%d_PosZ", x), CPCoords[x][2] = dini_Float(rFile, string);
 		#if DEBUG_RACE == 1
 		printf("RaceCheckPoint %d: %f, %f, %f", x, CPCoords[x][0], CPCoords[x][1], CPCoords[x][2]);
 		#endif
	}
	Position = 0;
	FinishCount = 0;
	JoinCount = 0;
	Loop(x, 2) PlayersCount[x] = 0;
	Joined[playerid] = true;
	CountAmount = COUNT_DOWN_TILL_RACE_START;
	RaceTime = MAX_RACE_TIME;
	RaceBusy = 0x01;
	//TimeProgress = 0;
	SetupRaceForPlayer(playerid);
	CountTimer = SetTimer("CountTillRace", 999, 1);
	return 1;
}

funcion SetCP(playerid, PrevCP, NextCP, MaxCP, Type)
{
	if(Type == 0)
	{
		if(NextCP == MaxCP) SetPlayerRaceCheckpoint(playerid, 1, CPCoords[PrevCP][0], CPCoords[PrevCP][1], CPCoords[PrevCP][2], CPCoords[NextCP][0], CPCoords[NextCP][1], CPCoords[NextCP][2], RACE_CHECKPOINT_SIZE);
			else SetPlayerRaceCheckpoint(playerid, 0, CPCoords[PrevCP][0], CPCoords[PrevCP][1], CPCoords[PrevCP][2], CPCoords[NextCP][0], CPCoords[NextCP][1], CPCoords[NextCP][2], RACE_CHECKPOINT_SIZE);
	}
	else if(Type == 3)
	{
		if(NextCP == MaxCP) SetPlayerRaceCheckpoint(playerid, 4, CPCoords[PrevCP][0], CPCoords[PrevCP][1], CPCoords[PrevCP][2], CPCoords[NextCP][0], CPCoords[NextCP][1], CPCoords[NextCP][2], RACE_CHECKPOINT_SIZE);
			else SetPlayerRaceCheckpoint(playerid, 3, CPCoords[PrevCP][0], CPCoords[PrevCP][1], CPCoords[PrevCP][2], CPCoords[NextCP][0], CPCoords[NextCP][1], CPCoords[NextCP][2], RACE_CHECKPOINT_SIZE);
	}
	return 1;
}

funcion SetupRaceForPlayer(playerid)
{
	CPProgess[playerid] = 0;
	TogglePlayerControllable(playerid, false);
	CPCoords[playerid][3] = 0;
	SetCP(playerid, CPProgess[playerid], CPProgess[playerid]+1, TotalCP, RaceType);
	if(IsOdd(playerid)) Index = 1;
    else Index = 0;
    new GV = GetPlayerVehicleID(playerid);

	switch(Index)
	{
		case 0:
		{
		    if(PlayersCount[0] == 1)
		    {
				RaceVehCoords[0][0] -= (6 * floatsin(-RaceVehCoords[0][3], degrees));
		 		RaceVehCoords[0][1] -= (6 * floatcos(-RaceVehCoords[0][3], degrees));
		   		//CreatedRaceVeh[playerid] = CreateVehicle(RaceVehicle, RaceVehCoords[0][0], RaceVehCoords[0][1], RaceVehCoords[0][2]+2, RaceVehCoords[0][3], random(126), random(126), (60 * 60));
				SetVehicleZAngle(GV, RaceVehCoords[1][3]);
				PutPlayerInVehicle(playerid, CreatedRaceVeh[playerid], 0);
				SetVehiclePos(GV, RaceVehCoords[0][0], RaceVehCoords[0][1], RaceVehCoords[0][2]+2);
      			Camera(playerid, RaceVehCoords[0][0], RaceVehCoords[0][1], RaceVehCoords[0][2], RaceVehCoords[0][3], 20);
			}
		}
		case 1:
 		{
 		    if(PlayersCount[1] == 1)
 		    {
				RaceVehCoords[1][0] -= (6 * floatsin(-RaceVehCoords[1][3], degrees));
		 		RaceVehCoords[1][1] -= (6 * floatcos(-RaceVehCoords[1][3], degrees));
		   		//CreatedRaceVeh[playerid] = CreateVehicle(RaceVehicle, RaceVehCoords[1][0], RaceVehCoords[1][1], RaceVehCoords[1][2]+2, RaceVehCoords[1][3], random(126), random(126), (60 * 60));
				SetVehiclePos(GV, RaceVehCoords[0][0], RaceVehCoords[0][1], RaceVehCoords[0][2]+2);
				SetVehicleZAngle(GV, RaceVehCoords[1][3]);
				PutPlayerInVehicle(playerid, CreatedRaceVeh[playerid], 0);
				Camera(playerid, RaceVehCoords[1][0], RaceVehCoords[1][1], RaceVehCoords[1][2], RaceVehCoords[1][3], 20);
    		}
 		}
	}
	switch(Index)
	{
	    case 0:
		{
			if(PlayersCount[0] != 1)
			{
		   		//CreatedRaceVeh[playerid] = CreateVehicle(RaceVehicle, RaceVehCoords[0][0], RaceVehCoords[0][1], RaceVehCoords[0][2]+2, RaceVehCoords[0][3], random(126), random(126), (60 * 60));
				SetVehiclePos(GV, RaceVehCoords[0][0], RaceVehCoords[0][1], RaceVehCoords[0][2]+2);
				SetVehicleZAngle(GV, RaceVehCoords[1][3]);
				PutPlayerInVehicle(playerid, CreatedRaceVeh[playerid], 0);
			Camera(playerid, RaceVehCoords[0][0], RaceVehCoords[0][1], RaceVehCoords[0][2], RaceVehCoords[0][3], 20);
			    PlayersCount[0] = 1;
		    }
	    }
	    case 1:
	    {
			if(PlayersCount[1] != 1)
			{
		   		//CreatedRaceVeh[playerid] = CreateVehicle(RaceVehicle, RaceVehCoords[1][0], RaceVehCoords[1][1], RaceVehCoords[1][2]+2, RaceVehCoords[1][3], random(126), random(126), (60 * 60));
				SetVehiclePos(GV, RaceVehCoords[0][0], RaceVehCoords[0][1], RaceVehCoords[0][2]+2);
				SetVehicleZAngle(GV, RaceVehCoords[1][3]);
				PutPlayerInVehicle(playerid, CreatedRaceVeh[playerid], 0);
				Camera(playerid, RaceVehCoords[1][0], RaceVehCoords[1][1], RaceVehCoords[1][2], RaceVehCoords[1][3], 20);
				PlayersCount[1] = 1;
		    }
   		}
	}
	#if defined RACE_IN_OTHER_WORLD
	SetPlayerVirtualWorld(playerid, 45);
	#endif
	SendClientMessage(playerid, -1, "");
	SendClientMessage(playerid, -1, "{00F300}Has entrado en la carrera, espera a que termine el conteo para poder competir con los otros corredores.");
	SendClientMessage(playerid, -1, "{00F300}Si deseeas abandonar la carrera puedes escribir, /exit. Se tomará como carrera perdida y no recibirás dinero.");
	//SendClientMessage(playerid, -1, "{FF5082}Información: Aprieta la tecla (CLIC/CTRL) para colocar una valla.");
	JoinCount++;
	NoJump[playerid] = 1;
	//Tiempo[playerid] = 60;
	return 1;
}

funcion CountTillRace()
{
    switch(CountAmount)
	{
 		case 0:
	    {
		   new i;
			ForEach(i, MP)
			{
			    if(Joined[i] == false)
			    {
				}
			}
			StartRace();
	    }
	    case 1..59:
	    {
	        new
	            string[100]
			;
			format(string, sizeof(string), "~r~~h~~h~%d", CountAmount);
			new i;
			ForEach(i, MP)
			{
			    if(Joined[i] == true)
			    {
			    	GameTextForPlayer(i, string, 999, 3);
			    	PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
			    }
			}
	    }
	    case 60:
	    {
	        new
	            string[70];
			SendClientMessageToAll(Blanco, "");
            format(string, sizeof(string), "{00FF00}* ¡La carrera: {FFFFFF}\"%s\" {00FF00}está por comenzar!", RaceName);
            SendClientMessageToAll(-1, string);
            SendClientMessageToAll(-1, " {00FF00}Usa: {FFFFFF}\"/join\", {00FF00}para participar. {00FF00}¡Comienza en {FFFFFF}50 {00FF00}segundos!");
	    }
	}
	return CountAmount--;
}

funcion StartRace()
{
    new i;
    ForEach(i, MP)
    {
	    if(Joined[i] == true)
	    {
	        TogglePlayerControllable(i, true);
	        PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
  			GameTextForPlayer(i, "~r~~h~~h~Ahora!", 2000, 3);
			SetCameraBehindPlayer(i);
			AunNo[i] = 0;
			NoJump[i] = 0;
			RaceEnter[i] = 1;
			Valla[i] = 1;
			TextDrawHideForPlayer(i, AnunciorRace1);
 			TextDrawHideForPlayer(i, AnunciorRace2);
	    }
	}
	rCounter = SetTimer("RaceCounter", 900, 1);
	RaceTick = GetTickCount();
	RaceStarted = 1;
	KillTimer(CountTimer);
	SetTimer("Destruir", 1000,1);
//	TextDrawHideForAll(RaceJoinxD);
	return 1;
}

funcion Camera(playerid, Float:X, Float:Y, Float:Z, Float:A, Mul)
{
	SetPlayerCameraLookAt(playerid, X, Y, Z);
	SetPlayerCameraPos(playerid, X + (Mul * floatsin(-A, degrees)), Y + (Mul * floatcos(-A, degrees)), Z+6);
}

funcion StopRace()
{
	KillTimer(rCounter);
	RaceStarted = 0;
	RaceTick = 0;
	RaceBusy = 0x00;
	JoinCount = 0;
	FinishCount = 0;
    //TimeProgress = 0;

	new i;
	ForEach(i, MP)
	{
	    if(Joined[i] == true)
	    {
	    	DisablePlayerRaceCheckpoint(i);
	    	DestroyVehicle(CreatedRaceVeh[i]);
	    	Joined[i] = false;
			CPProgess[i] = 0;
			KillTimer(InfoTimer[i]);
		}
	}
	if(AutomaticRace == true) LoadRaceNames(), LoadAutoRace(RaceNames[random(TotalRaces)]);
	return 1;
}

funcion RaceCounter()
{
	if(RaceStarted == 1)
	{
		RaceTime--;
		if(JoinCount <= 0)
		{
			StopRace();
			AutomaticRace = true;
		}
	}
	if(RaceTime <= 0)
	{
	    StopRace();
	    AutomaticRace = true;
	}
	return 1;
}

funcion TextInfo(playerid)
{
	new strings[1000];
	if(JoinCount == 1) format(strings, sizeof(strings), "~b~ tiempo~w~: %s__~b~posicion~w~: %d",TimeConvert(RaceTime), RacePosition[playerid]);
	else format(strings, sizeof(strings),"~b~ tiempo~w~: %s__~b~posicion~w~: %d",TimeConvert(RaceTime), RacePosition[playerid]);
}

funcion IsPlayerInRace(playerid)
{
	if(Joined[playerid] == true) return true;
	    else return false;
}

funcion ShowDialog(playerid, dialogid)
{
	switch(dialogid)
	{
		case 599: ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, CreateCaption("Construir nueva carrera"), "\
		Normal Race\n\
		Air Race", "Continuar", "Salir");

	    case 600: ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, CreateCaption("Construir nueva carrera (Paso 1/4)"), "\
		Paso 1:\n\
		********\n\
 		Bienvenido a construir la carrera 'Nueva'.\n\
		Antes de empezar, necesito saber el nombre (e.g. SFRace) of the to save it under.\n\n\
		>> Pongale un Nombre Pone Siguiente'CONTINUAR'.", "Continuar", "volver");

	    case 601: ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, CreateCaption("Construir nueva carrera (Paso 1/4)"), "\
	    ERROR: Name too short or too long! (min. 1 - max. 20)\n\n\n\
		Paso 1:\n\
		********\n\
 		Bienvenido a construir la carrera 'Nueva'.\n\
		Antes de empezar, necesito saber el nombre (e.g. SFRace) of the to save it under.\n\n\
		>> Pongale un Nombre Pone Siguiente'CONTINUAR'.", "Continuar", "volver");

		case 602: ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, CreateCaption("Construir nueva carrera (Paso 2/4)"), "\
		Paso 2:\n\
		********\n\
		Por favor, dar [jugador/id] o [NOMBRE] del vehículo que va a ser utilizado en la carrera que está creando.\n\n\
		>> Dar el [jugador/id] o [NOMBRE] del vehículo, y presione 'Continuar' para continuar. 'volver' para cambiar algo.", "Continuar", "volver");

		case 603: ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, CreateCaption("Construir nueva carrera (Paso 2/4)"), "\
		ERROR: Vehiculo Invalido ID/Name\n\n\n\
		Paso 2:\n\
		********\n\
		Por favor, dar [jugador/id] o [NOMBRE] del vehículo que va a ser utilizado en la carrera que está creando.\n\n\
		>> Dar el [jugador/id] o [NOMBRE] del vehículo, y presione 'Continuar' para continuar. 'volver' para cambiar algo.", "Continuar", "volver");

		case 604: ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, CreateCaption("Construir nueva carrera (Paso 3/4)"),
		"\
		Paso 3:\n\
		********\n\
		Ya casi terminamos! Ahora ve a la línea de salida en el primer GetPlayerVehicleID(playerid) y el segundo debe mantenerse.\n\
		Nota: Al hacer clic en 'Aceptar' que será gratuita.Use 'CLICK-IZQUIERDO' para fijar la primer y segunda posicion.\n\
		Nota: After you got these positions you will automaticly see a dialog to continue the wizard.\n\n\
		>> Pulse 'Aceptar' para hacer las cosas de arriba. 'volver' para cambiar algo.", "Aceptar", "volver");

		case 605: ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, CreateCaption("Build New Race (Step 4/4)"),
		"\
		Paso 4:\n\
		********\n\
		Bienvenidos a la última etapa. En este estado tiene que establecer los puntos de control, así que si hace clic en 'Aceptar' se pueden establecer los puntos de control.\n\
		Puede configurar los puntos de control con 'CLICK-IZQUIERDO. Cada punto de control que estableció guardar.\n\
		Usted tiene que pulsar el botón 'Entrar' cuando haya terminado con todo. La Carrea Esta Habilitada <FIN>!\n\n\
		>> Presiona 'OK' hacer las cosas de arriba. 'Volver' para volver.", "Aceptar", "Volver");

		case 606: ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, CreateCaption("Build New Race (Done)"),
		"\
		Usted ha creado su carrera y estará lista para usarse ahora.\n\n\
		>> Presiona 'Terminar' para Terminar. 'Exit' - no hace efecto.", "Terminar", "Salir");
	}
	return 1;
}

CreateCaption(arguments[])
{
	new
	    string[128 char]
	;
	format(string, sizeof(string), "RyDeR's Race System - %s", arguments);
	return string;
}

stock IsValidVehicle(vehicleid)
{
	if(vehicleid < 400 || vehicleid > 611) return false;
	    else return true;
}

TimeConvert(seconds)
{
	new tmp[16];
 	new minutes = floatround(seconds/60);
  	seconds -= minutes*60;
   	format(tmp, sizeof(tmp), "%d:%02d", minutes, seconds);
   	return tmp;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	return 1;
}

public OnPlayerUpdate(playerid)
{
	//Revisa el ping del player
	PlayerMaxPingCheck(playerid);

    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
  	{
		new Float:health2, veh;
		if(aFix[playerid] == 1)
		{
			veh = GetPlayerVehicleID(playerid);
			GetVehicleHealth(veh, health2);

			if (health2 < 400)
			{
	    		RepairVehicle(GetPlayerVehicleID(playerid));
			}
		}
	}

	//AintiCheatMinigun
    if(EstaDM[playerid] == 0){
        if(AntiCheatMinigun == 1){
        	if(GetPlayerWeapon(playerid) == 38){
        		TDShow(playerid, AntiCheatMinigun0);
        		new stringjL[90], Float:x, Float:y, Float:z;
        		format(stringjL,sizeof(stringjL),"%s(ID:%d) tiene Minigun", GetName(playerid), playerid);
    			MinigunAviso(stringjL);
    			SetTimerXP(playerid, 18, "CerrarTDAntiCheatJugador", 2000);
    			GetPlayerPos(playerid, x, y, z);
		        SetPlayerPos(playerid, x, y, z+5);
		        ResetPlayerWeapons(playerid);
        	}
        }
    }

    	if(IsPlayerConnected(playerid))
	{
	    if(GangZone[playerid] == true)
	    {
	        new
	            Keys,
	            UpDown,
	            LeftRight;

       		if(GetPos[playerid] == false) GetPlayerPos(playerid, pMaxX, pMaxY, pZ), GetPlayerPos(playerid, pMinX, pMinY, pZ), GetPos[playerid] = true;
	        GetPlayerKeys(playerid, Keys, UpDown, LeftRight);
	        TogglePlayerControllable(playerid, false);

	        if(LeftRight == KEY_LEFT)
	        {
	            pMinX -= 8.0;
	         	GangZoneDestroy(CreatedZone[gCount]);
	       		CreatedZone[gCount] = GangZoneCreate(pMinX, pMinY, pMaxX, pMaxY);
	         	GangZoneShowForPlayer(playerid, CreatedZone[gCount], gColor);
	        }
	        else if(LeftRight & KEY_LEFT && Keys & KEY_FIRE)
	        {
         		pMinX += 8.0;
	         	GangZoneDestroy(CreatedZone[gCount]);
	       		CreatedZone[gCount] = GangZoneCreate(pMinX, pMinY, pMaxX, pMaxY);
	         	GangZoneShowForPlayer(playerid, CreatedZone[gCount], gColor);
	        }
	        else if(LeftRight == KEY_RIGHT)
	        {
	        	pMaxX += 8.0;
	         	GangZoneDestroy(CreatedZone[gCount]);
	       		CreatedZone[gCount] = GangZoneCreate(pMinX, pMinY, pMaxX, pMaxY);
	         	GangZoneShowForPlayer(playerid, CreatedZone[gCount], gColor);
			}
	        else if(LeftRight & KEY_RIGHT && Keys & KEY_FIRE)
	        {
	        	pMaxX -= 8.0;
	         	GangZoneDestroy(CreatedZone[gCount]);
	       		CreatedZone[gCount] = GangZoneCreate(pMinX, pMinY, pMaxX, pMaxY);
	         	GangZoneShowForPlayer(playerid, CreatedZone[gCount], gColor);
			}
			else if(UpDown == KEY_UP)
			{
			    pMaxY += 8.0;
	         	GangZoneDestroy(CreatedZone[gCount]);
	       		CreatedZone[gCount] = GangZoneCreate(pMinX, pMinY, pMaxX, pMaxY);
	         	GangZoneShowForPlayer(playerid, CreatedZone[gCount], gColor);
			}
			else if(UpDown & KEY_UP && Keys & KEY_FIRE)
			{
			    pMaxY -= 8.0;
	         	GangZoneDestroy(CreatedZone[gCount]);
	       		CreatedZone[gCount] = GangZoneCreate(pMinX, pMinY, pMaxX, pMaxY);
	         	GangZoneShowForPlayer(playerid, CreatedZone[gCount], gColor);
			}
			else if(UpDown == KEY_DOWN)
			{
			    pMinY -= 8.0;
	         	GangZoneDestroy(CreatedZone[gCount]);
	       		CreatedZone[gCount] = GangZoneCreate(pMinX, pMinY, pMaxX, pMaxY);
	         	GangZoneShowForPlayer(playerid, CreatedZone[gCount], gColor);
			}
			else if(UpDown & KEY_DOWN && Keys & KEY_FIRE)
			{
			    pMinY += 8.0;
	         	GangZoneDestroy(CreatedZone[gCount]);
	       		CreatedZone[gCount] = GangZoneCreate(pMinX, pMinY, pMaxX, pMaxY);
	         	GangZoneShowForPlayer(playerid, CreatedZone[gCount], gColor);
			}
			else if(Keys & KEY_SECONDARY_ATTACK)
			{
				TogglePlayerControllable(playerid, true);
				GangZone[playerid] = false;
				GetPos[playerid] = false;
				ShowPlayerDialog(playerid, 9601, DIALOG_STYLE_INPUT, "Dinero Jugador:", "Dinero que recibirán los jugadores al terminar una conquista(entre 1000-2000):\n", "Aceptar", "Salir");
			}
	    }
	}
	return 1;
}

stock MinigunAviso(const string[])
{
	for(new adminid=0; adminid <MP; adminid++)
	{
		if (Administrador[adminid] >= 1)
		{
		    new stringjL[45];
		    format(stringjL,sizeof(stringjL),"%s", string);
			TextDrawSetString(AntiCheatMinigun1, stringjL);
			TDShow(adminid, AntiCheatMinigun1);
			SetTimerXP(adminid, 17, "CerrarTDAntiCheat", 2000);
		}
	}
	return 1;
}

funcion CerrarTDAntiCheat(playerid){
	TDHide(playerid, AntiCheatMinigun1);
	KillTimerEx(playerid, 17);
	return 1;
}

funcion CerrarTDAntiCheatJugador(playerid){
	TDHide(playerid, AntiCheatMinigun0);
	KillTimerEx(playerid, 18);
	return 1;
}

//ResetV
funcion ResetarVariables(playerid)
{
    SkinClan[playerid] = 0;
	ColorClan[playerid] = 0;
    ClanIDNext[playerid] = 0;
	RaceEnter[playerid] = 0;
	CreatedRaceVeh[playerid] = 0;
	Joined[playerid] = false;
	CPProgess[playerid] = 0;
	InfoTimer[playerid] = 0;
	RacePosition[playerid] = 0;
    Equipo[playerid] = 0;
    InicioSesionTime[playerid] = 0;
    tiempois[playerid] = 0;
 	PTDHide(playerid, InicioSesionTD[playerid]);
    PTDHide(playerid, TheLastShotLogo1[playerid]);
    PTDHide(playerid, TheLastShotLogo2[playerid]);
    PTDHide(playerid, TheLastShotLogo3[playerid]);
    JugadorIdentificado[playerid] = 0;
    BaneadoCuenta[playerid] = 0;
    DineroJugador[playerid] = 0;
	congelado[playerid] = 0;
    SkinPlayer[playerid] = 0;
    Administrador[playerid] = 0;
    pCMDS[playerid] = 0;
    Muertes[playerid] = 0;
	PuntajeJugador[playerid] = 0;
	Vip[playerid] = 0;
	DuelosG[playerid] = 0;
	DuelosP[playerid] = 0;
	NoEnRace[playerid] = 0;
	CoNs1[playerid] = 0;
	RacesS[playerid] = 0;
	AunNo[playerid] = 0;
	Valla[playerid] = 0;
	GODMOD[playerid] = 0;
	MK[playerid] = 0;
	HS[playerid] = 0;
	CreoAuto[playerid] = 0;
	SumarGame0[playerid] = 0;
	SumarGame1[playerid] = 0;
 	Cabecero[playerid] = 0;
    Delete3DTextLabel(LabelCabecero[playerid]);
    TEXTO_CABECERO[playerid] = "Sin texto";
	MODELO_AUTO[playerid][0] = 0;
	RUEDAS_AUTO[playerid][0] = 0;
	AUTO_PAINTJOB[playerid][0] = 0;
 	AUTO_COLOR[playerid][0] = 0;
  	AUTO_COLOR2[playerid][0] = 0;
 	NEONES_AUTO[playerid][0] = 0;
 	TIENE_AUTO[playerid][0] = 0;
 	MODELO_AUTO[playerid][1] = 0;
 	RUEDAS_AUTO[playerid][1] = 0;
 	AUTO_PAINTJOB[playerid][1] = 0;
 	AUTO_COLOR[playerid][1] = 0;
 	AUTO_COLOR2[playerid][1] = 0;
 	NEONES_AUTO[playerid][1] = 0;
 	TIENE_AUTO[playerid][1] = 0;
 	MODELO_AUTO[playerid][2] = 0;
 	RUEDAS_AUTO[playerid][2] = 0;
 	AUTO_PAINTJOB[playerid][2] = 0;
 	AUTO_COLOR[playerid][2] = 0;
 	AUTO_COLOR2[playerid][2] = 0;
 	NEONES_AUTO[playerid][2] = 0;
 	TIENE_AUTO[playerid][2] = 0;
 	TIENE_PINTURA[playerid][0] = 0;
 	TIENE_PINTURA[playerid][1] = 0;
 	TIENE_PINTURA[playerid][2] = 0;
 	VEHICULO_CREADOR0[playerid] = 0;
	VEHICULO_CREADOR1[playerid] = 0;
	VEHICULO_CREADOR2[playerid] = 0;
	SACO_AUTO[0][playerid] = 0;
	SACO_AUTO[1][playerid] = 0;
	SACO_AUTO[2][playerid] = 0;
	NIVEL_KILLS[playerid] = 0;
	MSGINICIO[playerid] = 0;
	RacesSx[playerid] = 0;
	MODO_PELEA[playerid] = 0;
	DISPLAYS[playerid] = 0;
 	VIPPosX[playerid] = 0;
 	VIPPosY[playerid] = 0;
 	VIPPosZ[playerid] = 0;
 	VIPPosA[playerid] = 0;
	VIPps[playerid] = 0;
	TIENE_HYDRA[playerid] = 0;
	CarreraGanadasIndividuales[playerid] = 0;
	CarreraPerdidasIndividuales[playerid] = 0;
	ScoreGeneralJugador[playerid] = 0;
	aFix[playerid] = 0;
	JugadorRegistrado[playerid] = 0;
	CHAT[playerid] = 0;
	NoJump[playerid] = 0;
	NoSALTO[playerid] = 0;
	Encarcelado[playerid] = 0;
	EstaDM[playerid] = 0;
	pMPs[playerid] = 0;
	Turn[playerid] = 0;
	CarSpawn[playerid] = 0;
	Advertencia[playerid] = 0;
	QuitarMusicaInicio[playerid] = 0;
	SiSumar[playerid] = 0;
	PonerSkin[playerid] = 0;
 	VIPPosX[playerid] = 0;
 	VIPPosY[playerid] = 0;
 	VIPPosZ[playerid] = 0;
 	VIPPosA[playerid] = 0;
  	PosI[playerid] = 0;
  	avcc[playerid] = 0;
	VelocimetroTimer[playerid] = 0;
	PTDHide(playerid, VelocidadKMH);
	Mute[playerid] = 0;
	COLOCAR_NOMBRE_CAR[playerid] = 0;
	PuedeReportar[playerid] = 0;
	ReportoTime[playerid] = 0;
	TirarPlayer[playerid] = 0;
	KillTimerEx(playerid, Cargar_DatosTimer[playerid]);
	PTDHide(playerid, ReportesBox0[playerid]);
	PTDHide(playerid, ReportesBox1[playerid]);
	PTDHide(playerid, ReportesBox2[playerid]);
	PTDHide(playerid, ReportesBox3[playerid]);
	AdminReportes[playerid] = 0;
	EnGameJuego[playerid] = 0;
	JugadorIngresado[playerid] = 0;
	TieneSpawnJugador[playerid] = 0;
	MiSpawn[0][playerid] = 0;
 	MiSpawn[1][playerid] = 0;
 	MiSpawn[2][playerid] = 0;
	Remplazar[playerid] = false;
	MiSpawnInt[playerid] = 0;
	VigilandoAdmin[playerid] = 0;
	PuntosDM[playerid] = 0;
	MandarMensajeAdmin[playerid] = 0;
	CArma[playerid][0] = 0;
	CArma[playerid][1] = 0;
	CArma[playerid][2] = 0;
	CArma[playerid][3] = 0;
	CArma[playerid][4] = 0;
	CArma[playerid][5] = 0;
	CArma[playerid][6] = 0;
	CArma[playerid][7] = 0;
	CArma[playerid][8] = 0;
	CArma[playerid][9] = 0;
	CArma[playerid][10] = 0;
	CArma[playerid][11] = 0;
	CArma[playerid][12] = 0;
	CArma[playerid][13] = 0;
	CArma[playerid][14] = 0;
	CArma[playerid][20] = 0;
	NoMPS[playerid] = 0;
 	DINERO_ASESINATO[playerid] = 0;
    COSTO_CARMAS[playerid] = 0;
    DINERO_MUERTE[playerid] = 0;
    JgRp[playerid] = 0;
    JugadorYaSpawneado1vez[playerid] = 0;
    JugadorSpawnKill[playerid] = 0;
	JugadorLogeado[playerid][0] = 0;
	JugadorLogeado[playerid][1] = 0;
	DarTuto[playerid] = 0;
	TT[playerid][0] = 0;
	TT[playerid][1] = 0;
	TT[playerid][2] = 0;
	CMDTIME[playerid] = 0;
	JugadorAK[playerid][0] = 0;
	JugadorAK[playerid][1] = 0;
	IPa[playerid] = "0";
	IPActualizar[playerid] = 0;
	Spawnear[playerid] = 0;
	MAX_KILLSASESINO[playerid] = 0;
 	KillsAsesino[playerid] = 0;
 	SpeedBoostMultiplier[playerid] = 0.0;
 	CarSpawnVal[playerid] = 0;
 	CarWheelsVal[playerid] = 0;
 	//CLANES:
 	Clan_Jugador[playerid] = "283949403020202747437465746573475";
    Invitacion[playerid][0] = 0;
    Clan_ID[playerid] = 0;
    Clan_TAG[playerid][0] = 0;
    EnClan[playerid] = 0;
    RangoClan[playerid] = 0;
    EstaDM[playerid] = 0;
    Digito1Jail[playerid] = 0;
	Digito2Jail[playerid] = 0;
	stringTime2Jail[playerid] = 0;
	Digito1Mute[playerid] = 0;
	Digito2Mute[playerid] = 0;
	stringTime2Mute[playerid] = 0;
	TCC[playerid][0] = 0;
	TCC[playerid][1] = 0;
	TCC[playerid][2] = 0;
    IntentosPassword[playerid] = 0;
    RangoClan[playerid] = 0;
    Clan_JugadorCompleto[playerid] = "";
    RangoTEXT[playerid] = "Sin rango";
    TAG_Escribir[playerid] = 0;
    DueloArmasTipo[playerid] = 0;
    DueloArenaTipo[playerid] = 0;
    InvitacionActiva[playerid] = 0;
    HSc[playerid] = false;
    HSH[playerid] = 0;
	RoAEquipo[playerid] = 0;
	EnEvento[playerid] = 0;
	ERDM[playerid] = 0;
	CDEVENTOJ[playerid] = 0;
	JugadoresEnEvento = 0,
	JugadorTieneLaFlagRojo[playerid] = 0;
	JugadorTieneLaFlagAzul[playerid] = 0;
	SpawnearJugadores[playerid] = 0;
	apiTipoVigilancia[playerid] = 0;
	apiIDVigilado[playerid] = 0;
	PuedeComprarAV[playerid] = 0;
	PrecioVidaArm[0][playerid] = 0;
	PrecioVidaArm[1][playerid] = 0;
	TiempoVida[playerid] = 0;
	PuedeComprarAV2[playerid] = 0;
	TiempoArmad[playerid] = 0;
	PTDHide(playerid, VerOn[playerid]);
	PTDHide(playerid, RangoJugadorTD[playerid]);
	Legendario[playerid] = 0;
	ARMA[0][playerid] = 0;
	ARMA[1][playerid] = 0;
	ARMA[2][playerid] = 0;
	ARMA[3][playerid] = 0;
	ARMA[4][playerid] = 0;
	ARMA[5][playerid] = 0;
	ARMA[6][playerid] = 0;
	ARMA[7][playerid] = 0;
    PrecioArma[0][playerid] = 0;
	PrecioArma[1][playerid] = 0;
	PrecioArma[2][playerid] = 0;
	PrecioArma[3][playerid] = 0;
	PrecioArma[4][playerid] = 0;
	PrecioArma[5][playerid] = 0;
	PrecioArma[6][playerid] = 0;
    DineroMK[playerid] = 0;
    DineroHS[playerid] = 0;
    Premium[playerid] = 0;
    TAGLN[playerid] = 0;
    BanTime[playerid] = 0;
    KickTime[playerid] = 0;
    ClanMensajeRangos[playerid] = 0;
    ClanNoLocalizado[playerid] = 0;
    KillsRacha[playerid] = 0;
    Elevador[playerid] = 0;
    Jaula[playerid] = 0;
    CargandoMapa[playerid] = 0;
    JETPACKA[playerid] = 0;
    NoEnviarMensajeClan[playerid] = 0;
    COLOR_TEXTO[playerid] = 0;
    aArma[0][playerid] = 0;
    aArma[1][playerid] = 0;
    aArma[2][playerid] = 0;
    aArma[3][playerid] = 0;
    aArma[4][playerid] = 0;
    aArma[5][playerid] = 0;
    aArma[6][playerid] = 0;
    aArma[7][playerid] = 0;
    aArma[8][playerid] = 0;
    aArma[9][playerid] = 0;
    aArma[10][playerid] = 0;
    aArma[11][playerid] = 0;
    aArma[12][playerid] = 0;
    aArma[13][playerid] = 0;
    aArma[14][playerid] = 0;
	aMun[0][playerid] = 0;
	aMun[1][playerid] = 0;
	aMun[2][playerid] = 0;
	aMun[3][playerid] = 0;
	aMun[4][playerid] = 0;
	aMun[5][playerid] = 0;
	aMun[6][playerid] = 0;
	aMun[7][playerid] = 0;
	aMun[8][playerid] = 0;
	aMun[9][playerid] = 0;
	aMun[10][playerid] = 0;
	aMun[11][playerid] = 0;
	aMun[12][playerid] = 0;
	aMun[13][playerid] = 0;
	aMun[14][playerid] = 0;
	vVida[playerid] = 0;
	aArmad[playerid] = 0;
	GPX[playerid] = 0.0;
	GPY[playerid] = 0.0;
	GPZ[playerid] = 0.0;
	GPA[playerid] = 0.0;
	ViendoDuelo[playerid] = 0;
	DarAntiSpawnKill[playerid] = false;
	VTUNE[playerid] = 0;
	VINVISIBLETIME[playerid] = 0;
	VINVISIBLEVal[playerid] = false;
	xenonazul1[playerid] = 0;
	xenonazul2[playerid] = 0;
	xenonazul3[playerid] = 0;
	xenonazul4[playerid] = 0;
	xenonverde1[playerid] = 0;
	xenonverde2[playerid] = 0;
	xenonverde3[playerid] = 0;
	xenonverde4[playerid] = 0;
	xenonrojo1[playerid] = 0;
	xenonrojo2[playerid] = 0;
	xenonrojo3[playerid] = 0;
	xenonrojo4[playerid] = 0;
	ComandosBloqueados[playerid] = false;
	DCJ[playerid] = 0;
	EnEventoPlayer[playerid] = 0;
	RegresarEvento[playerid] = 0;
	InfoMuerte[playerid] = 0;
	PTDHide(playerid, TEXTCLAN[playerid]);
	AntiTeamKill[playerid] = 0;
	PTDHide(playerid, MSGCONQUISTA[playerid]);
	CLANZONATIEMPOBar[playerid] = 0;
	CLANZONATIEMPOBarMax[playerid] = 0;
	CLANZONATIEMPO[playerid] = 0;
	CreatedZone[playerid] = 0;
	PTDHide(playerid, ClanInfo0[playerid]);
	PTDHide(playerid, ClanInfo1[playerid]);
	MensajeNO[playerid] = 0;
	MensajeNOO[playerid] = 0;
	KillTimer(ActualizarVerOnTimer[playerid]);
	KillTimer(stringTime2Mute[playerid]);
	KillTimer(stringTime2Jail[playerid]);
	KillTimerEx(playerid, ReportoTime[playerid]);
	PTDHide(playerid, SurvivalInfo[playerid]);
	PTDHide(playerid, SurvivalInfo2[playerid]);
	PTDHide(playerid, SurvivalInfo3[playerid]);
	JugadorEnDMM[playerid] = false;
	KillsEnMapaDM[playerid] = 0;
	PTDHide(playerid, TOPTD0[playerid]);
	PTDHide(playerid, TOPTD1[playerid]);
	PTDHide(playerid, TOPTD2[playerid]);
	PTDHide(playerid, DMInfo[playerid]);
	PTDHide(playerid, TiempoDMContador[playerid]);
	JugadorSpecDM[playerid] = 0;
	JugadorEnMSP[playerid] = false;
	EstaEditandoMapa[playerid] = false;
	EstaEditandoPos1[playerid] = false;
	EstaEditandoPos2[playerid] = false;
	EstaEditandoPos3[playerid] = false;
	POn1[playerid] = 0;
	POn2[playerid] = 0;
	POn3[playerid] = 0;
	return 1;
}

stock MenuCreacionActu(playerid)
{
    new PosicionOnText1[30], PosicionOnText2[30], PosicionOnText3[30], string[500];
   	if(POn1[playerid] == 1) PosicionOnText1 = "{00C6FF}Habilitado";
	if(POn1[playerid] == 0) PosicionOnText1 = "{00C6FF}N/A";
	if(POn2[playerid] == 1) PosicionOnText2 = "{00C6FF}Habilitado";
	if(POn2[playerid] == 0) PosicionOnText2 = "{00C6FF}N/A";
	if(POn3[playerid] == 1) PosicionOnText3 = "{00C6FF}Habilitado";
	if(POn3[playerid] == 0) PosicionOnText3 = "{00C6FF}N/A";
	format(string, sizeof(string), "Nombre del Mapa: {00C6FF}'%s'\nEquipos: {00C6FF}'%d'\nIndividual: {00C6FF}'%d'\nSurvival: {00C6FF}'%d'\nMáximo de Jugadores: {00C6FF}'%d'\nMáximo de Kills: {00C6FF}'%d'\nPosición 1: {00C6FF}'%s'\nPosición 2: {00C6FF}'%s'\nPosición 3: {00C6FF}'%s'\nTiempo Limite: {00C6FF}'%d'\nExportar Mapa\n", NombreMapa, cEquipos, cIndividual, cSurvival, cMaximoPlayers, cMaximoKills, PosicionOnText1, PosicionOnText2, PosicionOnText3, cTiempoLimite);
	ShowPlayerDialog(playerid, 431, DIALOG_STYLE_LIST, "{FFFFFF}Modo Constructor:", string, "Finalizar", "");
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	// SISTEMA CREADOR DE DEATHMATCHS
	if(dialogid == 430)
    {
        if (response == 1)
        {
        	EstaEditandoMapa[playerid] = true;
        	new PosicionOnText1[30], PosicionOnText2[30], PosicionOnText3[30], string[500];
        	if(POn1[playerid] == 1) PosicionOnText1 = "{00C6FF}Habilitado";
 			if(POn1[playerid] == 0) PosicionOnText1 = "{00C6FF}N/A";
 			if(POn2[playerid] == 1) PosicionOnText2 = "{00C6FF}Habilitado";
 			if(POn2[playerid] == 0) PosicionOnText2 = "{00C6FF}N/A";
 			if(POn3[playerid] == 1) PosicionOnText3 = "{00C6FF}Habilitado";
 			if(POn3[playerid] == 0) PosicionOnText3 = "{00C6FF}N/A";
        	format(string, sizeof(string), "Nombre del Mapa: {00C6FF}'%s'\nEquipos: {00C6FF}'%d'\nIndividual: {00C6FF}'%d'\nSurvival: {00C6FF}'%d'\nMáximo de Jugadores: {00C6FF}'%d'\nMáximo de Kills: {00C6FF}'%d'\nPosición 1: {00C6FF}'%s'\nPosición 2: {00C6FF}'%s'\nPosición 3: {00C6FF}'%s'\nTiempo Limite: {00C6FF}'%d'\nExportar Mapa\n", NombreMapa, cEquipos, cIndividual, cSurvival, cMaximoPlayers, cMaximoKills, PosicionOnText1, PosicionOnText2, PosicionOnText3, cTiempoLimite);
          	ShowPlayerDialog(playerid, 431, DIALOG_STYLE_LIST, "{FFFFFF}Modo Constructor:", string, "Finalizar", "");
        }
    }
    if(dialogid == 431)
    {
    	if (response == 1)
        {
    		switch(listitem)
    		{
        		case 0:
        		{
            		ShowPlayerDialog(playerid, 432, DIALOG_STYLE_INPUT, "{FFFFFF}Modo Constructor:", "{FFFFFF}Escribe el Nombre que tendrá el Mapa:\n{FFFFFF}Puede contener números y letras y no deberá superar los 20 caracteres\n","Aceptar","");
        		}
        		case 1:
        		{
            		ShowPlayerDialog(playerid, 433, DIALOG_STYLE_LIST, "{FFFFFF}¿Quieres que sea por Equipos?", "Si\nNo\n","Aceptar","");
        		}
        		case 2:
        		{
            		ShowPlayerDialog(playerid, 434, DIALOG_STYLE_LIST, "{FFFFFF}¿Quieres que sea Individual?", "Si\nNo\n","Aceptar","");
        		}
        		case 3:
        		{
            		ShowPlayerDialog(playerid, 435, DIALOG_STYLE_LIST, "{FFFFFF}¿Quieres que sea Survival?", "Si\nNo\n","Aceptar","");
        		}
        		case 4:
        		{
            		ShowPlayerDialog(playerid, 436, DIALOG_STYLE_INPUT, "{FFFFFF}Modo Constructor:", "{FFFFFF}¿Cuánto será el máximo de jugadores que se podrán unir?\n{FFFFFF}Máximo 50 y minimo 10:\n","Aceptar","");
        		}
        		case 5:
        		{
            		ShowPlayerDialog(playerid, 437, DIALOG_STYLE_INPUT, "{FFFFFF}Modo Constructor:", "{FFFFFF}¿Cuánto serán el máximo de kills para ganar(si es individual, si no 0)?\n{FFFFFF}Máximo 70 y minimo 25:\n","Aceptar","");
        		}
        		case 6:
        		{
            		ShowPlayerDialog(playerid, 438, DIALOG_STYLE_MSGBOX, "{FFFFFF}Modo Constructor:", "{FFFFFF}Instrucciones:\n{FFFFFF}Para guardar una posición de spawn debes de ir hacía el lugar\n{FFFFFF}acomodar el jugador como irá, luego pulsar ENTER para establecer la posición\n{FFFFFF}(si te equivocas solo rehacerlo).\n{FFFFFF}Recuerda que estás serán las posiciones de spawn del Mapa.\n","Aceptar","");
        		}
        		case 7:
        		{
            		ShowPlayerDialog(playerid, 439, DIALOG_STYLE_MSGBOX, "{FFFFFF}Modo Constructor:", "{FFFFFF}Instrucciones:\n{FFFFFF}Para guardar una posición de spawn debes de ir hacía el lugar\n{FFFFFF}acomodar el jugador como irá, luego pulsar ENTER para establecer la posición\n{FFFFFF}(si te equivocas solo rehacerlo).\n{FFFFFF}Recuerda que estás serán las posiciones de spawn del Mapa.\n","Aceptar","");
        		}
        		case 8:
        		{
           	 		ShowPlayerDialog(playerid, 440, DIALOG_STYLE_MSGBOX, "{FFFFFF}Modo Constructor:", "{FFFFFF}Instrucciones:\n{FFFFFF}Para guardar una posición de spawn debes de ir hacía el lugar\n{FFFFFF}acomodar el jugador como irá, luego pulsar ENTER para establecer la posición\n{FFFFFF}(si te equivocas solo rehacerlo).\n{FFFFFF}Recuerda que estás serán las posiciones de spawn del Mapa.\n","Aceptar","");
        		}
        		case 9:
        		{
            		ShowPlayerDialog(playerid, 441, DIALOG_STYLE_INPUT, "{FFFFFF}Modo Constructor:", "{FFFFFF}Establece el tiempo limite para finalizar el mapa\n{FFFFFF}No establecer un máximo de +100 minutos ni uno inferior a +1 minuto (Recomendado: +15-10 m):\n","Aceptar","");
        		}
        		case 10:
        		{
            		new stringinfo[1200];
            		format(stringinfo, sizeof(stringinfo), "{FFFFFF}Leéa los datos antes de Aceptar:\n\n{FFD300}Nombre del Mapa: {FFFFFF}%s\n{FFD300}Máximo de Jugadores: {FFFFFF}%d\n{FFD300}Máximo de Kills: {FFFFFF}%d\n{FFD300}Equipos: {FFFFFF}%d\n{FFD300}Individual: {FFFFFF}%d\n{FFD300}Survival: {FFFFFF}%d\n{FFD300}Tiempo Limite: {FFFFFF}%d\n\n* No dejes ningún campo sin llenar-\npodría provocar bugs.\n", NombreMapa, cMaximoPlayers, cMaximoKills, cEquipos, cIndividual, cSurvival, cTiempoLimite);
            		ShowPlayerDialog(playerid, 555, DIALOG_STYLE_MSGBOX, "Antes de proceder", stringinfo, "Aceptar", "Regresar");
        		}
    		}
		}
	}
	if(dialogid == 555)
    {
		if (response == 1)
		{
		    new x, y, Cache:result, J, stringpr[100], stringh[100];
        	J = 0;
        	mysql_format(Conexion, queryx, sizeof(queryx), "SELECT NumeroMapas, NumeroRandom FROM deathmatchzonesmax WHERE ID=%d", J);
			result = mysql_query(Conexion, queryx);
			x = cache_get_field_content_int(0, "NumeroMapas");
			y = cache_get_field_content_int(0, "NumeroRandom");
			x++;
			y++;
			cache_delete(result, Conexion);
			mysql_format(Conexion, queryx, sizeof(queryx), "INSERT INTO `deathmatchzones` (ID, NombreMapa, NombreCreador) VALUES ('%d', '%s', '%s')", x, NombreMapa, GetName(playerid));
			mysql_query(Conexion, queryx, false);
			format(queryx, sizeof(queryx), "UPDATE `deathmatchzones` SET `PosX`=%f,`PosY`=%f,`PosZ`=%f,`PosA`=%f,`Pos2X`=%f,`Pos2Y`=%f,`Pos2Z`=%f,`Pos2A`=%f,`Pos3X`=%f,`Pos3Y`=%f,`Pos3Z`=%f,`Pos3A`=%f,`Int`=%d,`World`=%d,`MaximoPlayers`=%d,`Survival`=%d,`MaximoKills`=%d,`Equipos`=%d, `Individual`=%d, `TiempoMapa`=%d WHERE ID=%d", cx, cy, cz, ca, cx2, cy2, cz2, ca2, cx3, cy3, cz3, ca3, cint, 55, cMaximoPlayers, cSurvival, cMaximoKills, cEquipos, cIndividual, cTiempoLimite, x);
            mysql_query(Conexion, queryx, false);
            mysql_format(Conexion, queryx, sizeof(queryx), "UPDATE `deathmatchzonesmax` SET `NumeroMapas`=%d, `NumeroRandom`=%d WHERE ID=%d", x, y, J);
			mysql_query(Conexion, queryx, false);
			format(stringpr, sizeof(stringpr), "* AdminInfo: %s(ID:%d) creó el Mapa DeathMatch '%s' ID Único '%d'.", GetName(playerid), playerid, NombreMapa, x);
			AdminInfoOtro(stringpr);
			SendClientMessage(playerid, -1, "{FFFFFF}*** El DeathMatch se creó correctamente en nuestra base de datos:");
			format(stringh, sizeof(stringh), "{FFD300}*  Nombre: '%s'    ID Único: '%d'    Creador: '%s'", NombreMapa, x, GetName(playerid));
   			SendClientMessage(playerid, -1, stringh);
			printf("Un nuevo Mapa DeathMatch fue creado: '%s' celda '%d' hecho por '%s'", NombreMapa, x, GetName(playerid));
			//Un pequeño reset para evitar bugs
			NombreMapa = "";
			cx = 0.0;
			cy = 0.0;
			cz = 0.0;
			ca = 0.0;
			cx2 = 0.0;
			cy2 = 0.0;
			cz2 = 0.0;
			ca2 = 0.0;
			cx3 = 0.0;
			cy3 = 0.0;
			cz3 = 0.0;
			ca3 = 0.0;
			cint = 0;
			cMaximoPlayers = 0;
			cSurvival = 0;
			cMaximoKills = 0;
			cEquipos = 0;
			cIndividual = 0;
			POn1[playerid] = 0;
			POn2[playerid] = 0;
			POn3[playerid] = 0;
			cTiempoLimite = 0;
		}
	}
    if(dialogid == 432)
    {
        if(response)
        {
            if (!isnull(inputtext))
            {
                static stringh[128];
                strmid(NombreMapa, inputtext, 0, strlen(inputtext), 25);
                format(stringh, sizeof(stringh), "{00FF9D}*** Has establecido el nombre del mapa a '%s'.", NombreMapa);
                SendClientMessage(playerid, -1, "{FFFFFF}   Puedes cambiar el nombre siempre que quieras antes de Exportarlo a la base de datos.");
                SendClientMessage(playerid, -1, stringh);
                MenuCreacionActu(playerid);
            }
            else MenuCreacionActu(playerid);
        }
    }
    if(dialogid == 433)
    {
        if(response == 0) return MenuCreacionActu(playerid);
        switch(listitem)
        {
            case 0:
            {
                cEquipos = 1;
                SendClientMessage(playerid, -1, "{00FF9D}*** Has establecido este nuevo mapa como modo 'Equipos'.");
                SendClientMessage(playerid, -1, "{FFFFFF}    El campo 'Máximo Kills' dejarlo en '0' en este modo de juego.");
                MenuCreacionActu(playerid);
            }
            case 1:
            {
                cEquipos = 0;
                SendClientMessage(playerid, -1, "{00FF9D}*** Has establecido este mapa sin modo 'Equipos'.");
                MenuCreacionActu(playerid);
            }
        }
    }
    if(dialogid == 434)
    {
        if(response == 0) return MenuCreacionActu(playerid);
        switch(listitem)
        {
            case 0:
            {
                cIndividual = 1;
                SendClientMessage(playerid, -1, "{00FF9D}*** Has establecido este nuevo mapa como modo 'Individual'.");
                SendClientMessage(playerid, -1, "{FFFFFF}    El campo 'Máximo Kills' deberás llegarlo obligatoriamente para este modo de juego. Evita bug's al servidor.");
                MenuCreacionActu(playerid);
            }
            case 1:
            {
                cIndividual = 0;
                SendClientMessage(playerid, -1, "{00FF9D}*** Has establecido este mapa sin modo 'Individual'.");
                MenuCreacionActu(playerid);
            }
        }
    }
    if(dialogid == 435)
    {
        if(response == 0) return MenuCreacionActu(playerid);
        switch(listitem)
        {
            case 0:
            {
                cSurvival = 1;
                SendClientMessage(playerid, -1, "{00FF9D}*** Has establecido este nuevo mapa como modo 'Survival'.");
                SendClientMessage(playerid, -1, "{FFFFFF}    El campo 'Máximo Kills' dejarlo en '0' en este modo de juego.");
    			MenuCreacionActu(playerid);
            }
            case 1:
            {
                cSurvival = 0;
                SendClientMessage(playerid, -1, "{00FF9D}*** Has establecido este mapa sin modo 'Survival'.");
                MenuCreacionActu(playerid);
            }
        }
    }
    if(dialogid == 436)
    {
        if(response)
        {
            if (!isnull(inputtext))
            {
                static stringh[128];
                cMaximoPlayers = strval(inputtext);
                format(stringh, sizeof(stringh), "{00FF9D}*** El máximo de jugadores será de '%d'", inputtext);
                SendClientMessage(playerid, -1, stringh);
                MenuCreacionActu(playerid);
            }
            else MenuCreacionActu(playerid);
        }
    }
    if(dialogid == 437)
    {
        if(response)
        {
            if (!isnull(inputtext))
            {
                static stringh[128];
                cMaximoKills = strval(inputtext);
                format(stringh, sizeof(stringh), "{00FF9D}*** El máximo de kills será de '%d'", inputtext);
                SendClientMessage(playerid, -1, stringh);
                MenuCreacionActu(playerid);
            }
            else MenuCreacionActu(playerid);
        }
    }
    if(dialogid == 441)
    {
        if(response)
        {
            if (!isnull(inputtext))
            {
                static stringh[128];
                cTiempoLimite = strval(inputtext);
                format(stringh, sizeof(stringh), "{00FF9D}*** El tiempo limite será de '%d'", cTiempoLimite);
                SendClientMessage(playerid, -1, stringh);
                MenuCreacionActu(playerid);
            }
            else MenuCreacionActu(playerid);
        }
    }
    if(dialogid == 438)
    {
        if(response)
        {
            EstaEditandoPos1[playerid] = true;
            SendClientMessage(playerid, -1, "{00FF9D}*** Dirigete a la posición y pulsa ENTER para completar.");
            SendClientMessage(playerid, -1, "{FFFFFF}Si estás dentro de un interior éste se guardará automaticamente.");
        }
        else SendClientMessage(playerid, -1, "{FFFFFF}No puedes cancelar mientras editas posiciones.");
    }
    if(dialogid == 439)
    {
        if(response)
        {
            EstaEditandoPos2[playerid] = true;
            SendClientMessage(playerid, -1, "{00FF9D}*** Dirigete a la posición y pulsa ENTER para completar.");
            SendClientMessage(playerid, -1, "{FFFFFF}Si estás dentro de un interior éste se guardará automaticamente.");
        }
        else SendClientMessage(playerid, -1, "{FFFFFF}No puedes cancelar mientras editas posiciones.");
    }
    if(dialogid == 440)
    {
        if(response)
        {
            EstaEditandoPos3[playerid] = true;
            SendClientMessage(playerid, -1, "{00FF9D}*** Dirigete a la posición y pulsa ENTER para completar.");
            SendClientMessage(playerid, -1, "{FFFFFF}Si estás dentro de un interior éste se guardará automaticamente.");
        }
        else SendClientMessage(playerid, -1, "{FFFFFF}No puedes cancelar mientras editas posiciones.");
	}
	// SISTEMA TOPS
	if(dialogid == 20170)
    {
		if (response == 1)
		{
 			new Query[700], aux[32];
			Query[0] = '\0';
			new Cache:result;
			result = mysql_query(Conexion, "SELECT Nombre, Muertes FROM jugadores ORDER BY Muertes DESC LIMIT 10");
			for(new i = 0; i<cache_get_row_count(Conexion); i++)
			{
				cache_get_field_content(i, "Nombre", aux, Conexion, sizeof(aux));
				format(Query, sizeof(Query), "%s{FF0000}%d.  {FFFA00}%s{FFFFFF}: %d\n", Query, i+1, aux, cache_get_field_content_int(i, "Muertes", Conexion));
			}
			cache_delete(result, Conexion);
			ShowPlayerDialog(playerid, 20180, DIALOG_STYLE_MSGBOX, "TOP Deaths:", Query, "Dinero+", "Cerrar");
			PlayerPlaySound(playerid,1139,0.0,0.0,0.0);
		}
	}
	if(dialogid == 20180)
    {
		if (response == 1)
		{
 			new Query[700], aux[32];
			Query[0] = '\0';
			new Cache:result;
			result = mysql_query(Conexion, "SELECT Nombre, Dinero FROM jugadores ORDER BY Dinero DESC LIMIT 10");
			for(new i = 0; i<cache_get_row_count(Conexion); i++)
			{
				cache_get_field_content(i, "Nombre", aux, Conexion, sizeof(aux));
				format(Query, sizeof(Query), "%s{FF0000}%d.  {FFFA00}%s{FFFFFF}: %d\n", Query, i+1, aux, cache_get_field_content_int(i, "Dinero", Conexion));
			}
			cache_delete(result, Conexion);
			ShowPlayerDialog(playerid, 20190, DIALOG_STYLE_MSGBOX, "TOP Dinero:", Query, "Duelos+", "Cerrar");
			PlayerPlaySound(playerid,1139,0.0,0.0,0.0);
		}
	}
	if(dialogid == 20190)
    {
		if (response == 1)
		{
 			new Query[700], aux[32];
			Query[0] = '\0';
			new Cache:result;
			result = mysql_query(Conexion, "SELECT Nombre, DuelosGanados FROM jugadores ORDER BY DuelosGanados DESC LIMIT 10");
			for(new i = 0; i<cache_get_row_count(Conexion); i++)
			{
				cache_get_field_content(i, "Nombre", aux, Conexion, sizeof(aux));
				format(Query, sizeof(Query), "%s{FF0000}%d.  {FFFA00}%s{FFFFFF}: %d\n", Query, i+1, aux, cache_get_field_content_int(i, "DuelosGanados", Conexion));
			}
			cache_delete(result, Conexion);
			ShowPlayerDialog(playerid, 20110, DIALOG_STYLE_MSGBOX, "TOP Duelos Ganados:", Query, "Duelos. P+", "Cerrar");
			PlayerPlaySound(playerid,1139,0.0,0.0,0.0);
		}
	}
	if(dialogid == 20110)
    {
		if (response == 1)
		{
 			new Query[700], aux[32];
			Query[0] = '\0';
			new Cache:result;
			result = mysql_query(Conexion, "SELECT Nombre, DuelosPerdidos FROM jugadores ORDER BY DuelosPerdidos DESC LIMIT 10");
			for(new i = 0; i<cache_get_row_count(Conexion); i++)
			{
				cache_get_field_content(i, "Nombre", aux, Conexion, sizeof(aux));
				format(Query, sizeof(Query), "%s{FF0000}%d.  {FFFA00}%s{FFFFFF}: %d\n", Query, i+1, aux, cache_get_field_content_int(i, "DuelosPerdidos", Conexion));
			}
			cache_delete(result, Conexion);
			ShowPlayerDialog(playerid, 20120, DIALOG_STYLE_MSGBOX, "TOP Duelos Perdidos:", Query, "Carreras+", "Cerrar");
			PlayerPlaySound(playerid,1139,0.0,0.0,0.0);
		}
	}
	if(dialogid == 20120)
    {
		if (response == 1)
		{
 			new Query[700], aux[32];
			Query[0] = '\0';
			new Cache:result;
			result = mysql_query(Conexion, "SELECT Nombre, RaceS FROM jugadores ORDER BY RaceS DESC LIMIT 10");
			for(new i = 0; i<cache_get_row_count(Conexion); i++)
			{
				cache_get_field_content(i, "Nombre", aux, Conexion, sizeof(aux));
				format(Query, sizeof(Query), "%s{FF0000}%d.  {FFFA00}%s{FFFFFF}: %d\n", Query, i+1, aux, cache_get_field_content_int(i, "RaceS", Conexion));
			}
			cache_delete(result, Conexion);
			ShowPlayerDialog(playerid, 20130, DIALOG_STYLE_MSGBOX, "TOP Carreras Ganadas:", Query, "Carreras. P+", "Cerrar");
			PlayerPlaySound(playerid,1139,0.0,0.0,0.0);
		}
	}
	if(dialogid == 20130)
    {
		if (response == 1)
		{
 			new Query[700], aux[32];
			Query[0] = '\0';
			new Cache:result;
			result = mysql_query(Conexion, "SELECT Nombre, RacePerdidas FROM jugadores ORDER BY RacePerdidas DESC LIMIT 10");
			for(new i = 0; i<cache_get_row_count(Conexion); i++)
			{
				cache_get_field_content(i, "Nombre", aux, Conexion, sizeof(aux));
				format(Query, sizeof(Query), "%s{FF0000}%d.  {FFFA00}%s{FFFFFF}: %d\n", Query, i+1, aux, cache_get_field_content_int(i, "RacePerdidas", Conexion));
			}
			cache_delete(result, Conexion);
			ShowPlayerDialog(playerid, 20120, DIALOG_STYLE_MSGBOX, "TOP Carreras Perdidas:", Query, "Cerrar", "");
			PlayerPlaySound(playerid,1139,0.0,0.0,0.0);
		}
	}
	//SISTEMA DE CLANINFO:
	if(dialogid == 17)
    {
    	if (response == 1)
		{
    		new Query[90];
			mysql_format(Conexion, Query, sizeof(Query), "SELECT* FROM Clanes WHERE NombreClan='%s'", ClanInfoNombre[playerid]);
			new Cache:result = mysql_query(Conexion, Query);
			new id;
			id = cache_get_field_content_int(0, "IDClan", Conexion);
			cache_delete(result, Conexion);
			new iNFO[2200];
			strcat(iNFO, "{FFFFFF}Lista de Miembros:\n", sizeof(iNFO));
			mysql_format(Conexion, Query, sizeof(Query), "SELECT* FROM ClanesMiembros WHERE IDClan=%d ORDER BY RangoClan DESC", id);
			result=mysql_query(Conexion, Query);
			if(cache_get_row_count(Conexion) == 0)
			{
				cache_delete(result, Conexion);
			}
			new PlayerName[32], rank;
    		SetPVarInt(playerid, "LugarClanes", GetPVarInt(playerid, "LugarClanes")+1);
			for(new i =GetPVarInt(playerid, "LugarClanes"); i<cache_get_row_count(Conexion); i++)
			{
 				SetPVarInt(playerid, "ListaSigNumero", GetPVarInt(playerid, "ListaSigNumero")+1);
				cache_get_field_content(i, "NombreMiembro", PlayerName, Conexion, 32);
				rank = cache_get_field_content_int(i, "RangoClan", Conexion);
				format(iNFO, sizeof(iNFO), "%s{FF0000}%d.  {FFFA00}%s{FFFFFF}: %s\n", iNFO, i+1, RangosClans[rank-1], PlayerName);
			}
			cache_delete(result, Conexion);
			DeletePVar(playerid, "LimitarClanInfo");
 			DeletePVar(playerid, "ListaSigNumero");
 			DeletePVar(playerid, "LugarClanes");
			ShowPlayerDialog(playerid, 18, DIALOG_STYLE_MSGBOX, "{FFFFFF}Estadisticas Clan:", iNFO, "Aceptar", "");
		}
	}
// SISTEMA DE COMANDOS
	if(dialogid == COMANDOS)
    {
		if (response == 1)
		{
			new iString[1500];
			strcat(iString, "{00C7FF}/kill: acción para morir.\n");
 			strcat(iString, "{00C7FF}/paracaidas: obten un paracaidas.\n");
    		strcat(iString, "{00C7FF}/jetpack: obten un jetpack.\n");
    		strcat(iString, "{00C7FF}/mispawn: establece tu lugar de spawn.\n");
    		strcat(iString, "{00C7FF}/tops: ve los tops en tiempo real de jugadores.\n");
    		strcat(iString, "{00C7FF}/topclanes: ver los tops de clanes en tiempo real.\n");
    		strcat(iString, "{00C7FF}/fp: voltea tu vehículo.\n");
    		strcat(iString, "{00C7FF}/rotar80: rota tu vehículo 80 grados.\n");
    		strcat(iString, "{00C7FF}/rotar90: rota tu vehículo 90 grados.\n");
    		strcat(iString, "{00C7FF}/afix: repara tu vehículo automáticamente.\n");
    		strcat(iString, "{00C7FF}/mp: envía un mensaje privado a un jugador.\n");
    		strcat(iString, "{00C7FF}/pm: envía un mensaje privado a un jugador.\n");
    		strcat(iString, "{00C7FF}/nomps: no recibir mps.\n");
    		strcat(iString, "{00C7FF}/simps: recibir mps.\n");
    		strcat(iString, "{00C7FF}/s: guarda una posición.\n");
    		strcat(iString, "{00C7FF}/l: regresa a tu posición.\n");
    		strcat(iString, "{00C7FF}/ap: ve a la posición guardad por un admin.\n");
    		strcat(iString, "{00C7FF}/texto: agrega un texto en tu cabeza.\n");
    		strcat(iString, "{00C7FF}/notexto: quita tu texto.\n");
    		strcat(iString, "{00C7FF}/join: entra a una carrera.\n");
    		strcat(iString, "{00C7FF}/exit: sal de una carrera.\n");
    		strcat(iString, "{00C7FF}/skin: cambia tu skin.\n");
    		strcat(iString, "{00C7FF}/colores: cambia tu color.\n");
    		strcat(iString, "{00C7FF}/dia: cambia tu hora a día.\n");
    		strcat(iString, "{00C7FF}/noche: cambia tu hora a noche.\n\n");
   		 	strcat(iString, "{FFFFFF}* Clic en siguiente para la lista 3.\n");
    		ShowPlayerDialog(playerid,COMANDOS3, DIALOG_STYLE_MSGBOX, "{00FFBD}Lista de comandos 2/3:", iString, "Siguiente", "Cancelar");
    		PlayerPlaySound(playerid,1139,0.0,0.0,0.0);
		}
	}
	if(dialogid == COMANDOS3)
    {
		if (response == 1)
		{
			new iString[1500];
			strcat(iString, "{00C7FF}/claninfo: estadisticas de un clan especifico.\n");
 			strcat(iString, "{00C7FF}/evento: unete a un evento.\n");
    		strcat(iString, "{00C7FF}/verduelos: ver los duelos activos.\n");
    		strcat(iString, "{00C7FF}/cvida: regenera tu vida.\n");
 			strcat(iString, "{00C7FF}/carmadura: regenera tu armadura.\n");
    		strcat(iString, "{00C7FF}/no [turbo - saltos]: desactivar un componente.\n");
    		strcat(iString, "{00C7FF}/modos: obtén el menú de formas de pelea.\n");
 			strcat(iString, "{00C7FF}/fumar: acción de fumar(CRTL).\n");
    		strcat(iString, "{00C7FF}/beber: acción de beber(CRTL).\n");
    		strcat(iString, "{00C7FF}/salir: sal de una zona dm.\n");
    		strcat(iString, "{00C7FF}/parkour: lista de parkours.\n");
    		strcat(iString, "{00C7FF}/ttiempo: cambia tu tiempo.\n");
    		strcat(iString, "{00C7FF}/chora: cambia tu hora.\n");
    		strcat(iString, "{00C7FF}/juegos: lista de juegos.\n");
    		strcat(iString, "{00C7FF}/minijuegos: lista de minijuegos.\n");
    		strcat(iString, "{00C7FF}/ldms: lista de zonas dm.\n");
    		strcat(iString, "{00C7FF}/duelo: envía una inviación a duelo a un jugador.\n");
    		strcat(iString, "{00C7FF}/aceptar: acepta una invitación a duelo.\n");
    		strcat(iString, "{00C7FF}/cancelar: cancela una invitación a duelo.\n");
    		strcat(iString, "{00C7FF}/salto: activa los saltos en auto.\n");
    		strcat(iString, "{00C7FF}/turbo: activa el super turbo.\n");
    		strcat(iString, "{00C7FF}/neon: lista de neones displonibles.\n");
    		strcat(iString, "{00C7FF}/ccolor: cambia el color a tu auto.\n");
    		strcat(iString, "{00C7FF}/tunear: tunea un vehículo.\n\n"); //16
			ShowPlayerDialog(playerid,COMANDOS4, DIALOG_STYLE_MSGBOX, "{00FFBD}Lista de comandos 3/3:", iString, "Cerrar", "");
			PlayerPlaySound(playerid,1139,0.0,0.0,0.0);
		}
	}
	// SISTEMA EVENTOS
	if(dialogid == 8434)
    {
    	if(response)
     	{
     		static stringa[128];
     		format(stringa, sizeof(stringa), ""CA"* Administrador %s creó el Evento \"%s\", usa: /evento.", GetName(playerid), inputtext);
     		SendClientMessageToAll(-1, stringa);
     	}
    }
	//SISTEMA TEXTOS LABELS
	//Amarillo
	if(dialogid == 3338)
   	{
		if(response)
		{
			if (!isnull(inputtext))
			{
				new stringa[125];
				if(DetectarSpam(inputtext)) return SendClientMessage(playerid, -1, "{FF0000}No puedes colocar Páginas Web ni direcciones IPs en tu Texto."), format(stringa, sizeof(stringa), "* AdminInfo SPAM: se detectó un posible SPAM en el texto del jugador %s(ID:%d): \"%s\"", GetName(playerid), playerid, inputtext), AdminInfoOtro(stringa);
				CabeceroColor(playerid, 0xFFFF00F4, 1, inputtext);
			}
			else ShowPlayerDialog(playerid, 3338, DIALOG_STYLE_INPUT, "{E9E200}Ingresa un Texto:", "{FFFFFF}Ingresa el {01A2FF}texto{FFFFFF} que deseas agregar a tu cabeza.\nRecuerda, el texto debe de ser de {01A2FF}3-20{FFFFFF} de longitud:\nSu colocas un texto con más de 3 números, se tomará como SPAM.", "Aceptar", "Cancelar");
		}
   	}
   	//Rojo
   	if(dialogid == 3339)
   	{
		if(response)
		{
			if (!isnull(inputtext))
			{
				new stringa[125];
				if(DetectarSpam(inputtext)) return SendClientMessage(playerid, -1, "{FF0000}No puedes colocar Páginas Web ni direcciones IPs en tu Texto."), format(stringa, sizeof(stringa), "* AdminInfo SPAM: se detectó un posible SPAM en el texto del jugador %s(ID:%d): \"%s\"", GetName(playerid), playerid, inputtext), AdminInfoOtro(stringa);
				CabeceroColor(playerid, 0xFF0000F4, 2, inputtext);
			}
			else ShowPlayerDialog(playerid, 3339, DIALOG_STYLE_INPUT, "{E9E200}Ingresa un Texto:", "{FFFFFF}Ingresa el {01A2FF}texto{FFFFFF} que deseas agregar a tu cabeza.\nRecuerda, el texto debe de ser de {01A2FF}3-20{FFFFFF} de longitud:\nSu colocas un texto con más de 3 números, se tomará como SPAM.", "Aceptar", "Cancelar");
		}
   	}
   	//Celeste
   	if(dialogid == 3340)
   	{
		if(response)
		{
			if (!isnull(inputtext))
			{
				new stringa[125];
				if(DetectarSpam(inputtext)) return SendClientMessage(playerid, -1, "{FF0000}No puedes colocar Páginas Web ni direcciones IPs en tu Texto."), format(stringa, sizeof(stringa), "* AdminInfo SPAM: se detectó un posible SPAM en el texto del jugador %s(ID:%d): \"%s\"", GetName(playerid), playerid, inputtext), AdminInfoOtro(stringa);
				CabeceroColor(playerid, 0x00DEE6BE, 3, inputtext);
			}
			else ShowPlayerDialog(playerid, 3340, DIALOG_STYLE_INPUT, "{E9E200}Ingresa un Texto:", "{FFFFFF}Ingresa el {01A2FF}texto{FFFFFF} que deseas agregar a tu cabeza.\nRecuerda, el texto debe de ser de {01A2FF}3-20{FFFFFF} de longitud:\nSu colocas un texto con más de 3 números, se tomará como SPAM.", "Aceptar", "Cancelar");
		}
   	}
   	//Verde
   	if(dialogid == 3341)
   	{
		if(response)
		{
			if (!isnull(inputtext))
			{
				new stringa[125];
				if(DetectarSpam(inputtext)) return SendClientMessage(playerid, -1, "{FF0000}No puedes colocar Páginas Web ni direcciones IPs en tu Texto."), format(stringa, sizeof(stringa), "* AdminInfo SPAM: se detectó un posible SPAM en el texto del jugador %s(ID:%d): \"%s\"", GetName(playerid), playerid, inputtext), AdminInfoOtro(stringa);
				CabeceroColor(playerid, 0x00EE00BE, 4, inputtext);
			}
			else ShowPlayerDialog(playerid, 3341, DIALOG_STYLE_INPUT, "{E9E200}Ingresa un Texto:", "{FFFFFF}Ingresa el {01A2FF}texto{FFFFFF} que deseas agregar a tu cabeza.\nRecuerda, el texto debe de ser de {01A2FF}3-20{FFFFFF} de longitud:\nSu colocas un texto con más de 3 números, se tomará como SPAM.", "Aceptar", "Cancelar");
		}
   	}
   	//Blanco
   	if(dialogid == 3342)
   	{
		if(response)
		{
			if (!isnull(inputtext))
			{
				new stringa[125];
				if(DetectarSpam(inputtext)) return SendClientMessage(playerid, -1, "{FF0000}No puedes colocar Páginas Web ni direcciones IPs en tu Texto."), format(stringa, sizeof(stringa), "* AdminInfo SPAM: se detectó un posible SPAM en el texto del jugador %s(ID:%d): \"%s\"", GetName(playerid), playerid, inputtext), AdminInfoOtro(stringa);
				CabeceroColor(playerid, 0x00000000, 5, inputtext);
			}
			else ShowPlayerDialog(playerid, 3342, DIALOG_STYLE_INPUT, "{E9E200}Ingresa un Texto:", "{FFFFFF}Ingresa el {01A2FF}texto{FFFFFF} que deseas agregar a tu cabeza.\nRecuerda, el texto debe de ser de {01A2FF}3-20{FFFFFF} de longitud:\nSu colocas un texto con más de 3 números, se tomará como SPAM.", "Aceptar", "Cancelar");
		}
   	}
   	//Legendario
   	if(dialogid == 3343)
   	{
		if(response)
		{
			if (!isnull(inputtext))
			{
				new stringa[125];
				if(DetectarSpam(inputtext)) return SendClientMessage(playerid, -1, "{FF0000}No puedes colocar Páginas Web ni direcciones IPs en tu Texto."), format(stringa, sizeof(stringa), "* AdminInfo SPAM: se detectó un posible SPAM en el texto del jugador %s(ID:%d): \"%s\"", GetName(playerid), playerid, inputtext), AdminInfoOtro(stringa);
				CabeceroColor(playerid, 0x97AABFFF, 6, inputtext);
			}
			else ShowPlayerDialog(playerid, 3343, DIALOG_STYLE_INPUT, "{E9E200}Ingresa un Texto:", "{FFFFFF}Ingresa el {01A2FF}texto{FFFFFF} que deseas agregar a tu cabeza.\nRecuerda, el texto debe de ser de {01A2FF}3-20{FFFFFF} de longitud:\nSu colocas un texto con más de 3 números, se tomará como SPAM.", "Aceptar", "Cancelar");
		}
   	}
   	//Legendario Oro
   	if(dialogid == 3344)
   	{
		if(response)
		{
			if (!isnull(inputtext))
			{
				new stringa[125];
				if(DetectarSpam(inputtext)) return SendClientMessage(playerid, -1, "{FF0000}No puedes colocar Páginas Web ni direcciones IPs en tu Texto."), format(stringa, sizeof(stringa), "* AdminInfo SPAM: se detectó un posible SPAM en el texto del jugador %s(ID:%d): \"%s\"", GetName(playerid), playerid, inputtext), AdminInfoOtro(stringa);
				CabeceroColor(playerid, 0xE7FF55FF, 7, inputtext);
			}
			else ShowPlayerDialog(playerid, 3344, DIALOG_STYLE_INPUT, "{E9E200}Ingresa un Texto:", "{FFFFFF}Ingresa el {01A2FF}texto{FFFFFF} que deseas agregar a tu cabeza.\nRecuerda, el texto debe de ser de {01A2FF}3-20{FFFFFF} de longitud:\nSu colocas un texto con más de 3 números, se tomará como SPAM.", "Aceptar", "Cancelar");
		}
   	}
   //SISTEMA DE GANGZONES:
   static tmpx[256], idxl, DineroCP[MP], DineroCC[MP], JugadoresR[MP], TiempoZonaC[MP], ScoreJugadoresClan[MP];
   static tmpxx[256], idxxl, tmpxxx[256], idxxxl, tmpxxxx[256], idxxxxl, tmpxxxxx[256], idxxxxxl;
   switch(dialogid)
	{
		case 9540:
    	{
    	    if(response == 0) return 1;
    	    switch(listitem)
    	    {
    	        case 0:
    	        {
       				ShowPlayerDialog(playerid, 9541, DIALOG_STYLE_LIST, "Elige un color para la Zona", "Color Default\n", "Aceptar", "Regresar");
				}
			}
       	}
	   	case 9541:
    	{
     		if(response == 0) return ShowPlayerDialog(playerid, 9540, DIALOG_STYLE_LIST, "Creador de Zonas Conquistables:", "Crear Zona", "Aceptar", "Salir");
     		switch(listitem)
       		{
       		    case 0:  gColor = BLACK;
       		}
            ShowPlayerDialog(playerid, 9542, DIALOG_STYLE_MSGBOX, "Ayuda:", "GangZone creado, utiliza las flechas para mover y hacerlo más grande\nUtiliza la tecla 'shift' para hacerlo más rápido.\nPresiona 'Enter' para terminar con la creación:", "Aceptar", "Regresar");
   		}
		case 9542:
		{
		    if(response == 0) return ShowPlayerDialog(playerid, 9541, DIALOG_STYLE_LIST, "Elige un color para la Zona", "Negro\nBlanco\nNaranja\nRojo\nAzul\nMorado\nVerde\nAmarillo\nRosado\nAzul Claro\nCafé", "Select", "Back");
			GangZone[playerid] = true;
   			GetPos[playerid] = false;
		}
		case 9545:
		{
		    if(response == 0)
			{
				GangZoneDestroy(GangZone[gCount]);
				return 1;
			}
			new Query[600],
				Cache:result,
				ZL[15];
				ZL = "Zona Libre";
			if(!strlen(inputtext)) return ShowPlayerDialog(playerid, 9546, DIALOG_STYLE_MSGBOX, "Error", "Necesitas darle un nombre a tu Zona para Crearla", "Aceptar", "Cerrar");
			//mysql_format(Conexion, Query, sizeof(Query), "SELECT IDZona FROM ClanZonas ORDER BY IDZona ASC");
			mysql_format(Conexion, Query, sizeof(Query), "SELECT * FROM `clanzonas` ORDER BY `IDZona` ASC");
			SetPVarInt(playerid, "FilasZonas", cache_get_row_count(Conexion));
			cache_delete(result, Conexion);
			SetPVarInt(playerid, "FilasZonas", GetPVarInt(playerid, "FilasZonas") +1);
			for(new i = 0; i<ZONAS; i++)
			{
    			if(ZONAX1[i] != 0)
    			{
    			
    			}
    			else
    			{
    			    SetPVarInt(playerid, "FilasZonas", i);
    			    break;
    			}
			}
            mysql_format(Conexion, Query, sizeof(Query), "INSERT INTO `ClanZonas` (`IDZona`, `NombreZona`, `NombreClanConquistada`, `JugadoresNecesarios`, `ColorClan`, `ZonaX1`, `ZonaY1`, `ZonaX2`, `ZonaY2`, `Score`, `DineroIndividual`, `DineroClan`, `IDClanConquisto`, `TiempoZona`)\
		 	VALUES (%d, '%s', '%s', %d, %d, %f, %f, %f, %f, %d, 200, 200, 0, 150)", GetPVarInt(playerid, "FilasZonas"), inputtext, ZL, 3, 0x0000823C, pMinX, pMinY, pMaxX, pMaxY, ScoreJugadoresClan[playerid]);
      		mysql_query(Conexion, Query);
			mysql_tquery(Conexion, "SELECT* FROM ClanZonas", "CargarZonasClanes", "");
			format(Query, sizeof(Query), "%d", GetPVarInt(playerid, "FilasZonas"));
			SendClientMessage(playerid, -1, "{FFFF00}*** Has creado una nueva Zona Conquistable. Las zonas han sido actualizadas!");
			SendClientMessage(playerid, -1, Query);
			foreach(new i: Player)
			{
				MostrarGangZonesPlayer(i);
			}
            GangZoneDestroy(GangZone[gCount]);
			new
			    g;

			while(g <sizeof(gCount))
			{
			    ++CreatedZone[g];
			    ++g;
			}
		}
		case 9546:
		{
		    if(response == 0)
			{
				GangZoneDestroy(GangZone[gCount]);
				return 1;
			}
			ShowPlayerDialog(playerid, 9545, DIALOG_STYLE_INPUT, "Guardar o Borrar Zona", "Escribe un nombre para la Zona de Conquista. Ej: Los Santos International\n", "Guardar", "Eliminar");
		}
		//Dinero:
		case 9601:
		{
		    if(response == 0)
		    if (!isnull(inputtext)) return ShowPlayerDialog(playerid, 9601, DIALOG_STYLE_INPUT, "Dinero Jugador:", "Dinero que recibirán los jugadores al terminar una conquista(entre 1000-2000):\n", "Aceptar", "Salir");
		    tmpx = strtok(inputtext, idxl);
			new v = strval(tmpx);
			DineroCP[playerid] = v;
			ShowPlayerDialog(playerid, 9602, DIALOG_STYLE_INPUT, "Dinero Clan:", "Dinero que recibirá el clan de dinero(entre 1000-2000):\n", "Aceptar", "Salir");
		}
		//Jugadores Requeridos:
		case 9602:
		{
		    if(response == 0)
		    if (!isnull(inputtext)) return ShowPlayerDialog(playerid, 9602, DIALOG_STYLE_INPUT, "Dinero Clan:", "Dinero que recibirá el clan de dinero(entre 1000-2000):\n", "Aceptar", "Salir");
		    tmpxx = strtok(inputtext, idxxl);
			new v2 = strval(tmpxx);
			DineroCC[playerid] = v2;
			ShowPlayerDialog(playerid, 9603, DIALOG_STYLE_INPUT, "Tiempo Zona:", "Escribe el tiempo que durará la conquista de la zona(en segundos):\n", "Aceptar", "Salir");
		}
		//Tiempo:
		case 9603:
		{
		    if(response == 0)
		    if (!isnull(inputtext)) return ShowPlayerDialog(playerid, 9603, DIALOG_STYLE_INPUT, "Tiempo Zona:", "Escribe el tiempo que durará la conquista de la zona(en segundos):\n", "Aceptar", "Salir");
		    tmpxxx = strtok(inputtext, idxxxl);
			new v3 = strval(tmpxxx);
			TiempoZonaC[playerid] = v3;
			ShowPlayerDialog(playerid, 9604, DIALOG_STYLE_INPUT, "Jugadores Requeridos:", "Cantidad de jugadores necesaria para iniciar conquista(3-10):\n", "Aceptar", "Salir");
		}
		case 9604:
		{
		    if(response == 0)
		    if (!isnull(inputtext)) return ShowPlayerDialog(playerid, 9604, DIALOG_STYLE_INPUT, "Jugadores Requeridos:", "Cantidad de jugadores necesaria para iniciar conquista(3-10):\n", "Aceptar", "Salir");
		    tmpxxxx = strtok(inputtext, idxxxxl);
			new v4 = strval(tmpxxxx);
			JugadoresR[playerid] = v4;
			ShowPlayerDialog(playerid, 9605, DIALOG_STYLE_INPUT, "Score:", "Score que recibirán los jugadores al termino de la conquista:", "Aceptar", "Salir");
		}
		case 9605:
		{
		    if(response == 0)
		    if (!isnull(inputtext)) return ShowPlayerDialog(playerid, 9605, DIALOG_STYLE_INPUT, "Score:", "Score que recibirán los jugadores al termino de la conquista:", "Aceptar", "Salir");
		    tmpxxxxx = strtok(inputtext, idxxxxxl);
			new v5 = strval(tmpxxxxx);
			ScoreJugadoresClan[playerid] = v5;
			ShowPlayerDialog(playerid, 9545, DIALOG_STYLE_INPUT, "Creador de Zonas Conquistables:", "Dale un nombre a tu Zona:", "Aceptar", "Salir");
		}
		case 9547:
		{
		    if(response == 0) return 1;
			ShowPlayerDialog(playerid, 9540, DIALOG_STYLE_LIST, "Creador de Zonas Conquistables:", "Crear Zona", "Aceptar", "Salir");
		}
	}
	// SISTEMAS VARIOS:
	//DUDA:
	if(dialogid == 1678)
   	{
		if(response)
		{
			new St[90];
			format(St,sizeof(St),"{3DD4FF}[DUDA]: %s(%d): %s", GetName(playerid), playerid, inputtext);
			AdminInfoOtro(St);
			SendClientMessage(playerid, -1, "{FFE800}Su duda a sido enviada correctamente.");
		}
   	}
	//SISTEMA MUSICA ONLINE
 	if(dialogid == 3)
	{
		if(response)
		{
			new i;
			ForEach(i, MP)
			{
				PlayAudioStreamForPlayer(i, inputtext);
				//GameTextForAll("~r~~h~on~w~-~g~~h~line~n~~b~~h~m~g~~h~u~r~~h~s~w~i~y~c~b~a~w~!", 6000, 5);
			}
		}
	}
	if(dialogid == 1298)
   	{
  	 	if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
   		switch(response)
   		{
   		    case 0:
   		    {
                SendClientMessage(playerid, -1, "Response case 0");
   		    }
   		    case 1:
   		    {
   		        SendClientMessage(playerid, -1, "Response case 1");
		 	}
	    }
    }
	//CLAN ADMINISTRAR
 	if(dialogid == CLAN_ADMINISTRAR)
   	{
  	 	if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
   		switch(listitem)
   		{
			case 0:
			{
    			ShowPlayerDialog(playerid, CLAN_ADMINISTRAR2, DIALOG_STYLE_LIST, "{FFFFFF}Configuración de tu Clan:","Activar\nDesactivar\n","Seleccionar","Cancelar");
        	}
			case 1:
			{
				ShowPlayerDialog(playerid, CLAN_ADMINISTRAR3, DIALOG_STYLE_INPUT, "{FFFFFF}Configuración de tu Clan:","Ingresa el ID del skin:\n","Aceptar","Cancelar");
			}
			case 2:
			{
				ShowPlayerDialog(playerid, ColorClanList, DIALOG_STYLE_LIST, "{FFFFFF}Configuración de tu Clan:", "{FF0000}Colores Rojos\n{FF7400}Colores Naranjas\n{712B00}Colores Marrones\n{FFE900}Colores Amarillos\n{02E900}Colores Verdes\n{02E9F0}Colores Azules Claros\n{0052FF}Azules Oscuros\n{B900FF}Colores Violetas\n{FF4CF0}Colores Rosas\n{6C6C8B}Colores Grises\n{3C3F44}Color Negro\n{FFFFFF}Color Blanco\n", "Aceptar", "Cancelar");
    		}
    		case 3:
			{
				new Query[2700], rango;
				mysql_format(Conexion, Query, sizeof(Query), "SELECT* FROM ClanesMiembros WHERE IDClan=%d ORDER BY RangoClan DESC", Clan_ID[playerid]);
				new Cache:result=mysql_query(Conexion, Query);
				if(cache_get_row_count(Conexion) <= 1)
				{
					cache_delete(result, Conexion);
					return SendClientMessage(playerid, -1, "{FFFF00}*** Error: no se puede mostrar porque no hay más miembros en tu clan.");
				}
				new PName[32];
				Query = "";
				for(new i = 1; i<cache_get_row_count(Conexion)-1; i++)
				{
					cache_get_field_content(i, "NombreMiembro", PName, Conexion, sizeof(PName));
					rango = cache_get_field_content_int(i, "RangoClan", Conexion);
					format(Query, sizeof(Query), "%s{FFFFFF}%s: %s\n", Query, RangosClans[rango-1], PName);
				}
				cache_get_field_content(cache_get_row_count(Conexion)-1, "NombreMiembro", PName, Conexion, sizeof(PName));
				rango = cache_get_field_content_int(cache_get_row_count(Conexion)-1, "RangoClan", Conexion);
				format(Query, sizeof(Query), "%s{FFFFFF}%s: {FFFFFF}%s", Query, RangosClans[rango-1], PName);
				ShowPlayerDialog(playerid, 25, DIALOG_STYLE_LIST, "{FFFFFF}Configuración de tu Clan:", Query, "Seleccionar", "Cancelar");
				SetPVarInt(playerid, "FilasClan", cache_get_row_count(Conexion));
				cache_delete(result, Conexion);
			}
			case 4:
			{
				if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
				new Query[2700], rango;
				mysql_format(Conexion, Query, sizeof(Query), "SELECT* FROM ClanesMiembros WHERE IDClan=%d ORDER BY RangoClan DESC", Clan_ID[playerid]);
				new Cache:result=mysql_query(Conexion, Query);
				if(cache_get_row_count(Conexion) <= 1)
				{
					cache_delete(result, Conexion);
					return SendClientMessage(playerid, -1, "{FFFF00}*** Error: no se puede mostrar porque no hay más miembros en tu clan.");
				}
				new PName[32];
				Query = "";
				for(new i = 1; i<cache_get_row_count(Conexion)-1; i++)
				{
					cache_get_field_content(i, "NombreMiembro", PName, Conexion, sizeof(PName));
					rango = cache_get_field_content_int(i, "RangoClan", Conexion);
					format(Query, sizeof(Query), "%s{FFFFFF}%s: %s\n", Query, RangosClans[rango-1], PName);
				}
				cache_get_field_content(cache_get_row_count(Conexion)-1, "NombreMiembro", PName, Conexion, sizeof(PName));
				rango = cache_get_field_content_int(cache_get_row_count(Conexion)-1, "RangoClan", Conexion);
				format(Query, sizeof(Query), "%s{FFFFFF}%s: {FFFFFF}%s", Query, RangosClans[rango-1], PName);
				ShowPlayerDialog(playerid, 30, DIALOG_STYLE_LIST, "{FFFFFF}Configuración de tu Clan:", Query, "Expulsar", "Cancelar");
				SetPVarInt(playerid, "FilasClan", cache_get_row_count(Conexion));
				cache_delete(result, Conexion);
    		}
    	}
	}
   	if(dialogid == CLAN_ADMINISTRAR2)
   	{
   		static stringc[128], query[128];
   		if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
   		switch(listitem)
   		{
			case 0:
			{
				format(stringc, sizeof(stringc), "{00FFFF}* <%s> %s habilitó el AntiTeamKill y ahora no se podrán hacer daño entre clan.", Clan_JugadorCompleto[playerid], GetName(playerid));
    			foreach(new b : Player)
				{
       				if(IsPlayerConnected(b))
         			{
          				if(Clan_ID[b] == Clan_ID[playerid])
            			{
             				SendClientMessage(b, -1, stringc);
             				SetPlayerTeam(b, Clan_ID[playerid]);
							AntiTeamKill[b] = 1;
                		}
            		}
        		}
        		mysql_format(Conexion, query, sizeof(query), "UPDATE Clanes SET AntiTeamKill = '%d' WHERE IDClan ='%d'", AntiTeamKill[playerid], Clan_ID[playerid]);
				mysql_query(Conexion, query, false);
        	}
			case 1:
			{
				format(stringc, sizeof(stringc), "{00FFFF}* <%s> %s deshabilitó el AntiTeamKill y ahora podrán hacerse daño entre clan.", Clan_JugadorCompleto[playerid], GetName(playerid));
    			foreach(new b : Player)
				{
       				if(IsPlayerConnected(b))
         			{
          				if(Clan_ID[b] == Clan_ID[playerid])
            			{
             				SendClientMessage(b, -1, stringc);
             				SetPlayerTeam(b, 0);
							AntiTeamKill[b] = 0;
                		}
            		}
        		}
        		mysql_format(Conexion, query, sizeof(query), "UPDATE Clanes SET AntiTeamKill = '%d' WHERE IDClan ='%d'", AntiTeamKill[playerid], Clan_ID[playerid]);
				mysql_query(Conexion, query, false);
			}
    	}
  	}
  	if(dialogid == CLAN_ADMINISTRAR3)
   	{
   		static stringc[128], query[128];
   		if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
   		{
			format(stringc, sizeof(stringc), "{00FFFF}* <%s> %s ha cambiado el skin del clan '%d'.", Clan_JugadorCompleto[playerid], GetName(playerid), strval(inputtext));
    		foreach(new b : Player)
			{
       			if(IsPlayerConnected(b))
         		{
          			if(Clan_ID[b] == Clan_ID[playerid])
            		{
             			SendClientMessage(b, -1, stringc);
                		SkinClan[b] = strval(inputtext);
                		SetPlayerSkin(b, SkinClan[b]);
                	}
            	}
        	}
        	mysql_format(Conexion, query, sizeof(query), "UPDATE Clanes SET ClanSkin = '%d' WHERE IDClan ='%d'", strval(inputtext), Clan_ID[playerid]);
			mysql_query(Conexion, query, false);
    	}
  	}
    switch(dialogid)
    {
        case REGISTRO:
        {
            static VERIFICAR[MP];
            if(!response) return SendClientMessage(playerid, -1, "{C70000}Has escogido no registrarte en nuestro servidor."), Kick(playerid);
            else
            {
                if(strlen(inputtext) < 5 || strlen(inputtext) > 20) return VERIFICAR[playerid] = 0, ShowPlayerDialog(playerid, REGISTRO, DIALOG_STYLE_PASSWORD,"{FFFFFF}Error:", "{FFFFFF}La contraseña que colocaste no posee los parametros permitidos.\nPor favor escribe una nueva contraseña:", "Registrar", "");
                if(VERIFICAR[playerid] == 0)
                {
                    VERIFICAR[playerid] = 1;
                    strmid(VerificarText[playerid], inputtext, 0, strlen(inputtext), 20);
                    ShowPlayerDialog(playerid, REGISTRO, DIALOG_STYLE_PASSWORD,"{FFFFFF}Verficación", "{FFFFFF}Verificación de la contraseña\nIngresa de nuevo la contraseña para validar:", "Aceptar", "");
                    DarTuto[playerid] = 1;
                    JugadorLogeado[playerid][1] = 1;
                    return 1;
                }
                if(VERIFICAR[playerid] == 1){
				if(!strcmp(inputtext, VerificarText[playerid], true))
				{
					VERIFICAR[playerid] = 0;
					REGISTRAR_JUGADOR(playerid, inputtext);
				}
                else return VERIFICAR[playerid] = 0, ShowPlayerDialog(playerid, REGISTRO, DIALOG_STYLE_PASSWORD,"{FFFFFF}Error", "{FFFFFF}La primera contraseña no coicide con la segunda.\n{FFFFFF}Escriba una nueva contraseña para registrarse:", "Registrar", "");
            }
            }
        }
        case INGRESO:
        {
            if(!response) return SendClientMessage(playerid, -1, "{C70000}Has escogido no logearte en nuestro servidor."), Kick(playerid);
            else
            {
                if(strlen(inputtext) < 5 || strlen(inputtext) > 20) return ShowPlayerDialog(playerid, INGRESO, DIALOG_STYLE_INPUT,"{FFFFFF}Error:","{FFFFFF}La contraseña que colocaste no posee los parametros permitidos.\n{FFFFFF}Vuelva a intentar iniciar sesión:\n","Aceptar","Salir");
                if(!strcmp(inputtext, PlayerInfo[playerid][Password], true))
                {
					CARGAR_DATOS_JUGADOR(playerid);
					new Ipp[16];
					GetPlayerIp(playerid, Ipp, sizeof(Ipp));
					format(queryx, sizeof(queryx), "UPDATE `jugadores` SET `IP`='%s' WHERE Nombre='%s'", Ipp, GetName(playerid));
   					mysql_function_query(Conexion, queryx, true, "OnQueryFinish", "ii", 2, playerid);
				}
                else
				{
                    ContadorDeIntentos(playerid);
                    IntentosPassword[playerid] += 1;
					ShowPlayerDialog(playerid, INGRESO, DIALOG_STYLE_PASSWORD,"{FFFFFF}Error", "{FFFFFF}Has colocado una contraseña incorrecta.\nIngresa de nuevo tu contraseña:", "Aceptar", "");
            	}
            }
        }
    }
   	if(dialogid == 25)
	{
		if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
		new Query[800];
		mysql_format(Conexion, Query, sizeof(Query), "SELECT* FROM ClanesMiembros WHERE IDClan=%d ORDER BY RangoClan DESC", Clan_ID[playerid]);
		new Cache:result=mysql_query(Conexion, Query);
		if(cache_get_row_count(Conexion) != GetPVarInt(playerid, "FilasClan") || RangoClan[playerid] != 5)
		{
			SendClientMessage(playerid, -1, "{FFFF00}*** Ocurrio un error en la operación.");
			cache_delete(result, Conexion);
			return 1;
		}
		new pName[32];
		cache_get_row(listitem+1, 1, pName, Conexion, sizeof(pName));
		cache_delete(result, Conexion);
		SetPVarString(playerid, "Modificar_A", pName);
		DeletePVar(playerid, "FilasClan");
		Query[0] = '\0';
		for(new i=0; i<5; i++)
			format(Query, sizeof(Query), "%s{FFFFFF}%s\n", Query, RangosClans[i]);
		ShowPlayerDialog(playerid, 26, DIALOG_STYLE_LIST, "{FFFFFF}Rangos Disponibles:", Query, "Seleccionar", "Cancelar");
	}
	if(dialogid == 26)
	{
		if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
		new Query[130], name[128], Cache:result;
  		GetPVarString(playerid, "Modificar_A", name, sizeof(name));
  		cache_delete(result, Conexion);
		mysql_format(Conexion, Query, sizeof(Query), "UPDATE ClanesMiembros SET RangoClan = %d WHERE NombreMiembro='%s'", listitem+1, name);
		result=mysql_query(Conexion, Query);
		if(cache_affected_rows(Conexion) == 0)
		{
			cache_delete(result, Conexion);
			SendClientMessage(playerid, -1, "{FFFF00}*** Ocurrio un error en la operación.");
			return 1;
		}
		cache_delete(result, Conexion);
		foreach(new i : Player)
		{
		    if(CadenaIgual(name, GetName(i)))
			RangoClan[i] = listitem+1;
		}
		format(name, sizeof(name), "{00FF00}* <%s> %s cambió el rango de %s a '%s'.", Clan_JugadorCompleto[playerid], GetName(playerid), name, RangosClans[listitem]);
		foreach(new i : Player)
		{
			if(Clan_ID[i] == Clan_ID[playerid])
			SendClientMessage(i, -1, name);
		}
	}
	//Expulsar Player
  	if(dialogid == 30)
	{
		if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
		new Query[128];
		mysql_format(Conexion, Query, sizeof(Query), "SELECT* FROM ClanesMiembros WHERE IDClan=%d ORDER BY RangoClan DESC", Clan_ID[playerid]);
		new Cache:result=mysql_query(Conexion, Query);
		if(cache_get_row_count(Conexion) != GetPVarInt(playerid, "FilasClan") || RangoClan[playerid] != 5)
		{
			SendClientMessage(playerid, -1, "{FFFF00}*** Ocurrio un error en la operación.");
			cache_delete(result, Conexion);
			return 1;
		}
		new pName[32];
		cache_get_row(listitem+1, 1, pName, Conexion, sizeof(pName));
		cache_delete(result, Conexion);
		SetPVarString(playerid, "Modificar_A", pName);
		DeletePVar(playerid, "FilasClan");
			format(Query, sizeof(Query), "{FFFFFF}¿Seguro/a de que quieres expulsar a '%s'?\n{FFFFFF}       Pulsa 'Acepto' para finalizar.", pName);
		ShowPlayerDialog(playerid, 31, DIALOG_STYLE_MSGBOX, "{FFFFFF}Expulsión del Clan:", Query, "Acepto", "Cancelar");
	}
	if(dialogid == 31)
	{
		if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
		switch(response)
		{
			case 1:
			{
				new Query[85], pname[32];
				GetPVarString(playerid, "Modificar_A", pname, sizeof(pname));
				new temp = Clan_ID[playerid];

				foreach(new i : Player)
				{
					if(CadenaIgual(pname, NombreJugadorEnClan[i]))
					{
						Clan_ID[i] = 0;
						RangoClan[i] = 0;
						Clan_JugadorCompleto[i] = "Sin Clan";
						SkinClan[i] = -1;
						ColorClan[i] = -1;
						EnClan[i] = 0;
						SetPlayerTeam(i, 0);
						AntiTeamKill[i] = 0;
						PTDHide(i, TEXTCLAN[i]);
						SendClientMessage(i, -1, "{00FFE2}*** Has sido expulsado de tu clan.");
					}
				}
				mysql_format(Conexion, Query, sizeof(Query), "DELETE FROM ClanesMiembros WHERE NombreMiembro = '%s'", pname);
				new Cache:result = mysql_query(Conexion, Query);
				if(cache_affected_rows(Conexion) == 0)
				{
					cache_delete(result, Conexion);
					return SendClientMessage(playerid, -1, "{FFFF00}*** Hubo un error al expulsar al jugador, no existe en el clan.");
				}
				cache_delete(result, Conexion);
				mysql_query(Conexion, Query, false);
				format(Query, sizeof(Query), "{00FFE2}* <%s> Clan: %s expulsó a %s del clan!", Clan_JugadorCompleto[playerid], GetName(playerid), pname);
				foreach(new i : Player)
				{
					if(Clan_ID[i] == temp)
					SendClientMessage(i, -1, Query);
				}
			}
		}
	}
	//MAINCOLORS
	if(dialogid == ColorClanList)
	{
		if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
		switch(listitem)
		{
			case 0: {ShowPlayerDialog(playerid, ColorClanList1, DIALOG_STYLE_LIST, "{E9E200}Sistema de Clanes:", "{FF7281}Rojo Opción 1\n{FF5D64}Rojo Opción 2\n{FF4558}Rojo Opción 3\n{FF3748}Rojo Opción 4\n{FF2632}Rojo Opción 5\n{FF0000}Rojo Opción 6\n{FF1921}Rojo Opción 7\n{FF0000}Rojo Opción 8\n{F50000}Rojo Opción 9\n{E80000}Rojo Opción 10\n{D30000}Rojo Opción 11\n{C00000}Rojo Opción 12\n{AF0000}Rojo Opción 13\n{A00000}Rojo Opción 14\n{930000}Rojo Opción 15\n{830000}Rojo Opción 16\n", "Aceptar", "Cancelar");}
			case 1: {ShowPlayerDialog(playerid, ColorClanList2, DIALOG_STYLE_LIST, "{E9E200}Sistema de Clanes:", "{FFA100}Naranja Opción 1\n{FF8300}Naranja Opción 2\n{FF7000}Naranja Opción 3\n{FF5B00}Naranja Opción 4\n{FF4800}Naranja Opción 5\n{FF3700}Naranja Opción 6\n", "Aceptar", "Cancelar");}
			case 2: {ShowPlayerDialog(playerid, ColorClanList3, DIALOG_STYLE_LIST, "{E9E200}Sistema de Clanes:", "{AFA17A}Café Opción 1\n{AF907A}Café Opción 2\n{AF827A}Café Opción 3\n{AF825D}Café Opción 4\n{AF6C5D}Café Opción 5\n{AF575D}Café Opción 6\n{88575D}Café Opción 7\n{D7AB95}Café Opción 8\n{A53200}Café Opción 9\n{A57C00}Café Opción 10\n{A53200}Café Opción 11\n", "Aceptar", "Cancelar");}
			case 3: {ShowPlayerDialog(playerid, ColorClanList4, DIALOG_STYLE_LIST, "{E9E200}Sistema de Clanes:", "{FFFFBC}Amarillo Opción 1\n{FFFF97}Amarillo Opción 2\n{FFFF6C}Amarillo Opción 3\n{FFFF56}Amarillo Opción 4\n{FFFF33}Amarillo Opción 5\n{FFFF16}Amarillo Opción 6\n{FFFF03}Amarillo Opción 7\n{FFE600}Amarillo Opción 8\n{EEE600}Amarillo Opción 9\n{EED000}Amarillo Opción 10\n{EEBA00}Amarillo Opción 11\n", "Aceptar", "Cancelar");}
			case 4: {ShowPlayerDialog(playerid, ColorClanList5, DIALOG_STYLE_LIST, "{E9E200}Sistema de Clanes:", "{BBFF00}Verde Opción 1\n{8FFF00}Verde Opción 2\n{5AFF00}Verde Opción 3\n{1BFF00}Verde Opción 4\n{00EF00}Verde Opción 5\n{00D500}Verde Opción 6\n{00A600}Verde Opción 7\n{009600}Verde Opción 8\n{007900}Verde Opción 9\n{00B549}Verde Opción 10\n{77BA50}Verde Opción 11\n{77FF50}Verde Opción 12\n{ABFF00}Verde Opción 13\n{00D4B3}Verde Opción 14\n", "Aceptar", "Cancelar");}
			case 5: {ShowPlayerDialog(playerid, ColorClanList6, DIALOG_STYLE_LIST, "{E9E200}Sistema de Clanes:", "{00FFD3}Celeste Opción 1\n{00FFE2}Celeste Opción 2\n{00FFF2}Celeste Opción 3\n{00EBFF}Celeste Opción 4\n{00BFFF}Celeste Opción 5\n{00A9FF}Celeste Opción 6\n{0093FF}Celeste Opción 7\n", "Aceptar", "Cancelar");}
			case 6: {ShowPlayerDialog(playerid, ColorClanList7, DIALOG_STYLE_LIST, "{E9E200}Sistema de Clanes:", "{0086FF}Azul Fuerte Opción 1\n{005FFF}Azul Fuerte Opción 2\n{0040FF}Azul Fuerte Opción 3\n{0017FF}Azul Fuerte Opción 4\n{0000CD}Azul Fuerte Opción 5\n", "Aceptar", "Cancelar");}
			case 7: {ShowPlayerDialog(playerid, ColorClanList8, DIALOG_STYLE_LIST, "{E9E200}Sistema de Clanes:", "{EB00FF}Violeta Opción 1\n{C400FF}Violeta Opción 2\n{9300FF}Violeta Opción 3\n{6A00FF}Violeta Opción 4\n{6A006F}Violeta Opción 5\n{CE83FF}Violeta Opción 6\n{9F73FF}Violeta Opción 7\n", "Aceptar", "Cancelar");}
			case 8: {ShowPlayerDialog(playerid, ColorClanList9, DIALOG_STYLE_LIST, "{E9E200}Sistema de Clanes:", "{FFD3FF}Rosa Opción 1\n{FFA4FF}Rosa Opción 2\n{FF6DFF}Rosa Opción 3\n{FF00FF}Rosa Opción 4\n{FF008F}Rosa Opción 5\n", "Aceptar", "Cancelar");}
			case 9: {ShowPlayerDialog(playerid, ColorClanList10, DIALOG_STYLE_LIST, "{E9E200}Sistema de Clanes:", "{8178AE}Gris Opción 1\n{817896}Gris Opción 2\n{817872}Gris Opción 3\n{C4CDDC}Gris Opción 4\n", "Aceptar", "Cancelar");}
			case 10: {ClanColorChange(playerid, 0x46434EFF, 0x46434EAA);}
			case 11: {ClanColorChange(playerid, 0xEEF8F8FF, 0xEEF8F8AA);}
		}
	}
	//ROJOS
	if(dialogid == ColorClanList1)
	{
		if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
		switch(listitem)
		{
			case 0: {ClanColorChange(playerid, 0xFF7281FF, 0xFF7281AA);}
			case 1: {ClanColorChange(playerid, 0xFF5D64FF, 0xFF5D64AA);}
			case 2: {ClanColorChange(playerid, 0xFF4558FF, 0xFF4558AA);}
			case 3: {ClanColorChange(playerid, 0xFF3748FF, 0xFF3748AA);}
			case 4: {ClanColorChange(playerid, 0xFF2632FF, 0xFF2632AA);}
			case 5: {ClanColorChange(playerid, 0xFF0000FF, 0xFF0000AA);}
			case 6: {ClanColorChange(playerid, 0xFF1921FF, 0xFF1921AA);}
			case 7: {ClanColorChange(playerid, 0xFF0000FF, 0xFF0000AA);}
			case 8: {ClanColorChange(playerid, 0xF50000FF, 0xF50000AA);}
			case 9: {ClanColorChange(playerid, 0xE80000FF, 0xE80000AA);}
			case 10: {ClanColorChange(playerid, 0xD30000FF, 0xD30000AA);}
			case 11: {ClanColorChange(playerid, 0xC00000FF, 0xC00000AA);}
			case 12: {ClanColorChange(playerid, 0xAF0000FF, 0xAF0000AA);}
			case 13: {ClanColorChange(playerid, 0xA00000FF, 0xA00000AA);}
			case 14: {ClanColorChange(playerid, 0x930000FF, 0x930000AA);}
			case 15: {ClanColorChange(playerid, 0x830000FF, 0x830000AA);}
		}
	}
	//NARANJAS
	if(dialogid == ColorClanList2)
	{
		if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
		switch(listitem)
		{
			case 0: {ClanColorChange(playerid, 0xFFA100FF, 0xFFA100AA);}
			case 1: {ClanColorChange(playerid, 0xFF8300FF, 0xFF8300AA);}
			case 2: {ClanColorChange(playerid, 0xFF7000FF, 0xFF7000AA);}
			case 3: {ClanColorChange(playerid, 0xFF5B00FF, 0xFF5B00AA);}
			case 4: {ClanColorChange(playerid, 0xFF4800FF, 0xFF4800AA);}
			case 5: {ClanColorChange(playerid, 0xFF3700FF, 0xFF3700AA);}
		}
	}
	//CAFÉ
	if(dialogid == ColorClanList3)
	{
		if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
		switch(listitem)
		{
			case 0: {ClanColorChange(playerid, 0xAFA17AFF, 0xAFA17AAA);}
			case 1: {ClanColorChange(playerid, 0xAF907AFF, 0xAF907AAA);}
			case 2: {ClanColorChange(playerid, 0xAF827AFF, 0xAF827AAA);}
			case 3: {ClanColorChange(playerid, 0xAF825DFF, 0xAF825DAA);}
			case 4: {ClanColorChange(playerid, 0xAF6C5DFF, 0xAF6C5DAA);}
			case 5: {ClanColorChange(playerid, 0xAF575DFF, 0xAF575DAA);}
			case 6: {ClanColorChange(playerid, 0x88575DFF, 0x88575DAA);}
			case 7: {ClanColorChange(playerid, 0xD7AB95FF, 0xD7AB95AA);}
			case 8: {ClanColorChange(playerid, 0xA53200FF, 0xA53200AA);}
			case 9: {ClanColorChange(playerid, 0xA57C00FF, 0xA57C00AA);}
			case 10: {ClanColorChange(playerid, 0xA52E00FF, 0xA52E00AA);}
		}
	}
	//AMARILLO
	if(dialogid == ColorClanList4)
	{
		if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
		switch(listitem)
		{
			case 0: {ClanColorChange(playerid, 0xFFFFBCFF, 0xFFFFBCAA);}
			case 1: {ClanColorChange(playerid, 0xFFFF97FF, 0xFFFF97AA);}
			case 2: {ClanColorChange(playerid, 0xFFFF6CFF, 0xFFFF6CAA);}
			case 3: {ClanColorChange(playerid, 0xFFFF56FF, 0xFFFF56AA);}
			case 4: {ClanColorChange(playerid, 0xFFFF33FF, 0xFFFF33AA);}
			case 5: {ClanColorChange(playerid, 0xFFFF16FF, 0xFFFF16AA);}
			case 6: {ClanColorChange(playerid, 0xFFFF03FF, 0xFFFF03AA);}
			case 7: {ClanColorChange(playerid, 0xFFE600FF, 0xFFE600AA);}
			case 8: {ClanColorChange(playerid, 0xEEE600FF, 0xEEE600AA);}
			case 9: {ClanColorChange(playerid, 0xEED000FF, 0xEED000AA);}
			case 10: {ClanColorChange(playerid, 0xEEBA00FF, 0xEEBA00AA);}
		}
	}
	//VERDES
	if(dialogid == ColorClanList5)
	{
		if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
		switch(listitem)
		{
			case 0: {ClanColorChange(playerid, 0xBBFF00FF, 0xBBFF00AA);}
			case 1: {ClanColorChange(playerid, 0x8FFF00FF, 0x8FFF00AA);}
			case 2: {ClanColorChange(playerid, 0x5AFF00FF, 0x5AFF00AA);}
			case 3: {ClanColorChange(playerid, 0x5AFF00FF, 0x5AFF00AA);}
			case 4: {ClanColorChange(playerid, 0x1BFF00FF, 0x1BFF00AA);}
			case 5: {ClanColorChange(playerid, 0x00EF00FF, 0x00EF00AA);}
			case 6: {ClanColorChange(playerid, 0x00D500FF, 0x00D500AA);}
			case 7: {ClanColorChange(playerid, 0x00A600FF, 0x00A600AA);}
			case 8: {ClanColorChange(playerid, 0x009600FF, 0x009600AA);}
			case 9: {ClanColorChange(playerid, 0x007900FF, 0x007900AA);}
			case 10: {ClanColorChange(playerid, 0x00B549FF, 0x00B549AA);}
			case 11: {ClanColorChange(playerid, 0x77BA50FF, 0x77BA50AA);}
			case 12: {ClanColorChange(playerid, 0x77FF50FF, 0x77FF50AA);}
			case 13: {ClanColorChange(playerid, 0xABFF00FF, 0xABFF00AA);}
			case 14: {ClanColorChange(playerid, 0x00D4B3FF, 0x00D4B3AA);}
		}
	}
	//CELESTE
	if(dialogid == ColorClanList6)
	{
		if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
		switch(listitem)
		{
			case 0: {ClanColorChange(playerid, 0x00FFD3FF, 0x00FFD3AA);}
			case 1: {ClanColorChange(playerid, 0x00FFE2FF, 0x00FFE2AA);}
			case 2: {ClanColorChange(playerid, 0x00FFF2FF, 0x00FFF2AA);}
			case 3: {ClanColorChange(playerid, 0x00EBFFFF, 0x00EBFFAA);}
			case 4: {ClanColorChange(playerid, 0x00BFFFFF, 0x00BFFFAA);}
			case 5: {ClanColorChange(playerid, 0x00A9FFFF, 0x00A9FFAA);}
			case 6: {ClanColorChange(playerid, 0x0093FFFF, 0x0093FFAA);}
		}
	}
	//AZUL FUERTE
	if(dialogid == ColorClanList7)
	{
		if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
		switch(listitem)
		{
			case 0: {ClanColorChange(playerid, 0x0086FFFF, 0x0086FFAA);}
			case 1: {ClanColorChange(playerid, 0x005FFFFF, 0x005FFFAA);}
			case 2: {ClanColorChange(playerid, 0x0040FFFF, 0x0040FFAA);}
			case 3: {ClanColorChange(playerid, 0x0017FFFF, 0x0017FFAA);}
			case 4: {ClanColorChange(playerid, 0x0000CDFF, 0x0000CDAA);}
		}
	}
	//VIOLETA
	if(dialogid == ColorClanList8)
	{
		if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
		switch(listitem)
		{
			case 0: {ClanColorChange(playerid, 0xEB00FFFF, 0xEB00FFAA);}
			case 1: {ClanColorChange(playerid, 0xC400FFFF, 0xC400FFAA);}
			case 2: {ClanColorChange(playerid, 0x9300FFFF, 0x9300FFAA);}
			case 3: {ClanColorChange(playerid, 0x6A00FFFF, 0x6A00FFAA);}
			case 4: {ClanColorChange(playerid, 0x6A006FFF, 0x6A006FAA);}
			case 5: {ClanColorChange(playerid, 0xCE83FFFF, 0xCE83FFAA);}
			case 6: {ClanColorChange(playerid, 0x9F73FFFF, 0x9F73FFAA);}
		}
	}
	//ROSA
	if(dialogid == ColorClanList9)
	{
		if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
		switch(listitem)
		{
			case 0: {ClanColorChange(playerid, 0xFFD3FFFF, 0xFFD3FFAA);}
			case 1: {ClanColorChange(playerid, 0xFFA4FFFF, 0xFFA4FFAA);}
			case 2: {ClanColorChange(playerid, 0xFF6DFFFF, 0xFF6DFFAA);}
			case 3: {ClanColorChange(playerid, 0xFF00FFFF, 0xFF00FFAA);}
			case 4: {ClanColorChange(playerid, 0xFF008FFF, 0xFF008FAA);}
		}
	}
	//GRIS
	if(dialogid == ColorClanList10)
	{
		if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
		switch(listitem)
		{
			case 0: {ClanColorChange(playerid, 0x8178AEFF, 0x8178AEAA);}
			case 1: {ClanColorChange(playerid, 0x817896FF, 0x817896AA);}
			case 2: {ClanColorChange(playerid, 0x817872FF, 0x817872AA);}
			case 3: {ClanColorChange(playerid, 0xC4CDDCFF, 0xC4CDDCAA);}
		}
	}
    //COMANDOS ADMINS DIALOGO
  	if(dialogid == 2002)
  	{
   		if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
   		switch(listitem)
   		{
			case 0:
			{
            	new iString[800];
            	strcat(iString, "{D3FF00}* Ayuda Administrativa:\n\n");
     			strcat(iString, "{FF00A1}TELEPORT POR MAPA:\n");
    	 		strcat(iString, "{FFFFFF}Los administradores(nivel 1 en adelante) pueden teletrasportarse dando clic en algún lugar\n");
     			strcat(iString, "{FFFFFF}del mapa(menú de GTA:SA).\n");
     			strcat(iString, "{FF00A1}CHAT ADMIN:\n");
     			strcat(iString, "{FFFFFF}Para participar en las charlas privadas de los adminitradores, se utiliza el signo(!) con un texto.\n");
     			strcat(iString, "{FFFFFF}Ejemplo: \"! ¿Cómo expluso a un jugador?\".\n");
     			strcat(iString, "{FF00A1}ANTI CHEATS:\n");
     			strcat(iString, "{FFFFFF}En ocaciones no se encuentran administradores de rango mayor para expulsar jugadores y/o banear.\n");
     			strcat(iString, "{FFFFFF}Escribiendo: /anticheats tendrás la lista de anticheats que puedes desbloquear de acuerdo a tu nivel.\n");
     			strcat(iString, "{FFFFFF}Estos trabajarán automáticamente para expulsar jugadores según sea el caso.\n");
            	ShowPlayerDialog(playerid, 2004, DIALOG_STYLE_MSGBOX, "{00FFBD}Panel de Administrador:", iString, "Siguiente", "Cerrar");
			}
			case 1:
			{
            	new iString[800];
            	strcat(iString, "{FFFFFF}- /rd - responde una duda.\n");
            	strcat(iString, "{FFFFFF}- /asay - texto(mensaje para todos) admin.\n");
            	strcat(iString, "{FFFFFF}- /casaadmin - ve a la casa admin.\n");
            	strcat(iString, "{FFFFFF}- /speccmds - espia a los jugadores(cmds).\n");
            	strcat(iString, "{FFFFFF}- /specmps - espia los mps(todos los jugadores).\n");
            	strcat(iString, "{FFFFFF}- /conteo - activa un conteo general.\n");
            	strcat(iString, "{FFFFFF}- /ir - ve hacía un jugador.\n");
            	strcat(iString, "{FFFFFF}- /traer - trae a un jugador a tu ubicación.\n");
            	strcat(iString, "{FFFFFF}- /savepos - guarda una posición general.\n");
            	strcat(iString, "{FFFFFF}- /dararma - da una arma a un jugador.\n");
            	strcat(iString, "{FFFFFF}- /dararmadura - da armadura a un jugador.\n");
            	strcat(iString, "{FFFFFF}- /darvida - da vida a un jugador.\n");
            	strcat(iString, "{FFFFFF}- /reportes - lista de los últimos diez reportes hechos.\n");
            	strcat(iString, "{FFFFFF}- /astats - estadisticas de un jugador(modo admin).\n");
            	strcat(iString, "{FFFFFF}- /climas - lista de climas disponibles.\n");
            	strcat(iString, "{FFFFFF}- /veron - espiar a un jugador.\n");
            	strcat(iString, "{FFFFFF}- /veroff - dejar de espiar.\n\n");
            	strcat(iString, "{FFFFFF}- usa: \"!\" habla por el chat admin.\n");
            	ShowPlayerDialog(playerid, 2005, DIALOG_STYLE_MSGBOX, "{00FFBD}Panel de Administrador: 1/10", iString, "Siguiente", "Cerrar");
			}
			case 2:
			{
            	new iString[800];
            	strcat(iString, "{FFFFFF}- /kick - expulsa a un jugador.\n");
           		strcat(iString, "{FFFFFF}- /armatodos - da arma a todos los jugadores.\n");
            	strcat(iString, "{FFFFFF}- /explotar - envía una explosión a un jugador.\n");
            	strcat(iString, "{FFFFFF}- /tirar - tira a un jugador para comprobar vida.\n");
            	strcat(iString, "{FFFFFF}- /advertir - advierte a un jugador.\n");
            	strcat(iString, "{FFFFFF}- /vidatodos - regala vida a todos.\n");
            	strcat(iString, "{FFFFFF}- /armaduratodos - regala armadura a todos.\n");
            	strcat(iString, "{FFFFFF}- /ann - mensaje consola(deriban los colores):\n");
            	strcat(iString, "{FFFFFF}- /{FF0000}(r){FFFFFF}ann\n");
            	strcat(iString, "{FFFFFF}- /{00AEFF}(a){FFFFFF}ann\n");
            	strcat(iString, "{FFFFFF}- /{00FF00}(v){FFFFFF}ann\n");
            	strcat(iString, "{FFFFFF}- /{D294FF}(p){FFFFFF}ann\n");
            	strcat(iString, "{FFFFFF}- /{FFFF00}(y){FFFFFF}ann\n");
            	ShowPlayerDialog(playerid, 2006, DIALOG_STYLE_MSGBOX, "{00FFBD}Panel de Administrador: 2/10", iString, "Siguiente", "Cerrar");
			}
			case 3:
			{
				new iString[800];
            	strcat(iString, "{FFFFFF}- /mute - mutea a un jugador.\n");
            	strcat(iString, "{FFFFFF}- /unmute - desmutea a un jugador.\n");
            	strcat(iString, "{FFFFFF}- /desarmar - desarma a un jugador.\n");
            	strcat(iString, "{FFFFFF}- /jail - encarcela a un jugador.\n");
            	strcat(iString, "{FFFFFF}- /unjail - desencarcelar a un jugador.\n");
            	strcat(iString, "{FFFFFF}- /ch - cambia la hora del servidor.\n");
            	strcat(iString, "{FFFFFF}- /respawn - respawnea a un jugador.\n");
            	ShowPlayerDialog(playerid, 2007, DIALOG_STYLE_MSGBOX, "{00FFBD}Panel de Administrador: 3/10", iString, "Siguiente", "Cerrar");
			}
			case 4:
			{
            	new iString[800];
            	strcat(iString, "{FFFFFF}- /desarmartodos - desarma a todos los jugadores.\n");
            	strcat(iString, "{FFFFFF}- /ban - banea a un jugador.\n");
            	strcat(iString, "{FFFFFF}- /mataratodos - mata a todos los jugadores.\n");
            	strcat(iString, "{FFFFFF}- /darskin - cambia el skin de un jugador.\n");
            	strcat(iString, "{FFFFFF}- /expulsartodos - kikea a todo el servidor.\n");
 	 			strcat(iString, "{FFFFFF}- /cclima - cambia el clima del servidor.\n");
 	 			strcat(iString, "{FFFFFF}- /sv - sacar a todos de sus vehículos.\n");
	        	ShowPlayerDialog(playerid, 2008, DIALOG_STYLE_MSGBOX, "{00FFBD}Panel de Administrador: 4/10", iString, "Siguiente", "Cerrar");
			}
			case 5:
			{
            	new iString[800];
            	strcat(iString, "{FFFFFF}- /musica - pon música a todo el servidor (URL).\n");
            	strcat(iString, "{FFFFFF}- /espiar - espia a un jugador.\n");
            	strcat(iString, "{FFFFFF}- /dejarespiar - espia a un jugador.\n");
            	strcat(iString, "{FFFFFF}- /mutetodos - calla a todos los jugadores.\n");
            	strcat(iString, "{FFFFFF}- /desmutetodos - desmutea a todos lo jugadores.\n");
            	strcat(iString, "{FFFFFF}- /sdv - sacar a todos de sus vehiculos.\n");
            	strcat(iString, "{FFFFFF}- /sv - sacar a un jugador de su vehiculo.\n");
            	strcat(iString, "{FFFFFF}- /congelar - congela a un jugador.\n");
            	strcat(iString, "{FFFFFF}- /descongelar - descongela a un jugador.\n");
            	strcat(iString, "{FFFFFF}- /dinerotodos - da dinero a todos los jugadores.\n");
            	strcat(iString, "{FFFFFF}- /limpiarreportes - limpia la lista de 10 reportes hechos.\n");
           		ShowPlayerDialog(playerid, 2009, DIALOG_STYLE_MSGBOX, "{00FFBD}Panel de Administrador: 5/10", iString, "Siguiente", "Cerrar");
  			}
			case 6:
			{
				new iString[800];
				strcat(iString, "{FFFFFF}- /dinero - dar dinero a un jugador.\n");
            	strcat(iString, "{FFFFFF}- /invisible - activa el modo invisible (Radar).\n");
            	strcat(iString, "{FFFFFF}- /arespawn - respawnea a todos los jugadores.\n");
            	strcat(iString, "{FFFFFF}- /vw - cambia el virtual-world de un jugador.\n");
            	strcat(iString, "{FFFFFF}- /int - cambia el interior de un jugador.\n");
            	strcat(iString, "{FFFFFF}- /congelartodos - congela a todo el servidor.\n");
            	strcat(iString, "{FFFFFF}- /descongelartodos - descongela a todo el servidor.\n");
            	ShowPlayerDialog(playerid, 2010, DIALOG_STYLE_MSGBOX, "{00FFBD}Panel de Administrador: 6/10", iString, "Siguiente", "Cerrar");
			}
			case 7:
			{
				new iString[800];
				strcat(iString, "{FFFFFF}- /bc - limpia el chat general.\n");
            	strcat(iString, "{FFFFFF}- /traertodos - trae todos a tu posición.\n");
            	strcat(iString, "{FFFFFF}- /muertefalsa - muerte falsa.\n");
            	strcat(iString, "{FFFFFF}- /ptp - teletrasporta un jugador a otro.\n");
            	ShowPlayerDialog(playerid, 2011, DIALOG_STYLE_MSGBOX, "{00FFBD}Panel de Administrador: 7/10", iString, "Siguiente", "Cerrar");
			}
			case 8:
			{
				new iString[800];
            	strcat(iString, "{FFFFFF}- /godmod - ponte en modo dios (inmortal).\n");
            	strcat(iString, "{FFFFFF}- /crearmapadm - crea mapas DeathMatch.\n");
            	strcat(iString, "{FFFFFF}- /darscore - da score a un jugador.\n");
            	ShowPlayerDialog(playerid, 2012, DIALOG_STYLE_MSGBOX, "{00FFBD}Panel de Administrador: 8/10", iString, "Siguiente", "Cerrar");
			}
			case 9:
			{
				new iString[800];
            	strcat(iString, "{FFFFFF}- /respawnveh - respawnea todos los vehiculos.\n");
            	strcat(iString, "{FFFFFF}- /rdma - activa los mapas DeathMatch(random).\n");
            	strcat(iString, "{FFFFFF}- /rdmd - desactiva los mapas DeathMatch(random).\n");
            	strcat(iString, "{FFFFFF}- /gravedad - cambia la gravedad del servidor.\n");
            	ShowPlayerDialog(playerid, 2013, DIALOG_STYLE_MSGBOX, "{00FFBD}Panel de Administrador: 9/10", iString, "Siguiente", "Cerrar");
			}
			case 10:
			{
				new iString[800];
            	strcat(iString, "{FFFFFF}- /setadmin - da admin a un jugador.\n");
           	 	strcat(iString, "{FFFFFF}- /setvip - da vip a un jugador.\n");
            	strcat(iString, "{FFFFFF}- /respawncasas - respawnea todas las propiedades.\n");
            	strcat(iString, "{FFFFFF}- /maxping - modifica meximo ping.\n");
            	strcat(iString, "{FFFFFF}- /reniciar - renicia el servidor.\n");
            	ShowPlayerDialog(playerid, 2014, DIALOG_STYLE_MSGBOX, "{00FFBD}Panel de Administrador: 10/10", iString, "Siguiente", "Cerrar");
			}
  		}
	}
	//Respons Admins CMDS:
	if(dialogid == 2005)
    {
		if (response == 1)
		{
		    if(Administrador[playerid] >= 2)
		    {
		    	new iString[800];
            	strcat(iString, "{FFFFFF}- /kick - expulsa a un jugador.\n");
           		strcat(iString, "{FFFFFF}- /armatodos - da arma a todos los jugadores.\n");
            	strcat(iString, "{FFFFFF}- /explotar - envía una explosión a un jugador.\n");
            	strcat(iString, "{FFFFFF}- /tirar - tira a un jugador para comprobar vida.\n");
            	strcat(iString, "{FFFFFF}- /advertir - advierte a un jugador.\n");
            	strcat(iString, "{FFFFFF}- /vidatodos - regala vida a todos.\n");
            	strcat(iString, "{FFFFFF}- /armaduratodos - regala armadura a todos.\n");
            	strcat(iString, "{FFFFFF}- /ann - mensaje consola(deriban los colores):\n");
            	strcat(iString, "{FFFFFF}- /{FF0000}(r){FFFFFF}ann\n");
            	strcat(iString, "{FFFFFF}- /{00AEFF}(a){FFFFFF}ann\n");
            	strcat(iString, "{FFFFFF}- /{00FF00}(v){FFFFFF}ann\n");
            	strcat(iString, "{FFFFFF}- /{D294FF}(p){FFFFFF}ann\n");
            	strcat(iString, "{FFFFFF}- /{FFFF00}(y){FFFFFF}ann\n");
            	ShowPlayerDialog(playerid, 2006, DIALOG_STYLE_MSGBOX, "{00FFBD}Panel de Administrador: 2/10", iString, "Siguiente", "Cerrar");
      		}
		}
	}
	if(dialogid == 2006)
    {
		if (response == 1)
		{
		    if(Administrador[playerid] >= 3)
		    {
		    	new iString[800];
            	strcat(iString, "{FFFFFF}- /mute - mutea a un jugador.\n");
            	strcat(iString, "{FFFFFF}- /unmute - desmutea a un jugador.\n");
            	strcat(iString, "{FFFFFF}- /desarmar - desarma a un jugador.\n");
            	strcat(iString, "{FFFFFF}- /jail - encarcela a un jugador.\n");
            	strcat(iString, "{FFFFFF}- /unjail - desencarcelar a un jugador.\n");
            	strcat(iString, "{FFFFFF}- /ch - cambia la hora del servidor.\n");
            	strcat(iString, "{FFFFFF}- /respawn - respawnea a un jugador.\n");
            	ShowPlayerDialog(playerid, 2007, DIALOG_STYLE_MSGBOX, "{00FFBD}Panel de Administrador: 3/10", iString, "Siguiente", "Cerrar");
      		}
		}
	}
	if(dialogid == 2007)
    {
		if (response == 1)
		{
		    if(Administrador[playerid] >= 4)
		    {
		    	new iString[800];
            	strcat(iString, "{FFFFFF}- /desarmartodos - desarma a todos los jugadores.\n");
            	strcat(iString, "{FFFFFF}- /ban - banea a un jugador.\n");
            	strcat(iString, "{FFFFFF}- /mataratodos - mata a todos los jugadores.\n");
            	strcat(iString, "{FFFFFF}- /darskin - cambia el skin de un jugador.\n");
            	strcat(iString, "{FFFFFF}- /expulsartodos - kikea a todo el servidor.\n");
 	 			strcat(iString, "{FFFFFF}- /cclima - cambia el clima del servidor.\n");
 	 			strcat(iString, "{FFFFFF}- /sv - sacar a todos de sus vehículos.\n");
	        	ShowPlayerDialog(playerid, 2008, DIALOG_STYLE_MSGBOX, "{00FFBD}Panel de Administrador: 4/10", iString, "Siguiente", "Cerrar");
      		}
		}
	}
	if(dialogid == 2008)
    {
		if (response == 1)
		{
		    if(Administrador[playerid] >= 5)
		    {
		    	new iString[800];
            	strcat(iString, "{FFFFFF}- /musica - pon música a todo el servidor (URL).\n");
            	strcat(iString, "{FFFFFF}- /espiar - espia a un jugador.\n");
            	strcat(iString, "{FFFFFF}- /dejarespiar - espia a un jugador.\n");
            	strcat(iString, "{FFFFFF}- /mutetodos - calla a todos los jugadores.\n");
            	strcat(iString, "{FFFFFF}- /desmutetodos - desmutea a todos lo jugadores.\n");
            	strcat(iString, "{FFFFFF}- /sdv - sacar a todos de sus vehiculos.\n");
            	strcat(iString, "{FFFFFF}- /sv - sacar a un jugador de su vehiculo.\n");
            	strcat(iString, "{FFFFFF}- /congelar - congela a un jugador.\n");
            	strcat(iString, "{FFFFFF}- /descongelar - descongela a un jugador.\n");
            	strcat(iString, "{FFFFFF}- /dinerotodos - da dinero a todos los jugadores.\n");
            	strcat(iString, "{FFFFFF}- /limpiarreportes - limpia la lista de 10 reportes hechos.\n");
           		ShowPlayerDialog(playerid, 2009, DIALOG_STYLE_MSGBOX, "{00FFBD}Panel de Administrador: 5/10", iString, "Siguiente", "Cerrar");
      		}
		}
	}
	if(dialogid == 2009)
    {
		if (response == 1)
		{
		    if(Administrador[playerid] >= 6)
		    {
		    	new iString[800];
				strcat(iString, "{FFFFFF}- /dinero - dar dinero a un jugador.\n");
            	strcat(iString, "{FFFFFF}- /invisible - activa el modo invisible (Radar).\n");
            	strcat(iString, "{FFFFFF}- /arespawn - respawnea a todos los jugadores.\n");
            	strcat(iString, "{FFFFFF}- /vw - cambia el virtual-world de un jugador.\n");
            	strcat(iString, "{FFFFFF}- /int - cambia el interior de un jugador.\n");
            	strcat(iString, "{FFFFFF}- /congelartodos - congela a todo el servidor.\n");
            	strcat(iString, "{FFFFFF}- /descongelartodos - descongela a todo el servidor.\n");
            	ShowPlayerDialog(playerid, 2010, DIALOG_STYLE_MSGBOX, "{00FFBD}Panel de Administrador: 6/10", iString, "Siguiente", "Cerrar");
      		}
		}
	}
	if(dialogid == 2010)
    {
		if (response == 1)
		{
		    if(Administrador[playerid] >= 7)
		    {
		    	new iString[800];
				strcat(iString, "{FFFFFF}- /bc - limpia el chat general.\n");
            	strcat(iString, "{FFFFFF}- /traertodos - trae todos a tu posición.\n");
            	strcat(iString, "{FFFFFF}- /muertefalsa - muerte falsa.\n");
            	strcat(iString, "{FFFFFF}- /ptp - teletrasporta un jugador a otro.\n");
            	ShowPlayerDialog(playerid, 2011, DIALOG_STYLE_MSGBOX, "{00FFBD}Panel de Administrador: 7/10", iString, "Siguiente", "Cerrar");
      		}
		}
	}
	if(dialogid == 2011)
    {
		if (response == 1)
		{
		    if(Administrador[playerid] >= 8)
		    {
		    	new iString[800];
            	strcat(iString, "{FFFFFF}- /godmod - ponte en modo dios (inmortal).\n");
            	strcat(iString, "{FFFFFF}- /crearmapadm - crea mapas DeathMatch.\n");
            	strcat(iString, "{FFFFFF}- /darscore - da score a un jugador.\n");
            	ShowPlayerDialog(playerid, 2012, DIALOG_STYLE_MSGBOX, "{00FFBD}Panel de Administrador: 8/10", iString, "Siguiente", "Cerrar");
      		}
		}
	}
	if(dialogid == 2012)
    {
		if (response == 1)
		{
		    if(Administrador[playerid] >= 9)
		    {
		    	new iString[800];
            	strcat(iString, "{FFFFFF}- /respawnveh - respawnea todos los vehiculos.\n");
            	strcat(iString, "{FFFFFF}- /rdma - activa los mapas DeathMatch(random).\n");
            	strcat(iString, "{FFFFFF}- /rdmd - desactiva los mapas DeathMatch(random).\n");
            	strcat(iString, "{FFFFFF}- /gravedad - cambia la gravedad del servidor.\n");
            	ShowPlayerDialog(playerid, 2013, DIALOG_STYLE_MSGBOX, "{00FFBD}Panel de Administrador: 9/10", iString, "Siguiente", "Cerrar");
      		}
		}
	}
	if(dialogid == 2013)
    {
		if (response == 1)
		{
		    if(Administrador[playerid] >= 9)
		    {
		    	new iString[800];
            	strcat(iString, "{FFFFFF}- /setadmin - da admin a un jugador.\n");
           	 	strcat(iString, "{FFFFFF}- /setvip - da vip a un jugador.\n");
            	strcat(iString, "{FFFFFF}- /respawncasas - respawnea todas las propiedades.\n");
            	strcat(iString, "{FFFFFF}- /maxping - modifica meximo ping.\n");
            	strcat(iString, "{FFFFFF}- /reniciar - renicia el servidor.\n");
            	ShowPlayerDialog(playerid, 2014, DIALOG_STYLE_MSGBOX, "{00FFBD}Panel de Administrador: 10/10", iString, "Cerrar", "");
      		}
		}
	}
	//SISTEMA COLORES
	if(dialogid == COLORESXD)
	{
		if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
		switch(listitem)
		{
			case 0:
			{
				SendClientMessage(playerid, Rojo, "Has seleccionado el color Rojo.");
				SetPlayerColor(playerid, Rojo);
			}
			case 1:
			{
				SendClientMessage(playerid, Azul, "Has seleccionado el color Azul.");
				SetPlayerColor(playerid, Azul);
			}
			case 2:
			{
				SendClientMessage(playerid, Blanco, "Has seleccionado el color Blanco.");
				SetPlayerColor(playerid, Blanco);
			}
			case 3:
			{
				SendClientMessage(playerid, Naranja, "Has seleccionado el color Naranja.");
				SetPlayerColor(playerid, Naranja);
			}
			case 4:
			{
				SendClientMessage(playerid, Gris4, "Has seleccionado el color Gris.");
				SetPlayerColor(playerid, Gris4);
			}
			case 5:
			{
				SendClientMessage(playerid, 0x5F00FFFF, "Has seleccionado el color Morado.");
				SetPlayerColor(playerid, 0x5F00FFFF);
			}
			case 6:
			{
				SendClientMessage(playerid, Celeste, "Has seleccionado el color Celeste.");
				SetPlayerColor(playerid, Celeste);
			}
			case 7:
			{
				SendClientMessage(playerid, Verde, "Has seleccionado el color Verde.");
				SetPlayerColor(playerid, Verde);
			}
			case 8:
			{
				SendClientMessage(playerid, Amarillo, "Has seleccionado el color Amarillo.");
				SetPlayerColor(playerid, Amarillo);
			}
			case 9:
			{
				SendClientMessage(playerid, Rosa, "Has seleccionado el color Rosa.");
				SetPlayerColor(playerid, Rosa);
			}
			case 10:
			{
				SendClientMessage(playerid, 0x00FF00FF, "Has seleccionado el color Verde-Claro.");
				SetPlayerColor(playerid, 0x00FF00FF);
			}
			case 11:
			{
				SendClientMessage(playerid, 0x7A5500FF, "Has seleccionado el color Café.");
				SetPlayerColor(playerid, 0x7A5500FF);
			}
		}
	}
 	//GUARDADO DE AUTOS
   if(dialogid == GUARDAR_AUTO0)
   {
   if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
   switch(listitem)
   {
			case 0:
			{
			if(TIENE_AUTO[playerid][0] == 0)
		    {
			ShowPlayerDialog(playerid, GUARDAR_AUTO1, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Vacío(Ningún auto)\nVacío(Ningún auto)\nVacío(Ningún auto)\n", "Aceptar", "Cancelar");
			}
			if(TIENE_AUTO[playerid][0] == 1)
		    {
		    new string[506];
		    format(string, sizeof(string), "{FFFFFF}Modelo ID: %d\nVacío(Ningún auto)\nVacío(Ningún auto)\n", MODELO_AUTO[playerid][0]);
			ShowPlayerDialog(playerid, GUARDAR_AUTO1, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", string, "Aceptar", "Cancelar");
			}
			if(TIENE_AUTO[playerid][1] == 1)
		    {
		    new string[506];
		    format(string, sizeof(string), "{FFFFFF}Modelo ID: %d\nModelo ID: %d\nVacío(Ningún auto)\n", MODELO_AUTO[playerid][0], MODELO_AUTO[playerid][1]);
			ShowPlayerDialog(playerid, GUARDAR_AUTO1, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", string, "Aceptar", "Cancelar");
			}
			if(TIENE_AUTO[playerid][2] == 1)
		    {
		    new string[506];
		    format(string, sizeof(string), "{FFFFFF}Modelo ID: %d\nModelo ID: %d\nModelo ID: %d\n", MODELO_AUTO[playerid][0], MODELO_AUTO[playerid][1], MODELO_AUTO[playerid][2]);
			ShowPlayerDialog(playerid, GUARDAR_AUTO1, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", string, "Aceptar", "Cancelar");
			}
			}
			case 1:
			{
			if(TIENE_AUTO[playerid][0] == 0)
		    {
			ShowPlayerDialog(playerid, GUARDAR_AUTO3, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Vacío(Ningún auto)\nVacío(Ningún auto)\nVacío(Ningún auto)\n", "Aceptar", "Cancelar");
			}
			if(TIENE_AUTO[playerid][0] == 1)
		    {
		    new string[506];
		    format(string, sizeof(string), "{FFFFFF}Modelo ID: %d\nVacío(Ningún auto)\nVacío(Ningún auto)\n", MODELO_AUTO[playerid][0]);
			ShowPlayerDialog(playerid, GUARDAR_AUTO3, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", string, "Aceptar", "Cancelar");
			}
			if(TIENE_AUTO[playerid][1] == 1)
		    {
		    new string[506];
		    format(string, sizeof(string), "{FFFFFF}Modelo ID: %d\nModelo ID: %d\nVacío(Ningún auto)\n", MODELO_AUTO[playerid][0], MODELO_AUTO[playerid][1]);
			ShowPlayerDialog(playerid, GUARDAR_AUTO3, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", string, "Aceptar", "Cancelar");
			}
			if(TIENE_AUTO[playerid][2] == 1)
		    {
		    new string[506];
		    format(string, sizeof(string), "{FFFFFF}Modelo ID: %d\nModelo ID: %d\nModelo ID: %d\n", MODELO_AUTO[playerid][0], MODELO_AUTO[playerid][1], MODELO_AUTO[playerid][2]);
			ShowPlayerDialog(playerid, GUARDAR_AUTO3, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", string, "Aceptar", "Cancelar");
			}
			}
			case 2:
			{
			static istringj[1500];
            strcat(istringj, "{D5F300}Guía de uso:\n");
            strcat(istringj, "\n");
            strcat(istringj, "{FFFFFF}En este breve texto, te mostraremos el uso correcto del guardado de autos tuneables.\n");
            strcat(istringj, "{FFFFFF}Un usuario normal posee 3 espacios para guardar autos tuneados, un usuario {D5F300}VIP2{FFFFFF} posee {4FFF00}5{FFFFFF}.\n");
            strcat(istringj, "{FFFFFF}El sistema guarda automáticamente los autos con todos sus componentes(ruedas, color, paintjobs, ect.)\n");
            strcat(istringj, "\n");
            strcat(istringj, "{FFFFFF}Para guardar un auto, debes dar clic en la segunda opción. Te dirá en que lugar deseas almacenarlo-\n");
            strcat(istringj, "{FFFFFF}cuando lo hagas, te pedirá el ID del vehículo que deseas obtener(pero no te preocupes si eliges el que no querías).\n");
            strcat(istringj, "{FFFFFF}Después se te despliegará un listado de modificaciones, cada vez que hagas una modificación se guardará.\n");
            strcat(istringj, "\n");
            strcat(istringj, "{FFFFFF}Siempre que quieras acceder a tus autos, ingresas el mismo comando y haces clic en la primera opción(eligiendo el auto a extraer).\n");
            strcat(istringj, "{FFFFFF}Y el auto se extraerá con todas las modificaciones hechas.\n");
            strcat(istringj, "{FFFFFF}Siempre que quieras modificar un auto, haces clic en la segunda opción(dependiendo del auto que deseas editar) y cambias la modificación-\n");
            strcat(istringj, "{FFFFFF}no importa si cambias el ID del vehículo.\n");
            strcat(istringj, "\n");
            strcat(istringj, "{FFFFFF}Esperamos que está información sea de ayuda. Recuerda siempre usar: {D5F300}/duda{FFFFFF}, un administrador atenderá tus dudas.\n");
  		    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{D5F300}Guía de uso:", istringj, "Cerrar", "");
  		    }
   		}
   }
   //GUARDAR AUTOS OBTENER
   if(dialogid == GUARDAR_AUTO1)
   {
   if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
   switch(listitem)
   {
			case 0:
			{
			ShowPlayerDialog(playerid, MENU_SACAR0, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Obtener\nDestruir\n", "Aceptar", "Cancelar");
			}
			case 1:
			{
			ShowPlayerDialog(playerid, MENU_SACAR1, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Obtener\nDestruir\n", "Aceptar", "Cancelar");
			}
			case 2:
			{
			ShowPlayerDialog(playerid, MENU_SACAR2, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Obtener\nDestruir\n", "Aceptar", "Cancelar");
			}
  		}
	}

   if(dialogid == MENU_SACAR0)
   {
   if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
   switch(listitem)
   {
			case 0:
			{
			CrearVehiculoEx(playerid, MODELO_AUTO[playerid][0], AUTO_COLOR[playerid][0], AUTO_COLOR2[playerid][0], RUEDAS_AUTO[playerid][0], AUTO_PAINTJOB[playerid][0]);
			}
			case 1:
			{
			SendClientMessage(playerid, -1, "Has destruido el Vehículo N°1.");
			DestroyVehicle(VEHICULO_CREADOR0[playerid]);
			SACO_AUTO[0][playerid] = 0;
			}
  		}
	}

	//DOS

   if(dialogid == MENU_SACAR1)
   {
   if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
   switch(listitem)
   {
			case 0:
			{
			CrearVehiculoEx2(playerid, MODELO_AUTO[playerid][1], AUTO_COLOR[playerid][1], AUTO_COLOR2[playerid][1], RUEDAS_AUTO[playerid][1], AUTO_PAINTJOB[playerid][1]);
			}
			case 1:
			{
			SendClientMessage(playerid, -1, "Has destruido el Vehículo N°2.");
			DestroyVehicle(VEHICULO_CREADOR1[playerid]);
			SACO_AUTO[1][playerid] = 0;
			}
  		}
	}

	//TREs
   if(dialogid == MENU_SACAR2)
   {
   if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
   switch(listitem)
   {
			case 0:
			{
			CrearVehiculoEx3(playerid, MODELO_AUTO[playerid][2], AUTO_COLOR[playerid][2], AUTO_COLOR2[playerid][2], RUEDAS_AUTO[playerid][2], AUTO_PAINTJOB[playerid][2]);
			}
			case 1:
			{
			SendClientMessage(playerid, -1, "Has destruido el Vehículo N°3.");
			DestroyVehicle(VEHICULO_CREADOR2[playerid]);
			SACO_AUTO[2][playerid] = 0;
			}
  		}
	}

   if(dialogid == GUARDAR_AUTO3)
   {
   if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
   switch(listitem)
   {
			case 0:
			{
			ShowPlayerDialog(playerid, MENU_AUTOS0, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
			}
			case 1:
			{
			ShowPlayerDialog(playerid, MENU_AUTOS1, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
			}
			case 2:
			{
			ShowPlayerDialog(playerid, MENU_AUTOS2, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
			}
  		}
	}

   if(dialogid == MENU_AUTOS0)
   {
   if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
   switch(listitem)
   {
			case 0:
			{
			ShowPlayerDialog(playerid, SELECCIONO_OPCION0, DIALOG_STYLE_INPUT, "{FFFFFF}MODELO:", "{FFFFFF}Ingresa el modelo de auto que quieres agregar.\nParámetros: 400 - 600:\n", "Aceptar", "Cancelar");
			}
			case 1:
			{
			ShowPlayerDialog(playerid, SELECCIONO_OPCION1, DIALOG_STYLE_LIST, "{FFFFFF}COLOR:", "{FFFFFF}Rojo\nAzul\nNegro\nBlanco\nAmarillo\nVerde\nRosa\n", "Aceptar", "Cancelar");
			}
			case 2:
			{
			ShowPlayerDialog(playerid, SELECCIONO_OPCION2, DIALOG_STYLE_LIST, "{FFFFFF}RUEDAS:","{FFFFFF}Shadow\nMega\nRimshine\nWires\nClassic\nTwist\nCutter\nSwitch\nGrove\nImport\nDollar\nTrance\nAtomic\n","Seleccionar","Cancelar");
			}
			case 3:
			{
			ShowPlayerDialog(playerid, SELECCIONO_OPCION3, DIALOG_STYLE_LIST, "{FFFFFF}PAINTJOB:", "{FFFFFF}Modelo 1\nModelo 2\nModelo 3\nModelo 4\nModelo 5\n", "Aceptar", "Cancelar");
			}
			case 4:
			{
			ShowPlayerDialog(playerid, SELECCIONO_OPCION4, DIALOG_STYLE_LIST, "{FFFFFF}NEONES:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
			}
  		}
	}

	//VACÍO 1
    if (dialogid == SELECCIONO_OPCION0)
	{
		if (!strlen(inputtext)) return ShowPlayerDialog(playerid, ERROR_001, DIALOG_STYLE_LIST, "{FFFFFF}ERROR:", "{FFFFFF}Por favor coloque una dirección de correo electrónico.", "Aceptar", "");
		if (!response) return ShowPlayerDialog(playerid, ERROR_001, DIALOG_STYLE_LIST, "{FFFFFF}ERROR:","{FFFFFF}Por favor coloque una dirección de correo electrónico.", "Aceptar", "");
		new tmp[256];
		new idx;
		tmp = strtok(inputtext, idx);
		new modelo = strval(tmp);
		MODELO_AUTO[playerid][0] = modelo;
		TIENE_AUTO[playerid][0] = 1;
		SACO_AUTO[0][playerid] = 1;
		GameTextForPlayer(playerid, "~w~~h~Guardado...", 6000, 4);
		new string[267];
 		format(string, sizeof(string), "Has establecido como modelo de auto, N°1: {00B1FF}'%d'{FFFFFF}. Escribe: {DAFF00}/mis autos{FFFFFF}.", MODELO_AUTO[playerid][0]);
		SendClientMessage(playerid, -1, string);
		new Float:x;
		new Float:y;
		new Float:z;
		new Float:angulo;
		GetPlayerPos(playerid, x, y, z);
		VEHICULO_CREADOR0[playerid] = CreateVehicle(modelo, x, y, z, angulo, -1, -1, -1);
		PutPlayerInVehicle(playerid, VEHICULO_CREADOR0[playerid], 0);
//		new queryx[100];
//		mysql_format(conexion, queryx, sizeof(queryx), "UPDATE `jugadores` SET AutoN1_Modelo=%d WHERE Nombre='%s'", MODELO_AUTO[playerid][0], GetName(playerid));
//		mysql_function_query(conexion, queryx, true, "OnQueryFinish", "ii", 0, playerid);
		ShowPlayerDialog(playerid, MENU_AUTOS0, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
		return 1;
	}

   if(dialogid == SELECCIONO_OPCION1)
   {
   if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
   switch(listitem)
   {
			case 0:
			{
			ChangeVehicleColor(GetPlayerVehicleID(playerid), 161, 161);
			AUTO_COLOR[playerid][0] = 161;
			AUTO_COLOR2[playerid][0] = 161;
			TIENE_PINTURA[playerid][0] = 1;
			COLOR_AUTO1(playerid, 161, 161);
            SendClientMessage(playerid, -1,"Color {FF0000}rojo{FFFFFF} adherido a tu auto, N°1.");
			ShowPlayerDialog(playerid, MENU_AUTOS0, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
			}
			case 1:
			{
			ChangeVehicleColor(GetPlayerVehicleID(playerid), 106, 106);
			AUTO_COLOR[playerid][0] = 106;
			AUTO_COLOR2[playerid][0] = 106;
			TIENE_PINTURA[playerid][0] = 1;
			COLOR_AUTO1(playerid, 106, 106);
            SendClientMessage(playerid, -1,"Color {0000FF}azul{FFFFFF} adherido a tu auto, N°1.");
			ShowPlayerDialog(playerid, MENU_AUTOS0, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
			}
			case 2:
			{
			ChangeVehicleColor(GetPlayerVehicleID(playerid), 0, 0);
			AUTO_COLOR[playerid][0] = 0;
			AUTO_COLOR2[playerid][0] = 0;
			TIENE_PINTURA[playerid][0] = 1;
			COLOR_AUTO1(playerid, 0, 0);
            SendClientMessage(playerid, -1,"Color {ACAAAA}negro{FFFFFF} adherido a tu auto, N°1.");
			ShowPlayerDialog(playerid, MENU_AUTOS0, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
			}
			case 3:
			{
			ChangeVehicleColor(GetPlayerVehicleID(playerid), 1, 1);
			AUTO_COLOR[playerid][0] = 1;
			AUTO_COLOR2[playerid][0] = 1;
			TIENE_PINTURA[playerid][0] = 1;
			COLOR_AUTO1(playerid, 1, 1);
            SendClientMessage(playerid, -1,"Color blanco adherido a tu auto, N°1.");
			ShowPlayerDialog(playerid, MENU_AUTOS0, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
			}
			case 4:
			{
			ChangeVehicleColor(GetPlayerVehicleID(playerid), 6, 6);
			AUTO_COLOR[playerid][0] = 6;
			AUTO_COLOR2[playerid][0] = 6;
			COLOR_AUTO1(playerid, 6, 6);
			TIENE_PINTURA[playerid][0] = 1;
            SendClientMessage(playerid, -1,"Color {FFFF00}amarillo{FFFFFF} adherido a tu auto, N°1.");
			ShowPlayerDialog(playerid, MENU_AUTOS0, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
			}
			case 5:
			{
			ChangeVehicleColor(GetPlayerVehicleID(playerid), 86, 86);
			AUTO_COLOR[playerid][0] = 86;
			AUTO_COLOR2[playerid][0] = 86;
			COLOR_AUTO1(playerid, 86, 86);
			TIENE_PINTURA[playerid][0] = 1;
            SendClientMessage(playerid, -1,"Color {36FF00}verde{FFFFFF} adherido a tu auto, N°1.");
			ShowPlayerDialog(playerid, MENU_AUTOS0, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
			}
			case 6:
			{
			ChangeVehicleColor(GetPlayerVehicleID(playerid), 126, 126);
			AUTO_COLOR[playerid][0] = 126;
			AUTO_COLOR2[playerid][0] = 126;
			TIENE_PINTURA[playerid][0] = 1;
			COLOR_AUTO1(playerid, 126, 126);
            SendClientMessage(playerid, -1,"Color {FF00FF}rosa{FFFFFF} adherido a tu auto, N°1.");
			ShowPlayerDialog(playerid, MENU_AUTOS0, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
			}
  		}
	}

	//RUEDAS VACÍO 1
	if(dialogid == SELECCIONO_OPCION2)
   {
   if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
   switch(listitem)
   {
			case 0:
          {
          AddVehicleComponent(GetPlayerVehicleID(playerid),1073);
          ShowPlayerDialog(playerid, MENU_AUTOS0, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
          RUEDAS_AUTO[playerid][0] = 1073;
          RUEDAS_AUTON1(playerid, 1073);
          PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		  SendClientMessage(playerid, -1,"Ruedas cambiadas a Shadow");
		  }
		  case 1:
		  {
          AddVehicleComponent(GetPlayerVehicleID(playerid),1074);
          ShowPlayerDialog(playerid, MENU_AUTOS0, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
          RUEDAS_AUTO[playerid][0] = 1074;
          RUEDAS_AUTON1(playerid, 1074);
          PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		  SendClientMessage(playerid, -1,"Ruedas cambiadas a Mega");
		  }
          case 2:
		  {
	      AddVehicleComponent(GetPlayerVehicleID(playerid),1075);
	      ShowPlayerDialog(playerid, MENU_AUTOS0, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
	      RUEDAS_AUTO[playerid][0] = 1075;
	      RUEDAS_AUTON1(playerid, 1075);
          PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		  SendClientMessage(playerid, -1,"Ruedas cambiadas a Rimshine");
		  }
		  case 3:
		  {
	      AddVehicleComponent(GetPlayerVehicleID(playerid),1076);
	      ShowPlayerDialog(playerid, MENU_AUTOS0, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
	      RUEDAS_AUTO[playerid][0] = 1076;
	      RUEDAS_AUTON1(playerid, 1076);
          PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		  SendClientMessage(playerid, -1,"Ruedas cambiadas a Wires");
		  }
		  case 4:
		  {
	      AddVehicleComponent(GetPlayerVehicleID(playerid),1077);
	      ShowPlayerDialog(playerid, MENU_AUTOS0, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
	      RUEDAS_AUTO[playerid][0] = 1077;
	      RUEDAS_AUTON1(playerid, 1077);
          PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		  SendClientMessage(playerid, -1,"Ruedas cambiadas a Classic");
		  }
          case 5:
   	      {
   	      AddVehicleComponent(GetPlayerVehicleID(playerid),1078);
   	      ShowPlayerDialog(playerid, MENU_AUTOS0, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
   	      RUEDAS_AUTO[playerid][0] = 1078;
   	      RUEDAS_AUTON1(playerid, 1078);
          PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		  SendClientMessage(playerid, -1,"Ruedas cambiadas a Twist");
	      }
          case 6:
	  	  {
          AddVehicleComponent(GetPlayerVehicleID(playerid),1079);
          ShowPlayerDialog(playerid, MENU_AUTOS0, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
          RUEDAS_AUTO[playerid][0] = 1079;
          RUEDAS_AUTON1(playerid, 1079);
          PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		  SendClientMessage(playerid, -1,"Ruedas cambiadas a Cutter");
          }
          case 7:
          {
          AddVehicleComponent(GetPlayerVehicleID(playerid),1080);
          ShowPlayerDialog(playerid, MENU_AUTOS0, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
          RUEDAS_AUTO[playerid][0] = 1080;
          RUEDAS_AUTON1(playerid, 1080);
          PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		  SendClientMessage(playerid, -1,"Ruedas cambiadas a Switch");
          }
          case 8:
          {
          AddVehicleComponent(GetPlayerVehicleID(playerid),1081);
          ShowPlayerDialog(playerid, MENU_AUTOS0, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
          RUEDAS_AUTO[playerid][0] = 1081;
          RUEDAS_AUTON1(playerid, 1081);
          PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		  SendClientMessage(playerid, -1,"Ruedas cambiadas a Grove");
     	  }
          case 9:
          {
   	      AddVehicleComponent(GetPlayerVehicleID(playerid),1082);
   	      ShowPlayerDialog(playerid, MENU_AUTOS0, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
   	      RUEDAS_AUTO[playerid][0] = 1082;
   	      RUEDAS_AUTON1(playerid, 1082);
          PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		  SendClientMessage(playerid, -1,"Ruedas cambiadas a Import");
          }
          case 10:
          {
          AddVehicleComponent(GetPlayerVehicleID(playerid),1083);
          ShowPlayerDialog(playerid, MENU_AUTOS0, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
          RUEDAS_AUTO[playerid][0] = 1083;
          RUEDAS_AUTON1(playerid, 1083);
          PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		  SendClientMessage(playerid, -1,"Ruedas cambiadas a Dollar");
          }
          case 11:
          {
          AddVehicleComponent(GetPlayerVehicleID(playerid),1084);
          ShowPlayerDialog(playerid, MENU_AUTOS0, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
          RUEDAS_AUTO[playerid][0] = 1084;
          RUEDAS_AUTON1(playerid, 1084);
          PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		  SendClientMessage(playerid, -1,"Ruedas cambiadas a Trance");
          }
          case 12:
          {
          AddVehicleComponent(GetPlayerVehicleID(playerid),1085);
          ShowPlayerDialog(playerid, MENU_AUTOS0, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
          RUEDAS_AUTO[playerid][0] = 1085;
          RUEDAS_AUTON1(playerid, 1085);
          PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		  SendClientMessage(playerid, -1,"Ruedas cambiadas a Atomic");
          }
  		}
	}

   //PAINTJOB
   if(dialogid == SELECCIONO_OPCION3)
   {
   if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
   switch(listitem)
   {
	      case 0:
          {
          ChangeVehiclePaintjob(GetPlayerVehicleID(playerid),1);
          AUTO_PAINTJOB[playerid][0] = 1;
          TIENE_PINTURA[playerid][0] = 0;
          PAINTJOBS_AUTON1(playerid, 1);
          SendClientMessage(playerid, -1,"Paintjob puesto corrctamente.");
          ShowPlayerDialog(playerid, MENU_AUTOS0, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
		  }
		  case 1:
          {
          ChangeVehiclePaintjob(GetPlayerVehicleID(playerid),5);
          AUTO_PAINTJOB[playerid][0] = 5;
          TIENE_PINTURA[playerid][0] = 0;
          PAINTJOBS_AUTON1(playerid, 5);
          SendClientMessage(playerid, -1,"Paintjob puesto corrctamente.");
          ShowPlayerDialog(playerid, MENU_AUTOS0, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
		  }
		  case 2:
          {
          ChangeVehiclePaintjob(GetPlayerVehicleID(playerid),7);
          AUTO_PAINTJOB[playerid][0] = 7;
          TIENE_PINTURA[playerid][0] = 0;
          PAINTJOBS_AUTON1(playerid, 7);
          SendClientMessage(playerid, -1,"Paintjob puesto corrctamente.");
          ShowPlayerDialog(playerid, MENU_AUTOS0, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
		  }
		  case 3:
          {
          ChangeVehiclePaintjob(GetPlayerVehicleID(playerid),4);
          AUTO_PAINTJOB[playerid][0] = 4;
          PAINTJOBS_AUTON1(playerid, 4);
          TIENE_PINTURA[playerid][0] = 0;
          ShowPlayerDialog(playerid, MENU_AUTOS0, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
          SendClientMessage(playerid, -1,"Paintjob puesto corrctamente.");
		  }
		  case 4:
          {
          ChangeVehiclePaintjob(GetPlayerVehicleID(playerid),2);
          AUTO_PAINTJOB[playerid][0] = 2;
          TIENE_PINTURA[playerid][0] = 0;
          PAINTJOBS_AUTON1(playerid, 2);
          SendClientMessage(playerid, -1,"Paintjob puesto corrctamente.");
          ShowPlayerDialog(playerid, MENU_AUTOS0, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
		  }
  		}
	}

	//VACÍO 2
   if(dialogid == MENU_AUTOS1)
   {
   if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
   switch(listitem)
   {
			case 0:
			{
			ShowPlayerDialog(playerid, SELECCIONO_OPCION0_VACIO2, DIALOG_STYLE_INPUT, "{FFFFFF}MODELO:", "{FFFFFF}Ingresa el modelo de auto que quieres agregar.\nParámetros: 400 - 600:\n", "Aceptar", "Cancelar");
			}
			case 1:
			{
			ShowPlayerDialog(playerid, SELECCIONO_OPCION1_VACIO2, DIALOG_STYLE_LIST, "{FFFFFF}COLOR:", "{FFFFFF}Rojo\nAzul\nNegro\nBlanco\nAmarillo\nVerde\nRosa\n", "Aceptar", "Cancelar");
			}
			case 2:
			{
			ShowPlayerDialog(playerid, SELECCIONO_OPCION2_VACIO2, DIALOG_STYLE_LIST, "{FFFFFF}RUEDAS:","{FFFFFF}Shadow\nMega\nRimshine\nWires\nClassic\nTwist\nCutter\nSwitch\nGrove\nImport\nDollar\nTrance\nAtomic\n","Seleccionar","Cancelar");
			}
			case 3:
			{
			ShowPlayerDialog(playerid, SELECCIONO_OPCION3_VACIO2, DIALOG_STYLE_LIST, "{FFFFFF}PAINTJOB:", "{FFFFFF}Modelo 1\nModelo 2\nModelo 3\nModelo 4\nModelo 5\n", "Aceptar", "Cancelar");
			}
			case 4:
			{
			ShowPlayerDialog(playerid, SELECCIONO_OPCION4, DIALOG_STYLE_INPUT, "{FFFFFF}NEONES:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
			}
  		}
	}

    if (dialogid == SELECCIONO_OPCION0_VACIO2)
	{
		if (!strlen(inputtext)) return ShowPlayerDialog(playerid, ERROR_001, DIALOG_STYLE_LIST, "{FFFFFF}ERROR:", "{FFFFFF}Por favor coloque una dirección de correo electrónico.", "Aceptar", "");
		if (!response) return ShowPlayerDialog(playerid, ERROR_001, DIALOG_STYLE_LIST, "{FFFFFF}ERROR:","{FFFFFF}Por favor coloque una dirección de correo electrónico.", "Aceptar", "");
		new tmp[256];
		new idx;
		tmp = strtok(inputtext, idx);
		new modelo = strval(tmp);
		MODELO_AUTO[playerid][1] = modelo;
		TIENE_AUTO[playerid][0] = 0;
		TIENE_AUTO[playerid][1] = 1;
		TIENE_AUTO[playerid][2] = 0;
		SACO_AUTO[1][playerid] = 1;
		GameTextForPlayer(playerid, "~w~~h~Guardado...", 6000, 4);
		new string[267];
 		format(string, sizeof(string), "Has establecido como modelo de auto, N°2: {00B1FF}'%d'{FFFFFF}. Escribe: {DAFF00}/mis autos{FFFFFF}.", MODELO_AUTO[playerid][1]);
		SendClientMessage(playerid, -1, string);
		new Float:x;
		new Float:y;
		new Float:z;
		new Float:angulo;
		GetPlayerPos(playerid, x, y, z);
		VEHICULO_CREADOR1[playerid] = CreateVehicle(modelo, x, y, z, angulo, -1, -1, -1);
		PutPlayerInVehicle(playerid, VEHICULO_CREADOR1[playerid], 0);
//		new queryx[100];
//		mysql_format(conexion, queryx, sizeof(queryx), "UPDATE `jugadores` SET AutoN2_Modelo=%d WHERE Nombre='%s'", MODELO_AUTO[playerid][1], GetName(playerid));
//		mysql_function_query(conexion, queryx, true, "OnQueryFinish", "ii", 0, playerid);
		ShowPlayerDialog(playerid, MENU_AUTOS1, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
		return 1;
	}

   if(dialogid == SELECCIONO_OPCION1_VACIO2)
   {
   if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
   switch(listitem)
   {
			case 0:
			{
			ChangeVehicleColor(GetPlayerVehicleID(playerid), 161, 161);
			AUTO_COLOR[playerid][1] = 161;
			AUTO_COLOR2[playerid][1] = 161;
			TIENE_PINTURA[playerid][1] = 1;
			COLOR_AUTO2(playerid, 161, 161);
            SendClientMessage(playerid, -1,"Color {FF0000}rojo{FFFFFF} adherido a tu auto, N°2.");
			ShowPlayerDialog(playerid, MENU_AUTOS1, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
			}
			case 1:
			{
			ChangeVehicleColor(GetPlayerVehicleID(playerid), 106, 106);
			AUTO_COLOR[playerid][1] = 106;
			AUTO_COLOR2[playerid][1] = 106;
			TIENE_PINTURA[playerid][1] = 1;
			COLOR_AUTO2(playerid, 106, 106);
            SendClientMessage(playerid, -1,"Color {0000FF}azul{FFFFFF} adherido a tu auto, N°2.");
			ShowPlayerDialog(playerid, MENU_AUTOS1, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
			}
			case 2:
			{
			ChangeVehicleColor(GetPlayerVehicleID(playerid), 0, 0);
			AUTO_COLOR[playerid][1] = 0;
			AUTO_COLOR2[playerid][1] = 0;
			TIENE_PINTURA[playerid][1] = 1;
			COLOR_AUTO2(playerid, 0, 0);
            SendClientMessage(playerid, -1,"Color {ACAAAA}negro{FFFFFF} adherido a tu auto, N°2.");
			ShowPlayerDialog(playerid, MENU_AUTOS1, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
			}
			case 3:
			{
			ChangeVehicleColor(GetPlayerVehicleID(playerid), 1, 1);
			AUTO_COLOR[playerid][1] = 1;
			AUTO_COLOR2[playerid][1] = 1;
			TIENE_PINTURA[playerid][1] = 1;
			COLOR_AUTO2(playerid, 1, 1);
            SendClientMessage(playerid, -1,"Color blanco adherido a tu auto, N°2.");
			ShowPlayerDialog(playerid, MENU_AUTOS1, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
			}
			case 4:
			{
			ChangeVehicleColor(GetPlayerVehicleID(playerid), 6, 6);
			AUTO_COLOR[playerid][1] = 6;
			AUTO_COLOR2[playerid][1] = 6;
			COLOR_AUTO2(playerid, 6, 6);
			TIENE_PINTURA[playerid][1] = 1;
            SendClientMessage(playerid, -1,"Color {FFFF00}amarillo{FFFFFF} adherido a tu auto, N°2.");
			ShowPlayerDialog(playerid, MENU_AUTOS1, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
			}
			case 5:
			{
			ChangeVehicleColor(GetPlayerVehicleID(playerid), 86, 86);
			AUTO_COLOR[playerid][1] = 86;
			AUTO_COLOR2[playerid][1] = 86;
			COLOR_AUTO2(playerid, 86, 86);
			TIENE_PINTURA[playerid][1] = 1;
            SendClientMessage(playerid, -1,"Color {36FF00}verde{FFFFFF} adherido a tu auto, N°2.");
			ShowPlayerDialog(playerid, MENU_AUTOS1, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
			}
			case 6:
			{
			ChangeVehicleColor(GetPlayerVehicleID(playerid), 126, 126);
			AUTO_COLOR[playerid][1] = 126;
			AUTO_COLOR2[playerid][1] = 126;
			TIENE_PINTURA[playerid][1] = 1;
			COLOR_AUTO2(playerid, 126, 126);
            SendClientMessage(playerid, -1,"Color {FF00FF}rosa{FFFFFF} adherido a tu auto, N°2.");
			ShowPlayerDialog(playerid, MENU_AUTOS1, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
			}
  		}
	}

	//RUEDAS VACÍO 1
   if(dialogid == SELECCIONO_OPCION2_VACIO2)
   {
   	if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
   switch(listitem)
   {
	      case 0:
          {
          AddVehicleComponent(GetPlayerVehicleID(playerid),1073);
          ShowPlayerDialog(playerid, MENU_AUTOS1, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
          RUEDAS_AUTO[playerid][1] = 1073;
          RUEDAS_AUTON2(playerid, 1073);
          PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		  SendClientMessage(playerid, -1,"Ruedas cambiadas a Shadow");
		  }
		  case 1:
		  {
          AddVehicleComponent(GetPlayerVehicleID(playerid),1074);
          ShowPlayerDialog(playerid, MENU_AUTOS1, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
          RUEDAS_AUTO[playerid][1] = 1074;
          RUEDAS_AUTON2(playerid, 1074);
          PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		  SendClientMessage(playerid, -1,"Ruedas cambiadas a Mega");
		  }
          case 2:
		  {
	      AddVehicleComponent(GetPlayerVehicleID(playerid),1075);
	      ShowPlayerDialog(playerid, MENU_AUTOS1, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
	      RUEDAS_AUTO[playerid][1] = 1075;
	      RUEDAS_AUTON2(playerid, 1075);
          PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		  SendClientMessage(playerid, -1,"Ruedas cambiadas a Rimshine");
		  }
		  case 3:
		  {
	      AddVehicleComponent(GetPlayerVehicleID(playerid),1076);
	      ShowPlayerDialog(playerid, MENU_AUTOS1, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
	      RUEDAS_AUTO[playerid][1] = 1076;
	      RUEDAS_AUTON2(playerid, 1076);
          PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		  SendClientMessage(playerid, -1,"Ruedas cambiadas a Wires");
		  }
		  case 4:
		  {
	      AddVehicleComponent(GetPlayerVehicleID(playerid),1077);
	      ShowPlayerDialog(playerid, MENU_AUTOS1, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
	      RUEDAS_AUTO[playerid][1] = 1077;
	      RUEDAS_AUTON2(playerid, 1077);
          PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		  SendClientMessage(playerid, -1,"Ruedas cambiadas a Classic");
		  }
          case 5:
   	      {
   	      AddVehicleComponent(GetPlayerVehicleID(playerid),1078);
   	      ShowPlayerDialog(playerid, MENU_AUTOS1, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
   	      RUEDAS_AUTO[playerid][1] = 1078;
   	      RUEDAS_AUTON2(playerid, 1078);
          PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		  SendClientMessage(playerid, -1,"Ruedas cambiadas a Twist");
	      }
          case 6:
	  	  {
          AddVehicleComponent(GetPlayerVehicleID(playerid),1079);
          ShowPlayerDialog(playerid, MENU_AUTOS1, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
          RUEDAS_AUTO[playerid][1] = 1079;
          RUEDAS_AUTON2(playerid, 1079);
          PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		  SendClientMessage(playerid, -1,"Ruedas cambiadas a Cutter");
          }
          case 7:
          {
          AddVehicleComponent(GetPlayerVehicleID(playerid),1080);
          ShowPlayerDialog(playerid, MENU_AUTOS1, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
          RUEDAS_AUTO[playerid][1] = 1080;
          RUEDAS_AUTON2(playerid, 1080);
          PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		  SendClientMessage(playerid, -1,"Ruedas cambiadas a Switch");
          }
          case 8:
          {
          AddVehicleComponent(GetPlayerVehicleID(playerid),1081);
          ShowPlayerDialog(playerid, MENU_AUTOS1, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
          RUEDAS_AUTO[playerid][1] = 1081;
          RUEDAS_AUTON2(playerid, 1081);
          PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		  SendClientMessage(playerid, -1,"Ruedas cambiadas a Grove");
     	  }
          case 9:
          {
   	      AddVehicleComponent(GetPlayerVehicleID(playerid),1082);
   	      ShowPlayerDialog(playerid, MENU_AUTOS1, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
   	      RUEDAS_AUTO[playerid][1] = 1082;
   	      RUEDAS_AUTON2(playerid, 1082);
          PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		  SendClientMessage(playerid, -1,"Ruedas cambiadas a Import");
          }
          case 10:
          {
          AddVehicleComponent(GetPlayerVehicleID(playerid),1083);
          ShowPlayerDialog(playerid, MENU_AUTOS1, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
          RUEDAS_AUTO[playerid][1] = 1083;
          RUEDAS_AUTON2(playerid, 1083);
          PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		  SendClientMessage(playerid, -1,"Ruedas cambiadas a Dollar");
          }
          case 11:
          {
          AddVehicleComponent(GetPlayerVehicleID(playerid),1084);
          ShowPlayerDialog(playerid, MENU_AUTOS1, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
          RUEDAS_AUTO[playerid][1] = 1084;
          RUEDAS_AUTON2(playerid, 1084);
          PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		  SendClientMessage(playerid, -1,"Ruedas cambiadas a Trance");
          }
          case 12:
          {
          AddVehicleComponent(GetPlayerVehicleID(playerid),1085);
          ShowPlayerDialog(playerid, MENU_AUTOS1, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
          RUEDAS_AUTO[playerid][1] = 1085;
          RUEDAS_AUTON2(playerid, 1085);
          PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		  SendClientMessage(playerid, -1,"Ruedas cambiadas a Atomic");
          }
  		}
	}
   //PAINTJOB 2
   if(dialogid == SELECCIONO_OPCION3_VACIO2)
   {
      if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
   switch(listitem)
   {
	      case 0:
          {
          ChangeVehiclePaintjob(GetPlayerVehicleID(playerid),1);
          AUTO_PAINTJOB[playerid][1] = 1;
          TIENE_PINTURA[playerid][1] = 0;
          PAINTJOBS_AUTON2(playerid, 1);
          SendClientMessage(playerid, -1,"Paintjob puesto corrctamente.");
          ShowPlayerDialog(playerid, MENU_AUTOS1, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
		  }
		  case 1:
          {
          ChangeVehiclePaintjob(GetPlayerVehicleID(playerid),5);
          AUTO_PAINTJOB[playerid][1] = 5;
          TIENE_PINTURA[playerid][1] = 0;
          PAINTJOBS_AUTON2(playerid, 5);
          SendClientMessage(playerid, -1,"Paintjob puesto corrctamente.");
          ShowPlayerDialog(playerid, MENU_AUTOS1, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
		  }
		  case 2:
          {
          ChangeVehiclePaintjob(GetPlayerVehicleID(playerid),7);
          AUTO_PAINTJOB[playerid][1] = 7;
          TIENE_PINTURA[playerid][1] = 0;
          PAINTJOBS_AUTON2(playerid, 7);
          SendClientMessage(playerid, -1,"Paintjob puesto corrctamente.");
          ShowPlayerDialog(playerid, MENU_AUTOS1, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
		  }
		  case 3:
          {
          ChangeVehiclePaintjob(GetPlayerVehicleID(playerid),4);
          AUTO_PAINTJOB[playerid][1] = 4;
          PAINTJOBS_AUTON2(playerid, 4);
          TIENE_PINTURA[playerid][1] = 0;
          ShowPlayerDialog(playerid, MENU_AUTOS1, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
          SendClientMessage(playerid, -1,"Paintjob puesto corrctamente.");
		  }
		  case 4:
          {
          ChangeVehiclePaintjob(GetPlayerVehicleID(playerid),2);
          AUTO_PAINTJOB[playerid][1] = 2;
          TIENE_PINTURA[playerid][1] = 0;
          PAINTJOBS_AUTON2(playerid, 2);
          SendClientMessage(playerid, -1,"Paintjob puesto corrctamente.");
          ShowPlayerDialog(playerid, MENU_AUTOS1, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
		  }
  		}
	}

	//VACÍO 3
   if(dialogid == MENU_AUTOS2)
   {
   if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
   switch(listitem)
   {
			case 0:
			{
			ShowPlayerDialog(playerid, SELECCIONO_OPCION0_VACIO3, DIALOG_STYLE_INPUT, "{FFFFFF}MODELO:", "{FFFFFF}Ingresa el modelo de auto que quieres agregar.\nParámetros: 400 - 600:\n", "Aceptar", "Cancelar");
			}
			case 1:
			{
			ShowPlayerDialog(playerid, SELECCIONO_OPCION1_VACIO3, DIALOG_STYLE_LIST, "{FFFFFF}COLOR:", "{FFFFFF}Rojo\nAzul\nNegro\nBlanco\nAmarillo\nVerde\nRosa\n", "Aceptar", "Cancelar");
			}
			case 2:
			{
			ShowPlayerDialog(playerid, SELECCIONO_OPCION2_VACIO3, DIALOG_STYLE_LIST, "{FFFFFF}RUEDAS:","{FFFFFF}Shadow\nMega\nRimshine\nWires\nClassic\nTwist\nCutter\nSwitch\nGrove\nImport\nDollar\nTrance\nAtomic\n","Seleccionar","Cancelar");
			}
			case 3:
			{
			ShowPlayerDialog(playerid, SELECCIONO_OPCION3_VACIO3, DIALOG_STYLE_LIST, "{FFFFFF}PAINTJOB:", "{FFFFFF}Modelo 1\nModelo 2\nModelo 3\nModelo 4\nModelo 5\n", "Aceptar", "Cancelar");
			}
			case 4:
			{
			ShowPlayerDialog(playerid, SELECCIONO_OPCION4, DIALOG_STYLE_INPUT, "{FFFFFF}NEONES:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
			}
  		}
	}

    if (dialogid == SELECCIONO_OPCION0_VACIO3)
	{
		if (!strlen(inputtext)) return ShowPlayerDialog(playerid, ERROR_001, DIALOG_STYLE_LIST, "{FFFFFF}ERROR:", "{FFFFFF}Por favor coloque una dirección de correo electrónico.", "Aceptar", "");
		if (!response) return ShowPlayerDialog(playerid, ERROR_001, DIALOG_STYLE_LIST, "{FFFFFF}ERROR:","{FFFFFF}Por favor coloque una dirección de correo electrónico.", "Aceptar", "");
		new tmp[256];
		new idx;
		tmp = strtok(inputtext, idx);
		new modelo = strval(tmp);
		MODELO_AUTO[playerid][2] = modelo;
		TIENE_AUTO[playerid][0] = 0;
		TIENE_AUTO[playerid][1] = 0;
		TIENE_AUTO[playerid][2] = 1;
		SACO_AUTO[2][playerid] = 1;
		GameTextForPlayer(playerid, "~w~~h~Guardado...", 6000, 4);
		new string[267];
 		format(string, sizeof(string), "Has establecido como modelo de auto, N°3: {00B1FF}'%d'{FFFFFF}. Escribe: {DAFF00}/mis autos{FFFFFF}.", MODELO_AUTO[playerid][2]);
		SendClientMessage(playerid, -1, string);
		new Float:x;
		new Float:y;
		new Float:z;
		new Float:angulo;
		GetPlayerPos(playerid, x, y, z);
		VEHICULO_CREADOR2[playerid] = CreateVehicle(modelo, x, y, z, angulo, -1, -1, -1);
		PutPlayerInVehicle(playerid, VEHICULO_CREADOR2[playerid], 0);
//		new queryx[100];
//		mysql_format(conexion, queryx, sizeof(queryx), "UPDATE `jugadores` SET AutoN3_Modelo=%d WHERE Nombre='%s'", MODELO_AUTO[playerid][2], GetName(playerid));
//		mysql_function_query(conexion, queryx, true, "OnQueryFinish", "ii", 0, playerid);
		ShowPlayerDialog(playerid, MENU_AUTOS2, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
		return 1;
	}

   if(dialogid == SELECCIONO_OPCION1_VACIO3)
   {
   if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
   switch(listitem)
   {
			case 0:
			{
			ChangeVehicleColor(GetPlayerVehicleID(playerid), 161, 161);
			AUTO_COLOR[playerid][2] = 161;
			AUTO_COLOR2[playerid][2] = 161;
			TIENE_PINTURA[playerid][2] = 1;
			COLOR_AUTO3(playerid, 161, 161);
            SendClientMessage(playerid, -1,"Color {FF0000}rojo{FFFFFF} adherido a tu auto, N°3.");
			ShowPlayerDialog(playerid, MENU_AUTOS2, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
			}
			case 1:
			{
			ChangeVehicleColor(GetPlayerVehicleID(playerid), 106, 106);
			AUTO_COLOR[playerid][2] = 106;
			AUTO_COLOR2[playerid][2] = 106;
			TIENE_PINTURA[playerid][2] = 1;
			COLOR_AUTO3(playerid, 106, 106);
            SendClientMessage(playerid, -1,"Color {0000FF}azul{FFFFFF} adherido a tu auto, N°3.");
			ShowPlayerDialog(playerid, MENU_AUTOS2, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
			}
			case 2:
			{
			ChangeVehicleColor(GetPlayerVehicleID(playerid), 0, 0);
			AUTO_COLOR[playerid][2] = 0;
			AUTO_COLOR2[playerid][2] = 0;
			TIENE_PINTURA[playerid][2] = 1;
			COLOR_AUTO3(playerid, 0, 0);
            SendClientMessage(playerid, -1,"Color {ACAAAA}negro{FFFFFF} adherido a tu auto, N°3.");
			ShowPlayerDialog(playerid, MENU_AUTOS2, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
			}
			case 3:
			{
			ChangeVehicleColor(GetPlayerVehicleID(playerid), 1, 1);
			AUTO_COLOR[playerid][2] = 1;
			AUTO_COLOR2[playerid][2] = 1;
			TIENE_PINTURA[playerid][2] = 1;
			COLOR_AUTO3(playerid, 1, 1);
            SendClientMessage(playerid, -1,"Color blanco adherido a tu auto, N°3.");
			ShowPlayerDialog(playerid, MENU_AUTOS2, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
			}
			case 4:
			{
			ChangeVehicleColor(GetPlayerVehicleID(playerid), 6, 6);
			AUTO_COLOR[playerid][2] = 6;
			AUTO_COLOR2[playerid][2] = 6;
			COLOR_AUTO3(playerid, 6, 6);
			TIENE_PINTURA[playerid][2] = 1;
            SendClientMessage(playerid, -1,"Color {FFFF00}amarillo{FFFFFF} adherido a tu auto, N°3.");
			ShowPlayerDialog(playerid, MENU_AUTOS2, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
			}
			case 5:
			{
			ChangeVehicleColor(GetPlayerVehicleID(playerid), 86, 86);
			AUTO_COLOR[playerid][2] = 86;
			AUTO_COLOR2[playerid][2] = 86;
			COLOR_AUTO3(playerid, 86, 86);
			TIENE_PINTURA[playerid][2] = 1;
            SendClientMessage(playerid, -1,"Color {36FF00}verde{FFFFFF} adherido a tu auto, N°3.");
			ShowPlayerDialog(playerid, MENU_AUTOS2, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
			}
			case 6:
			{
			ChangeVehicleColor(GetPlayerVehicleID(playerid), 126, 126);
			AUTO_COLOR[playerid][2] = 126;
			AUTO_COLOR2[playerid][2] = 126;
			TIENE_PINTURA[playerid][2] = 1;
			COLOR_AUTO3(playerid, 126, 126);
            SendClientMessage(playerid, -1,"Color {FF00FF}rosa{FFFFFF} adherido a tu auto, N°3.");
			ShowPlayerDialog(playerid, MENU_AUTOS2, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
			}
  		}
	}

	//RUEDAS VACÍO 1
	if(dialogid == SELECCIONO_OPCION2_VACIO3)
   {
   if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
   switch(listitem)
   {
	      case 0:
          {
          AddVehicleComponent(GetPlayerVehicleID(playerid),1073);
          ShowPlayerDialog(playerid, MENU_AUTOS2, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
          RUEDAS_AUTO[playerid][2] = 1073;
          RUEDAS_AUTON3(playerid, 1073);
          PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		  SendClientMessage(playerid, -1,"Ruedas cambiadas a Shadow");
		  }
		  case 1:
		  {
          AddVehicleComponent(GetPlayerVehicleID(playerid),1074);
          ShowPlayerDialog(playerid, MENU_AUTOS2, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
          RUEDAS_AUTO[playerid][2] = 1074;
          RUEDAS_AUTON3(playerid, 1074);
          PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		  SendClientMessage(playerid, -1,"Ruedas cambiadas a Mega");
		  }
          case 2:
		  {
	      AddVehicleComponent(GetPlayerVehicleID(playerid),1075);
	      ShowPlayerDialog(playerid, MENU_AUTOS2, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
	      RUEDAS_AUTO[playerid][2] = 1075;
	      RUEDAS_AUTON3(playerid, 1075);
          PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		  SendClientMessage(playerid, -1,"Ruedas cambiadas a Rimshine");
		  }
		  case 3:
		  {
	      AddVehicleComponent(GetPlayerVehicleID(playerid),1076);
	      ShowPlayerDialog(playerid, MENU_AUTOS2, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
	      RUEDAS_AUTO[playerid][2] = 1076;
	      RUEDAS_AUTON3(playerid, 1076);
          PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		  SendClientMessage(playerid, -1,"Ruedas cambiadas a Wires");
		  }
		  case 4:
		  {
	      AddVehicleComponent(GetPlayerVehicleID(playerid),1077);
	      ShowPlayerDialog(playerid, MENU_AUTOS2, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
	      RUEDAS_AUTO[playerid][2] = 1077;
	      RUEDAS_AUTON3(playerid, 1077);
          PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		  SendClientMessage(playerid, -1,"Ruedas cambiadas a Classic");
		  }
          case 5:
   	      {
   	      AddVehicleComponent(GetPlayerVehicleID(playerid),1078);
   	      ShowPlayerDialog(playerid, MENU_AUTOS2, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
   	      RUEDAS_AUTO[playerid][2] = 1078;
   	      RUEDAS_AUTON3(playerid, 1078);
          PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		  SendClientMessage(playerid, -1,"Ruedas cambiadas a Twist");
	      }
          case 6:
	  	  {
          AddVehicleComponent(GetPlayerVehicleID(playerid),1079);
          ShowPlayerDialog(playerid, MENU_AUTOS2, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
          RUEDAS_AUTO[playerid][2] = 1079;
          RUEDAS_AUTON3(playerid, 1079);
          PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		  SendClientMessage(playerid, -1,"Ruedas cambiadas a Cutter");
          }
          case 7:
          {
          AddVehicleComponent(GetPlayerVehicleID(playerid),1080);
          ShowPlayerDialog(playerid, MENU_AUTOS2, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
          RUEDAS_AUTO[playerid][2] = 1080;
          RUEDAS_AUTON3(playerid, 1080);
          PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		  SendClientMessage(playerid, -1,"Ruedas cambiadas a Switch");
          }
          case 8:
          {
          AddVehicleComponent(GetPlayerVehicleID(playerid),1081);
          ShowPlayerDialog(playerid, MENU_AUTOS2, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
          RUEDAS_AUTO[playerid][2] = 1081;
          RUEDAS_AUTON3(playerid, 1081);
          PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		  SendClientMessage(playerid, -1,"Ruedas cambiadas a Grove");
     	  }
          case 9:
          {
   	      AddVehicleComponent(GetPlayerVehicleID(playerid),1082);
   	      ShowPlayerDialog(playerid, MENU_AUTOS2, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
   	      RUEDAS_AUTO[playerid][2] = 1082;
   	      RUEDAS_AUTON3(playerid, 1082);
          PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		  SendClientMessage(playerid, -1,"Ruedas cambiadas a Import");
          }
          case 10:
          {
          AddVehicleComponent(GetPlayerVehicleID(playerid),1083);
          ShowPlayerDialog(playerid, MENU_AUTOS2, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
          RUEDAS_AUTO[playerid][2] = 1083;
          RUEDAS_AUTON3(playerid, 1083);
          PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		  SendClientMessage(playerid, -1,"Ruedas cambiadas a Dollar");
          }
          case 11:
          {
          AddVehicleComponent(GetPlayerVehicleID(playerid),1084);
          ShowPlayerDialog(playerid, MENU_AUTOS2, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
          RUEDAS_AUTO[playerid][2] = 1084;
          RUEDAS_AUTON3(playerid, 1084);
          PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		  SendClientMessage(playerid, -1,"Ruedas cambiadas a Trance");
          }
          case 12:
          {
          AddVehicleComponent(GetPlayerVehicleID(playerid),1085);
          ShowPlayerDialog(playerid, MENU_AUTOS2, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
          RUEDAS_AUTO[playerid][2] = 1085;
          RUEDAS_AUTON3(playerid, 1085);
          PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		  SendClientMessage(playerid, -1,"Ruedas cambiadas a Atomic");
          }
  		}
	}

   //PAINTJOB
   if(dialogid == SELECCIONO_OPCION3_VACIO3)
   {
   if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
   switch(listitem)
   {
	      case 0:
          {
          ChangeVehiclePaintjob(GetPlayerVehicleID(playerid),1);
          AUTO_PAINTJOB[playerid][2] = 1;
          TIENE_PINTURA[playerid][2] = 0;
          PAINTJOBS_AUTON3(playerid, 1);
          SendClientMessage(playerid, -1,"Paintjob puesto corrctamente.");
          ShowPlayerDialog(playerid, MENU_AUTOS2, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
		  }
		  case 1:
          {
          ChangeVehiclePaintjob(GetPlayerVehicleID(playerid),5);
          AUTO_PAINTJOB[playerid][2] = 5;
          TIENE_PINTURA[playerid][2] = 0;
          PAINTJOBS_AUTON3(playerid, 5);
          SendClientMessage(playerid, -1,"Paintjob puesto corrctamente.");
          ShowPlayerDialog(playerid, MENU_AUTOS2, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
		  }
		  case 2:
          {
          ChangeVehiclePaintjob(GetPlayerVehicleID(playerid),7);
          AUTO_PAINTJOB[playerid][2] = 7;
          TIENE_PINTURA[playerid][2] = 0;
          PAINTJOBS_AUTON3(playerid, 7);
          SendClientMessage(playerid, -1,"Paintjob puesto corrctamente.");
          ShowPlayerDialog(playerid, MENU_AUTOS2, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
		  }
		  case 3:
          {
          ChangeVehiclePaintjob(GetPlayerVehicleID(playerid),4);
          AUTO_PAINTJOB[playerid][2] = 4;
          PAINTJOBS_AUTON3(playerid, 4);
          TIENE_PINTURA[playerid][2] = 0;
          ShowPlayerDialog(playerid, MENU_AUTOS2, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
          SendClientMessage(playerid, -1,"Paintjob puesto corrctamente.");
		  }
		  case 4:
          {
          ChangeVehiclePaintjob(GetPlayerVehicleID(playerid),2);
          AUTO_PAINTJOB[playerid][2] = 2;
          TIENE_PINTURA[playerid][2] = 0;
          PAINTJOBS_AUTON3(playerid, 2);
          SendClientMessage(playerid, -1,"Paintjob puesto corrctamente.");
          ShowPlayerDialog(playerid, MENU_AUTOS2, DIALOG_STYLE_LIST, "{FFFFFF}SISTEMA DE AUTOS TUNEADOS:", "{FFFFFF}Modelo\nColor\nRuedas\nPaintJobs\nNeones\n", "Aceptar", "Cancelar");
		  }
  		}
	}
	//SISTEMA TELEPORTS
	if(dialogid == MENU_TELEPORT1)
	{
		if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
		switch(listitem)
		{
			case 0: ShowPlayerDialog(playerid, MENU_TELEPORT2, DIALOG_STYLE_LIST, "{FFFFFF}Ciudades:", "Los Santos\nLas Venturas\nSan Fierro\nLiberty City\nNew City\nRegresar\n", "Aceptar", "Cancelar");
			case 1: ShowPlayerDialog(playerid, MENU_TELEPORT3, DIALOG_STYLE_LIST, "{FFFFFF}Aeropuertos:", "Aeropuerto Los Santos\nAeropuerto Las Venturas\nAeropuerto San Fierro\nRegresar\n", "Aceptar", "Cancelar");
			case 2: ShowPlayerDialog(playerid, MENU_TELEPORT4, DIALOG_STYLE_LIST, "{FFFFFF}Stunt:", "Zona Stunt\nZona Stunt2\nZona Stunt3\nZona Stunt4\nLas Venturas Stunt\nStunt San Fierro\nPresaStunt\nAeropuerto Los Santos\nAeropuerto San Fierro\nAeropuerto Las Venturas\nTuberia\nRegresar\n", "Aceptar", "Cancelar");
			case 3: ShowPlayerDialog(playerid, MENU_TELEPORT5, DIALOG_STYLE_LIST, "{FFFFFF}Drifting:", "Drifting\nDrifting2\nDrifting3\nDrifting4\nRegresar\n", "Aceptar", "Cancelar");
			case 4: ShowPlayerDialog(playerid, MENU_TELEPORT6, DIALOG_STYLE_LIST, "{FFFFFF}Undergrounds:", "Underground\nUnderwater\nRegresar\n", "Aceptar", "Cancelar");
			case 5: ShowPlayerDialog(playerid, MENU_TELEPORT7, DIALOG_STYLE_LIST, "{FFFFFF}XZ(Zonas de Paracaidismo):", "XZ\nXZ2\nXZ3\nXZ4\nXZ5\nXZ6\nXZ7\nXZ8\nRegresar\n", "Aceptar", "Cancelar");
			case 6: ShowPlayerDialog(playerid, MENU_TELEPORT8, DIALOG_STYLE_LIST, "{FFFFFF}Otros:", "Area51\nMonte\nGrove Steet\nAlhambra\nJizzy\nPlaya\nCantera\nLL(Loco Low)\nJump\nTrasfender Las Venturas\nTrasfender Los Santos\nZona Guerra\nBarrio Vagos\nRegresar\n", "Aceptar", "Cancelar");
 		}
	}
	//Ciudades:
	if(dialogid == MENU_TELEPORT2)
	{
		if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
		switch(listitem)
		{
			case 0: LSA(playerid);
			case 1: LVA(playerid);
			case 2: SFA(playerid);
			case 3: LCA(playerid);
			case 4: NEWCITYA(playerid);
			case 5: ShowPlayerDialog(playerid, MENU_TELEPORT1, DIALOG_STYLE_LIST, "{B908FF}Menú de Teleports:", "Ciudades\nAeropuertos\nStunts\nDrifting\nUndergrounds\nXZ(Zonas de Paracaidismo)\nOtros\n", "Aceptar", "Cancelar");
 		}
	}
	//Aeropuertos:
	if(dialogid == MENU_TELEPORT3)
	{
		if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
		switch(listitem)
		{
			case 0: ALSA(playerid);
			case 1: ALVA(playerid);
			case 2: ASFA(playerid);
			case 3: ShowPlayerDialog(playerid, MENU_TELEPORT1, DIALOG_STYLE_LIST, "{B908FF}Menú de Teleports:", "Ciudades\nAeropuertos\nStunts\nDrifting\nUndergrounds\nXZ(Zonas de Paracaidismo)\nOtros\n", "Aceptar", "Cancelar");
 		}
	}
	if(dialogid == MENU_TELEPORT4)
	{
		if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
		switch(listitem)
		{
			case 0: STUNTA(playerid);
			case 1: STUNT2A(playerid);
			case 2: STUNT3A(playerid);
			case 3: STUNT4A(playerid);
			case 4: LVSTUNTA(playerid);
			case 5: SSFA(playerid);
			case 6: PRESASTUNTA(playerid);
			case 7: ALSA(playerid);
			case 8: ASFA(playerid);
			case 9: ALVA(playerid);
			case 10: TUBERIAA(playerid);
			case 11: ShowPlayerDialog(playerid, MENU_TELEPORT1, DIALOG_STYLE_LIST, "{B908FF}Menú de Teleports:", "Ciudades\nAeropuertos\nStunts\nDrifting\nUndergrounds\nXZ(Zonas de Paracaidismo)\nOtros\n", "Aceptar", "Cancelar");
 		}
	}
	if(dialogid == MENU_TELEPORT5)
	{
		if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
		switch(listitem)
		{
			case 0: DRIFTA(playerid);
			case 1: DRIFT2A(playerid);
			case 2: DRIFT3A(playerid);
			case 3: DRIFT4A(playerid);
			case 4: ShowPlayerDialog(playerid, MENU_TELEPORT1, DIALOG_STYLE_LIST, "{B908FF}Menú de Teleports:", "Ciudades\nAeropuertos\nStunts\nDrifting\nUndergrounds\nXZ(Zonas de Paracaidismo)\nOtros\n", "Aceptar", "Cancelar");
 		}
	}
	if(dialogid == MENU_TELEPORT6)
	{
		if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
		switch(listitem)
		{
			case 0: UNDERGROUNDA(playerid);
			case 1: UNDERWATERA(playerid);
			case 2: ShowPlayerDialog(playerid, MENU_TELEPORT1, DIALOG_STYLE_LIST, "{B908FF}Menú de Teleports:", "Ciudades\nAeropuertos\nStunts\nDrifting\nUndergrounds\nXZ(Zonas de Paracaidismo)\nOtros\n", "Aceptar", "Cancelar");
 		}
	}
	if(dialogid == MENU_TELEPORT7)
	{
	if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
		switch(listitem)
		{
			case 0: XZA(playerid);
			case 1: XZ2A(playerid);
			case 2: XZ3A(playerid);
			case 3: XZ4A(playerid);
			case 4: XZ5A(playerid);
			case 5: XZ6A(playerid);
			case 6: XZ7A(playerid);
			case 7: XZ8A(playerid);
			case 8: ShowPlayerDialog(playerid, MENU_TELEPORT1, DIALOG_STYLE_LIST, "{B908FF}Menú de Teleports:", "Ciudades\nAeropuertos\nStunts\nDrifting\nUndergrounds\nXZ(Zonas de Paracaidismo)\nOtros\n", "Aceptar", "Cancelar");
 		}
	}
	if(dialogid == MENU_TELEPORT8)
	{
		if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
		switch(listitem)
		{
			case 0: AREA51A(playerid);
			case 1: MONTEA(playerid);
			case 2: GROVEA(playerid);
			case 3: ALHAMBRAA(playerid);
			case 4: JIZZYA(playerid);
			case 5: PLAYAA(playerid);
			case 6: CANTERAA(playerid);
			case 7: LLA(playerid);
			case 8: JUMPA(playerid);
			case 9: TRASLVA(playerid);
			case 10: TRASLSA(playerid);
			case 11: ZGA(playerid);
			case 12: BVA(playerid);
			case 13: ShowPlayerDialog(playerid, MENU_TELEPORT1, DIALOG_STYLE_LIST, "{B908FF}Menú de Teleports:", "Ciudades\nAeropuertos\nStunts\nDrifting\nUndergrounds\nXZ(Zonas de Paracaidismo)\nOtros\n", "Aceptar", "Cancelar");
 		}
	}
    switch(dialogid)
	{
	    case 599:
	    {
	        if(!response) return BuildRace = 0;
	        switch(listitem)
	        {
	        	case 0: BuildRaceType = 0;
	        	case 1: BuildRaceType = 3;
			}
			ShowDialog(playerid, 600);
	    }
	    case 600..601:
	    {
	        if(!response) return ShowDialog(playerid, 599);
	        if(!strlen(inputtext)) return ShowDialog(playerid, 601);
	        if(strlen(inputtext) < 1 || strlen(inputtext) > 20) return ShowDialog(playerid, 601);
	        strmid(BuildName, inputtext, 0, strlen(inputtext), sizeof(BuildName));
	        ShowDialog(playerid, 602);
	    }
	    case 602..603:
	    {
	        if(!response) return ShowDialog(playerid, 600);
	        if(!strlen(inputtext)) return ShowDialog(playerid, 603);
	        if(isNumeric(inputtext))
	        {

	            if(!IsValidVehicle(strval(inputtext))) return ShowDialog(playerid, 603);
				new
	                Float: pPos[4]
				;
				GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
				GetPlayerFacingAngle(playerid, pPos[3]);
				BuildModeVID = strval(inputtext);
				BuildCreatedVehicle = (BuildCreatedVehicle == 0x01) ? (DestroyVehicle(BuildVehicle), BuildCreatedVehicle = 0x00) : (DestroyVehicle(BuildVehicle), BuildCreatedVehicle = 0x00);
	            BuildVehicle = CreateVehicle(strval(inputtext), pPos[0], pPos[1], pPos[2], pPos[3], random(126), random(126), (60 * 60));
	            PutPlayerInVehicle(playerid, BuildVehicle, 0);
				BuildCreatedVehicle = 0x01;
				ShowDialog(playerid, 604);
			}
	        else
	        {
	            if(!IsValidVehicle(ReturnVehicleID(inputtext))) return ShowDialog(playerid, 603);
				new
	                Float: pPos[4]
				;
				GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
				GetPlayerFacingAngle(playerid, pPos[3]);
				BuildModeVID = ReturnVehicleID(inputtext);
				BuildCreatedVehicle = (BuildCreatedVehicle == 0x01) ? (DestroyVehicle(BuildVehicle), BuildCreatedVehicle = 0x00) : (DestroyVehicle(BuildVehicle), BuildCreatedVehicle = 0x00);
	            BuildVehicle = CreateVehicle(ReturnVehicleID(inputtext), pPos[0], pPos[1], pPos[2], pPos[3], random(126), random(126), (60 * 60));
	            PutPlayerInVehicle(playerid, BuildVehicle, 0);
				BuildCreatedVehicle = 0x01;
				ShowDialog(playerid, 604);
	        }
	    }
	    case 604:
	    {
	        if(!response) return ShowDialog(playerid, 602);
			SendClientMessage(playerid, Celeste, ">> Ir a la línea de salida en la carretera y pulse 'CLICK-IZQUIERDO'.");
			SendClientMessage(playerid, Celeste, "   - Cuando haga esto, vera un dialogo para continuar.");
			BuildVehPosCount = 0;
	        BuildTakeVehPos = true;
	    }
	    case 605:
	    {
	        if(!response) return ShowDialog(playerid, 604);
	        SendClientMessage(playerid, Celeste, ">> Ahora comiense en donde quiera poner los CHECKPOINTS 'CLICK-IZQUIERDO'.");
	        SendClientMessage(playerid, Celeste, "   - IMPORTANTE: Presiona 'ENTER' cuando haya terminado con los checkpoints!.");
	        BuildCheckPointCount = 0;
	        BuildTakeCheckpoints = true;
	    }
	    case 606:
	    {
	        if(!response) return ShowDialog(playerid, 606);
	        BuildRace = 0;
	        BuildCheckPointCount = 0;
	        BuildVehPosCount = 0;
	        BuildTakeCheckpoints = false;
	        BuildTakeVehPos = false;
	        BuildCreatedVehicle = (BuildCreatedVehicle == 0x01) ? (DestroyVehicle(BuildVehicle), BuildCreatedVehicle = 0x00) : (DestroyVehicle(BuildVehicle), BuildCreatedVehicle = 0x00);
	    }
	}
	//SISTEMA DE AUTO(ABRIR, CERRAR, LUCES, ECT).
 	new veh = GetPlayerVehicleID(playerid);
	new engine,lights,alarm,doors,bonnet,boot,objective;
	if(dialogid == 6666)
	{
		if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
		switch(listitem)
 		{
  			case 0:
    		{
  				if(GetPVarInt(playerid, "Luces") == 0)
				{
					GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(veh,engine,VEHICLE_PARAMS_ON,alarm,doors,bonnet,boot,objective);
					SetPVarInt(playerid, "Luces", 1);
				}
				else if(GetPVarInt(playerid, "Luces") == 1)
				{
					GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(veh,engine,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective);
					SetPVarInt(playerid, "Luces", 0);
				}
			}
			case 1:
			{
				if(GetPVarInt(playerid, "Capó") == 0)
				{
					GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(veh,engine,lights,alarm,doors,VEHICLE_PARAMS_ON,boot,objective);
					SetPVarInt(playerid, "Capó", 1);
				}
				else if(GetPVarInt(playerid, "Capó") == 1)
				{
					GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(veh,engine,lights,alarm,doors,VEHICLE_PARAMS_OFF,boot,objective);
					SetPVarInt(playerid, "Capó", 0);
				}
			}
			case 2:
			{
				if(GetPVarInt(playerid, "maletero") == 0)
				{
					GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_ON,objective);
					SetPVarInt(playerid, "maletero", 1);
				}
				else if(GetPVarInt(playerid, "maletero") == 1)
				{
					GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_OFF,objective);
					SetPVarInt(playerid, "maletero", 0);
				}
			}
			case 3:
			{
				if(GetPVarInt(playerid, "Puertas") == 0)
				{
					GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(veh,engine,lights,alarm,VEHICLE_PARAMS_ON,bonnet,boot,objective);
					SetPVarInt(playerid, "Puertas", 1);
				}
				else if(GetPVarInt(playerid, "Puertas") == 1)
				{
					GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(veh,engine,lights,alarm,VEHICLE_PARAMS_OFF,bonnet,boot,objective);
					SetPVarInt(playerid, "Puertas", 0);
				}
			}
			case 4:
			{
				if(GetPVarInt(playerid, "Motor") == 0)
				{
					GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(veh,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
					SetPVarInt(playerid, "Motor", 1);
				}
				else if(GetPVarInt(playerid, "Motor") == 1)
				{
					GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(veh,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
					SetPVarInt(playerid, "Motor", 0);
				}
			}
			case 5:
			{
				if(GetPVarInt(playerid, "Alarma") == 0)
				{
					GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(veh,engine,lights,VEHICLE_PARAMS_ON,doors,bonnet,boot,objective);
					SetPVarInt(playerid, "Alarm", 1);
				}
				else if(GetPVarInt(playerid, "Alarma") == 1)
				{
					GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(veh,engine,lights,VEHICLE_PARAMS_OFF,doors,bonnet,boot,objective);
					SetPVarInt(playerid, "Alarma", 0);
				}
			}
		}
	}
	//SISTEMA CARMAS
	new string[260];
   	if(dialogid == MENU_CARMAS0)
   	{
   		if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
   		switch(listitem)
   		{
			case 0:{
   				new ArmaText[26], ArmaText2[26], ArmaText3[26], ArmaText4[26], ArmaText5[26];
				if(CArma[playerid][0] == 24) ArmaText = "{00ACFF}Desert Eagle";
	   			if(CArma[playerid][0] == 23) ArmaText = "{00ACFF}Silenciador 9mm";
    			if(CArma[playerid][0] == 22) ArmaText = "{00ACFF}Pistola 9mm";
    			if(CArma[playerid][0] == 0) ArmaText = "{FFFFFF}Vacío";
    			if(CArma[playerid][1] == 25) ArmaText2 = "{00ACFF}Shotgun";
 				if(CArma[playerid][1] == 26) ArmaText2 = "{00ACFF}Recortada";
    			if(CArma[playerid][1] == 27) ArmaText2 = "{00ACFF}Shotgun combate";
    			if(CArma[playerid][1] == 0) ArmaText2 = "{FFFFFF}Vacío";
    			if(CArma[playerid][2] == 28) ArmaText3 = "{00ACFF}UZI";
 				if(CArma[playerid][2] == 29) ArmaText3 = "{00ACFF}MP5";
    			if(CArma[playerid][2] == 32) ArmaText3 = "{00ACFF}TEC-9";
    			if(CArma[playerid][2] == 0) ArmaText3 = "{FFFFFF}Vacío";
				if(CArma[playerid][3] == 31) ArmaText4 = "{00ACFF}M4";
    			if(CArma[playerid][3] == 30) ArmaText4 = "{00ACFF}AK-47";
    			if(CArma[playerid][3] == 0) ArmaText4 = "{FFFFFF}Vacío";
    			if(CArma[playerid][4] == 33) ArmaText5 = "{00ACFF}Rifle";
    			if(CArma[playerid][4] == 34) ArmaText5 = "{00ACFF}Sniper";
    			if(CArma[playerid][4] == 0) ArmaText5 = "{FFFFFF}Vacío";
				format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
				ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR0, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 1:", string, "Aceptar", "Cancelar");
			}
			case 1:{
  				new ArmaText[26], ArmaText2[26], ArmaText3[26], ArmaText4[26], ArmaText5[26];
				if(CArma[playerid][5] == 24) ArmaText = "{00ACFF}Desert Eagle";
				if(CArma[playerid][5] == 23) ArmaText = "{00ACFF}Silenciador 9mm";
				if(CArma[playerid][5] == 22) ArmaText = "{00ACFF}Pistola 9mm";
				if(CArma[playerid][5] == 0) ArmaText = "{FFFFFF}Vacío";
				if(CArma[playerid][6] == 25) ArmaText2 = "{00ACFF}Shotgun";
				if(CArma[playerid][6] == 26) ArmaText2 = "{00ACFF}Recortada";
				if(CArma[playerid][6] == 27) ArmaText2 = "{00ACFF}Shotgun combate";
				if(CArma[playerid][6] == 0) ArmaText2 = "{FFFFFF}Vacío";
				if(CArma[playerid][7] == 28) ArmaText3 = "{00ACFF}UZI";
				if(CArma[playerid][7] == 29) ArmaText3 = "{00ACFF}MP5";
				if(CArma[playerid][7] == 32) ArmaText3 = "{00ACFF}TEC-9";
				if(CArma[playerid][7] == 0) ArmaText3 = "{FFFFFF}Vacío";
				if(CArma[playerid][8] == 31) ArmaText4 = "{00ACFF}M4";
				if(CArma[playerid][8] == 30) ArmaText4 = "{00ACFF}AK-47";
				if(CArma[playerid][8] == 0) ArmaText4 = "{FFFFFF}Vacío";
				if(CArma[playerid][9] == 33) ArmaText5 = "{00ACFF}Rifle";
				if(CArma[playerid][9] == 34) ArmaText5 = "{00ACFF}Sniper";
				if(CArma[playerid][9] == 0) ArmaText5 = "{FFFFFF}Vacío";
				format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
				ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR1, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 2:", string, "Aceptar", "Cancelar");
			}
			case 2:{
  				new ArmaText[26], ArmaText2[26], ArmaText3[26], ArmaText4[26], ArmaText5[26];
				if(CArma[playerid][10] == 24) ArmaText = "{00ACFF}Desert Eagle";
				if(CArma[playerid][10] == 23) ArmaText = "{00ACFF}Silenciador 9mm";
				if(CArma[playerid][10] == 22) ArmaText = "{00ACFF}Pistola 9mm";
				if(CArma[playerid][10] == 0) ArmaText = "{FFFFFF}Vacío";
				if(CArma[playerid][11] == 25) ArmaText2 = "{00ACFF}Shotgun";
				if(CArma[playerid][11] == 26) ArmaText2 = "{00ACFF}Recortada";
				if(CArma[playerid][11] == 27) ArmaText2 = "{00ACFF}Shotgun combate";
				if(CArma[playerid][11] == 0) ArmaText2 = "{FFFFFF}Vacío";
				if(CArma[playerid][12] == 28) ArmaText3 = "{00ACFF}UZI";
				if(CArma[playerid][12] == 29) ArmaText3 = "{00ACFF}MP5";
				if(CArma[playerid][12] == 32) ArmaText3 = "{00ACFF}TEC-9";
				if(CArma[playerid][12] == 0) ArmaText3 = "{FFFFFF}Vacío";
				if(CArma[playerid][13] == 31) ArmaText4 = "{00ACFF}M4";
				if(CArma[playerid][13] == 30) ArmaText4 = "{00ACFF}AK-47";
				if(CArma[playerid][13] == 0) ArmaText4 = "{FFFFFF}Vacío";
				if(CArma[playerid][14] == 33) ArmaText5 = "{00ACFF}Rifle";
				if(CArma[playerid][14] == 34) ArmaText5 = "{00ACFF}Sniper";
				if(CArma[playerid][14] == 0) ArmaText5 = "{FFFFFF}Vacío";
				format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
				ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR2, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 3:", string, "Aceptar", "Cancelar");
			}
  		}
	}
 	if(dialogid == MENU_CARMAS_ELEGIR0)
   	{
   		if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
   		new ArmaText[26], ArmaText2[26], ArmaText3[26], ArmaText4[26], ArmaText5[26];
		if(CArma[playerid][0] == 24) ArmaText = "{00ACFF}Desert Eagle";
		if(CArma[playerid][0] == 23) ArmaText = "{00ACFF}Silenciador 9mm";
		if(CArma[playerid][0] == 22) ArmaText = "{00ACFF}Pistola 9mm";
		if(CArma[playerid][0] == 0) ArmaText = "{FFFFFF}Vacío";
		if(CArma[playerid][1] == 25) ArmaText2 = "{00ACFF}Shotgun";
		if(CArma[playerid][1] == 26) ArmaText2 = "{00ACFF}Recortada";
		if(CArma[playerid][1] == 27) ArmaText2 = "{00ACFF}Shotgun combate";
		if(CArma[playerid][1] == 0) ArmaText2 = "{FFFFFF}Vacío";
		if(CArma[playerid][2] == 28) ArmaText3 = "{00ACFF}UZI";
		if(CArma[playerid][2] == 29) ArmaText3 = "{00ACFF}MP5";
		if(CArma[playerid][2] == 32) ArmaText3 = "{00ACFF}TEC-9";
		if(CArma[playerid][2] == 0) ArmaText3 = "{FFFFFF}Vacío";
		if(CArma[playerid][3] == 31) ArmaText4 = "{00ACFF}M4";
		if(CArma[playerid][3] == 30) ArmaText4 = "{00ACFF}AK-47";
		if(CArma[playerid][3] == 0) ArmaText4 = "{FFFFFF}Vacío";
		if(CArma[playerid][4] == 33) ArmaText5 = "{00ACFF}Rifle";
		if(CArma[playerid][4] == 34) ArmaText5 = "{00ACFF}Sniper";
		if(CArma[playerid][4] == 0) ArmaText5 = "{FFFFFF}Vacío";
   		switch(listitem)
   		{
			case 0:
			{
				ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR0S, DIALOG_STYLE_LIST, "{FFFFFF}Escoge Arma 1:", "{00ACFF}Desert Eagle\n{00ACFF}Sileciador 9mm\n{00ACFF}Pistola 9mm\nRegresar\n", "Seleccionar", "Cancelar");
			}
			case 1:
			{
				ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR1S, DIALOG_STYLE_LIST, "{FFFFFF}Escoger Arma 2:", "{00ACFF}Shotgun\n{00ACFF}Recortada\n{00ACFF}Shotgun Combate\nRegresar\n", "Seleccionar", "Cancelar");
			}
			case 2:
			{
				ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR2S, DIALOG_STYLE_LIST, "{FFFFFF}Escoger Arma 3:","{00ACFF}Uzi\n{00ACFF}MP5\n{00ACFF}Tec-9\nRegresar\n","Seleccionar","Cancelar");
			}
			case 3:
			{
				ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR3S, DIALOG_STYLE_LIST, "{FFFFFF}Escoger Arma 4:", "{00ACFF}M4\n{00ACFF}AK-47\nRegresar\n", "Seleccionar", "Cancelar");
			}
			case 4:
			{
				ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR4S, DIALOG_STYLE_LIST, "{FFFFFF}Escoger Arma 5:", "{00ACFF}Rifle\n{00ACFF}Sniper\nRegresar\n", "Seleccionar", "Cancelar");
			}
			case 5:
			{
				CArma[playerid][0] = 0;
				CArma[playerid][0] = 0;
				CArma[playerid][0] = 0;
				CArma[playerid][0] = 0;
				CArma[playerid][1] = 0;
				CArma[playerid][1] = 0;
				CArma[playerid][1] = 0;
				CArma[playerid][1] = 0;
				CArma[playerid][2] = 0;
				CArma[playerid][2] = 0;
				CArma[playerid][2] = 0;
				CArma[playerid][2] = 0;
				CArma[playerid][3] = 0;
				CArma[playerid][3] = 0;
				CArma[playerid][3] = 0;
				CArma[playerid][3] = 0;
				CArma[playerid][4] = 0;
				CArma[playerid][4] = 0;
				CArma[playerid][4] = 0;
				CArma[playerid][4] = 0;
				SendClientMessage(playerid, -1, "{00DED3}* El grupo de armas del slot 1 han sido removidas correctamente. Escribe: /mis armas para seguir editando.");
			}
  		}
	}
	//ARMAS 2
	if(dialogid == MENU_CARMAS_ELEGIR1)
   	{
   		if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
   		new ArmaText[26], ArmaText2[26], ArmaText3[26], ArmaText4[26], ArmaText5[26];
		if(CArma[playerid][5] == 24) ArmaText = "{00ACFF}Desert Eagle";
		if(CArma[playerid][5] == 23) ArmaText = "{00ACFF}Silenciador 9mm";
		if(CArma[playerid][5] == 22) ArmaText = "{00ACFF}Pistola 9mm";
		if(CArma[playerid][5] == 0) ArmaText = "{FFFFFF}Vacío";
		if(CArma[playerid][6] == 25) ArmaText2 = "{00ACFF}Shotgun";
		if(CArma[playerid][6] == 26) ArmaText2 = "{00ACFF}Recortada";
		if(CArma[playerid][6] == 27) ArmaText2 = "{00ACFF}Shotgun combate";
		if(CArma[playerid][6] == 0) ArmaText2 = "{FFFFFF}Vacío";
		if(CArma[playerid][7] == 28) ArmaText3 = "{00ACFF}UZI";
		if(CArma[playerid][7] == 29) ArmaText3 = "{00ACFF}MP5";
		if(CArma[playerid][7] == 32) ArmaText3 = "{00ACFF}TEC-9";
		if(CArma[playerid][7] == 0) ArmaText3 = "{FFFFFF}Vacío";
		if(CArma[playerid][8] == 31) ArmaText4 = "{00ACFF}M4";
		if(CArma[playerid][8] == 30) ArmaText4 = "{00ACFF}AK-47";
		if(CArma[playerid][8] == 0) ArmaText4 = "{FFFFFF}Vacío";
		if(CArma[playerid][9] == 33) ArmaText5 = "{00ACFF}Rifle";
		if(CArma[playerid][9] == 34) ArmaText5 = "{00ACFF}Sniper";
		if(CArma[playerid][9] == 0) ArmaText5 = "{FFFFFF}Vacío";
   		switch(listitem)
   		{
			case 0:
			{
				ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR5S, DIALOG_STYLE_LIST, "{FFFFFF}Escoge Arma 1:", "{00ACFF}Desert Eagle\n{00ACFF}Sileciador 9mm\n{00ACFF}Pistola 9mm\nRegresar\n", "Seleccionar", "Cancelar");
			}
			case 1:
			{
				ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR6S, DIALOG_STYLE_LIST, "{FFFFFF}Escoger Arma 2:", "{00ACFF}Shotgun\n{00ACFF}Recortada\n{00ACFF}Shotgun Combate\nRegresar\n", "Seleccionar", "Cancelar");
			}
			case 2:
			{
				ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR7S, DIALOG_STYLE_LIST, "{FFFFFF}Escoger Arma 3:","{00ACFF}Uzi\n{00ACFF}MP5\n{00ACFF}Tec-9\nRegresar\n","Seleccionar","Cancelar");
			}
			case 3:
			{
				ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR8S, DIALOG_STYLE_LIST, "{FFFFFF}Escoger Arma 4:", "{00ACFF}M4\n{00ACFF}AK-47\nRegresar\n", "Seleccionar", "Cancelar");
			}
			case 4:
			{
				ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR9S, DIALOG_STYLE_LIST, "{FFFFFF}Escoger Arma 5:", "{00ACFF}Rifle\n{00ACFF}Sniper\nRegresar\n", "Seleccionar", "Cancelar");
			}
			case 5:
			{
				CArma[playerid][5] = 0;
				CArma[playerid][5] = 0;
				CArma[playerid][5] = 0;
				CArma[playerid][5] = 0;
				CArma[playerid][6] = 0;
				CArma[playerid][6] = 0;
				CArma[playerid][6] = 0;
				CArma[playerid][6] = 0;
				CArma[playerid][7] = 0;
				CArma[playerid][7] = 0;
				CArma[playerid][7] = 0;
				CArma[playerid][7] = 0;
				CArma[playerid][8] = 0;
				CArma[playerid][8] = 0;
				CArma[playerid][8] = 0;
				CArma[playerid][8] = 0;
				CArma[playerid][9] = 0;
				CArma[playerid][9] = 0;
				CArma[playerid][9] = 0;
				CArma[playerid][9] = 0;
				SendClientMessage(playerid, -1, "{00DED3}* El grupo de armas del slot 2 han sido removidas correctamente. Escribe: /mis armas para seguir editando.");
			}
  		}
	}
	//ARMAS 3
	if(dialogid == MENU_CARMAS_ELEGIR2)
   	{
   		if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
   		new ArmaText[26], ArmaText2[26], ArmaText3[26], ArmaText4[26], ArmaText5[26];
		if(CArma[playerid][10] == 24) ArmaText = "{00ACFF}Desert Eagle";
		if(CArma[playerid][10] == 23) ArmaText = "{00ACFF}Silenciador 9mm";
		if(CArma[playerid][10] == 22) ArmaText = "{00ACFF}Pistola 9mm";
		if(CArma[playerid][10] == 0) ArmaText = "{FFFFFF}Vacío";
		if(CArma[playerid][11] == 25) ArmaText2 = "{00ACFF}Shotgun";
		if(CArma[playerid][11] == 26) ArmaText2 = "{00ACFF}Recortada";
		if(CArma[playerid][11] == 27) ArmaText2 = "{00ACFF}Shotgun combate";
		if(CArma[playerid][11] == 0) ArmaText2 = "{FFFFFF}Vacío";
		if(CArma[playerid][12] == 28) ArmaText3 = "{00ACFF}UZI";
		if(CArma[playerid][12] == 29) ArmaText3 = "{00ACFF}MP5";
		if(CArma[playerid][12] == 32) ArmaText3 = "{00ACFF}TEC-9";
		if(CArma[playerid][12] == 0) ArmaText3 = "{FFFFFF}Vacío";
		if(CArma[playerid][13] == 31) ArmaText4 = "{00ACFF}M4";
		if(CArma[playerid][13] == 30) ArmaText4 = "{00ACFF}AK-47";
		if(CArma[playerid][13] == 0) ArmaText4 = "{FFFFFF}Vacío";
		if(CArma[playerid][14] == 33) ArmaText5 = "{00ACFF}Rifle";
		if(CArma[playerid][14] == 34) ArmaText5 = "{00ACFF}Sniper";
		if(CArma[playerid][14] == 0) ArmaText5 = "{FFFFFF}Vacío";
   		switch(listitem)
   		{
			case 0:
			{
				ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR10S, DIALOG_STYLE_LIST, "{FFFFFF}Escoge Arma 1:", "{00ACFF}Desert Eagle\n{00ACFF}Sileciador 9mm\n{00ACFF}Pistola 9mm\nRegresar\n", "Seleccionar", "Cancelar");
			}
			case 1:
			{
				ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR11S, DIALOG_STYLE_LIST, "{FFFFFF}Escoger Arma 2:", "{00ACFF}Shotgun\n{00ACFF}Recortada\n{00ACFF}Shotgun Combate\nRegresar\n", "Seleccionar", "Cancelar");
			}
			case 2:
			{
				ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR12S, DIALOG_STYLE_LIST, "{FFFFFF}Escoger Arma 3:","{00ACFF}Uzi\n{00ACFF}MP5\n{00ACFF}Tec-9\nRegresar\n","Seleccionar","Cancelar");
			}
			case 3:
			{
				ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR13S, DIALOG_STYLE_LIST, "{FFFFFF}Escoger Arma 4:", "{00ACFF}M4\n{00ACFF}AK-47\nRegresar\n", "Seleccionar", "Cancelar");
			}
			case 4:
			{
				ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR14S, DIALOG_STYLE_LIST, "{FFFFFF}Escoger Arma 5:", "{00ACFF}Rifle\n{00ACFF}Sniper\nRegresar\n", "Seleccionar", "Cancelar");
			}
			case 5:
			{
				CArma[playerid][10] = 0;
				CArma[playerid][10] = 0;
				CArma[playerid][10] = 0;
				CArma[playerid][10] = 0;
				CArma[playerid][11] = 0;
				CArma[playerid][11] = 0;
				CArma[playerid][11] = 0;
				CArma[playerid][11] = 0;
				CArma[playerid][12] = 0;
				CArma[playerid][12] = 0;
				CArma[playerid][12] = 0;
				CArma[playerid][12] = 0;
				CArma[playerid][13] = 0;
				CArma[playerid][13] = 0;
				CArma[playerid][13] = 0;
				CArma[playerid][13] = 0;
				CArma[playerid][14] = 0;
				CArma[playerid][14] = 0;
				CArma[playerid][14] = 0;
				CArma[playerid][14] = 0;
				SendClientMessage(playerid, -1, "{00DED3}* El grupo de armas del slot 3 han sido removidas correctamente. Escribe: /mis armas para seguir editando.");
			}
  		}
	}
	//Armas 1 - Slot 1
	if(dialogid == MENU_CARMAS_ELEGIR0S)
   	{
   	if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
   	new ArmaText[26], ArmaText2[26], ArmaText3[26], ArmaText4[26], ArmaText5[26];
	if(CArma[playerid][0] == 24) ArmaText = "{00ACFF}Desert Eagle";
	if(CArma[playerid][0] == 23) ArmaText = "{00ACFF}Silenciador 9mm";
	if(CArma[playerid][0] == 22) ArmaText = "{00ACFF}Pistola 9mm";
	if(CArma[playerid][0] == 0) ArmaText = "{FFFFFF}Vacío";
	if(CArma[playerid][1] == 25) ArmaText2 = "{00ACFF}Shotgun";
	if(CArma[playerid][1] == 26) ArmaText2 = "{00ACFF}Recortada";
	if(CArma[playerid][1] == 27) ArmaText2 = "{00ACFF}Shotgun combate";
	if(CArma[playerid][1] == 0) ArmaText2 = "{FFFFFF}Vacío";
	if(CArma[playerid][2] == 28) ArmaText3 = "{00ACFF}UZI";
	if(CArma[playerid][2] == 29) ArmaText3 = "{00ACFF}MP5";
	if(CArma[playerid][2] == 32) ArmaText3 = "{00ACFF}TEC-9";
	if(CArma[playerid][2] == 0) ArmaText3 = "{FFFFFF}Vacío";
	if(CArma[playerid][3] == 31) ArmaText4 = "{00ACFF}M4";
	if(CArma[playerid][3] == 30) ArmaText4 = "{00ACFF}AK-47";
	if(CArma[playerid][3] == 0) ArmaText4 = "{FFFFFF}Vacío";
	if(CArma[playerid][4] == 33) ArmaText5 = "{00ACFF}Rifle";
	if(CArma[playerid][4] == 34) ArmaText5 = "{00ACFF}Sniper";
	if(CArma[playerid][4] == 0) ArmaText5 = "{FFFFFF}Vacío";
   	switch(listitem)
   	{
			case 0:
			{
  				CArma[playerid][0] = 24;
	    		GivePlayerWeapon(playerid, 24, 3500);
                MensajeArmaEditada(playerid, "Desert Eagle");
	    		format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
				ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR0, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 1:", string, "Aceptar", "Cancelar");
			}
			case 1:
			{
				CArma[playerid][0] = 23;
   				GivePlayerWeapon(playerid, 23, 3500);
   				MensajeArmaEditada(playerid, "Silenciadora 9mm");
   				format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
				ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR0, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 1:", string, "Aceptar", "Cancelar");
			}
			case 2:
			{

   				CArma[playerid][0] = 22;
		    	GivePlayerWeapon(playerid, 22, 3500);
		    	MensajeArmaEditada(playerid, "Pistola 9mm");
		    	format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
				ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR0, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 1:", string, "Aceptar", "Cancelar");
			}
			case 3:
			{
				format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
				ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR0, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 1:", string, "Aceptar", "Cancelar");
			}
  		}
	}


	//Armas 2 - Slot 1
	if(dialogid == MENU_CARMAS_ELEGIR1S)
   	{
   	if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
   	new ArmaText[26], ArmaText2[26], ArmaText3[26], ArmaText4[26], ArmaText5[26];
	if(CArma[playerid][0] == 24) ArmaText = "{00ACFF}Desert Eagle";
	if(CArma[playerid][0] == 23) ArmaText = "{00ACFF}Silenciador 9mm";
	if(CArma[playerid][0] == 22) ArmaText = "{00ACFF}Pistola 9mm";
	if(CArma[playerid][0] == 0) ArmaText = "{FFFFFF}Vacío";
	if(CArma[playerid][1] == 25) ArmaText2 = "{00ACFF}Shotgun";
	if(CArma[playerid][1] == 26) ArmaText2 = "{00ACFF}Recortada";
	if(CArma[playerid][1] == 27) ArmaText2 = "{00ACFF}Shotgun combate";
	if(CArma[playerid][1] == 0) ArmaText2 = "{FFFFFF}Vacío";
	if(CArma[playerid][2] == 28) ArmaText3 = "{00ACFF}UZI";
	if(CArma[playerid][2] == 29) ArmaText3 = "{00ACFF}MP5";
	if(CArma[playerid][2] == 32) ArmaText3 = "{00ACFF}TEC-9";
	if(CArma[playerid][2] == 0) ArmaText3 = "{FFFFFF}Vacío";
	if(CArma[playerid][3] == 31) ArmaText4 = "{00ACFF}M4";
	if(CArma[playerid][3] == 30) ArmaText4 = "{00ACFF}AK-47";
	if(CArma[playerid][3] == 0) ArmaText4 = "{FFFFFF}Vacío";
	if(CArma[playerid][4] == 33) ArmaText5 = "{00ACFF}Rifle";
	if(CArma[playerid][4] == 34) ArmaText5 = "{00ACFF}Sniper";
	if(CArma[playerid][4] == 0) ArmaText5 = "{FFFFFF}Vacío";
   	switch(listitem)
   	{
			case 0:
			{
			    	CArma[playerid][1] = 25;
			    	GivePlayerWeapon(playerid, 25, 3500);
			    	MensajeArmaEditada(playerid, "Shotgun");
					format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
					ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR0, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 1:", string, "Aceptar", "Cancelar");
			}
			case 1:
			{
			    	CArma[playerid][1] = 26;
			    	GivePlayerWeapon(playerid, 26, 3500);
			    	MensajeArmaEditada(playerid, "Recortada");
					format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
					ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR0, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 1:", string, "Aceptar", "Cancelar");
			}
			case 2:
			{
			    	CArma[playerid][1] = 27;
			    	GivePlayerWeapon(playerid, 27, 3500);
			    	MensajeArmaEditada(playerid, "Shotgun Combat");
					format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
					ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR0, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 1:", string, "Aceptar", "Cancelar");
			}
			case 3:
			{
				format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
				ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR0, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 1:", string, "Aceptar", "Cancelar");
			}
  		}
	}

	//Armas 3 - Slot 1
	if(dialogid == MENU_CARMAS_ELEGIR2S)
   	{
   	if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
   	new ArmaText[26], ArmaText2[26], ArmaText3[26], ArmaText4[26], ArmaText5[26];
	if(CArma[playerid][0] == 24) ArmaText = "{00ACFF}Desert Eagle";
	if(CArma[playerid][0] == 23) ArmaText = "{00ACFF}Silenciador 9mm";
	if(CArma[playerid][0] == 22) ArmaText = "{00ACFF}Pistola 9mm";
	if(CArma[playerid][0] == 0) ArmaText = "{FFFFFF}Vacío";
	if(CArma[playerid][1] == 25) ArmaText2 = "{00ACFF}Shotgun";
	if(CArma[playerid][1] == 26) ArmaText2 = "{00ACFF}Recortada";
	if(CArma[playerid][1] == 27) ArmaText2 = "{00ACFF}Shotgun combate";
	if(CArma[playerid][1] == 0) ArmaText2 = "{FFFFFF}Vacío";
	if(CArma[playerid][2] == 28) ArmaText3 = "{00ACFF}UZI";
	if(CArma[playerid][2] == 29) ArmaText3 = "{00ACFF}MP5";
	if(CArma[playerid][2] == 32) ArmaText3 = "{00ACFF}TEC-9";
	if(CArma[playerid][2] == 0) ArmaText3 = "{FFFFFF}Vacío";
	if(CArma[playerid][3] == 31) ArmaText4 = "{00ACFF}M4";
	if(CArma[playerid][3] == 30) ArmaText4 = "{00ACFF}AK-47";
	if(CArma[playerid][3] == 0) ArmaText4 = "{FFFFFF}Vacío";
	if(CArma[playerid][4] == 33) ArmaText5 = "{00ACFF}Rifle";
	if(CArma[playerid][4] == 34) ArmaText5 = "{00ACFF}Sniper";
	if(CArma[playerid][4] == 0) ArmaText5 = "{FFFFFF}Vacío";
   	switch(listitem)
   	{
			case 0:
			{
			    	CArma[playerid][2] = 28;
			    	GivePlayerWeapon(playerid, 28, 1250);
			    	MensajeArmaEditada(playerid, "UZI");
					format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
					ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR0, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 1:", string, "Aceptar", "Cancelar");
			}
			case 1:
			{
			    	CArma[playerid][2] = 29;
			    	GivePlayerWeapon(playerid, 29, 1250);
			    	MensajeArmaEditada(playerid, "MP5");
					format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
					ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR0, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 1:", string, "Aceptar", "Cancelar");
			}
			case 2:
			{
			    	CArma[playerid][2] = 32;
			    	GivePlayerWeapon(playerid, 32, 1250);
			    	MensajeArmaEditada(playerid, "TEC-9");
					format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
					ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR0, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 1:", string, "Aceptar", "Cancelar");
			}
			case 3:
			{
				format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
				ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR0, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 1:", string, "Aceptar", "Cancelar");
			}
  		}
	}

	//Armas 4 - Slot 1
	if(dialogid == MENU_CARMAS_ELEGIR3S)
   	{
   	if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
   	new ArmaText[26], ArmaText2[26], ArmaText3[26], ArmaText4[26], ArmaText5[26];
	if(CArma[playerid][0] == 24) ArmaText = "{00ACFF}Desert Eagle";
	if(CArma[playerid][0] == 23) ArmaText = "{00ACFF}Silenciador 9mm";
	if(CArma[playerid][0] == 22) ArmaText = "{00ACFF}Pistola 9mm";
	if(CArma[playerid][0] == 0) ArmaText = "{FFFFFF}Vacío";
	if(CArma[playerid][1] == 25) ArmaText2 = "{00ACFF}Shotgun";
	if(CArma[playerid][1] == 26) ArmaText2 = "{00ACFF}Recortada";
	if(CArma[playerid][1] == 27) ArmaText2 = "{00ACFF}Shotgun combate";
	if(CArma[playerid][1] == 0) ArmaText2 = "{FFFFFF}Vacío";
	if(CArma[playerid][2] == 28) ArmaText3 = "{00ACFF}UZI";
	if(CArma[playerid][2] == 29) ArmaText3 = "{00ACFF}MP5";
	if(CArma[playerid][2] == 32) ArmaText3 = "{00ACFF}TEC-9";
	if(CArma[playerid][2] == 0) ArmaText3 = "{FFFFFF}Vacío";
	if(CArma[playerid][3] == 31) ArmaText4 = "{00ACFF}M4";
	if(CArma[playerid][3] == 30) ArmaText4 = "{00ACFF}AK-47";
	if(CArma[playerid][3] == 0) ArmaText4 = "{FFFFFF}Vacío";
	if(CArma[playerid][4] == 33) ArmaText5 = "{00ACFF}Rifle";
	if(CArma[playerid][4] == 34) ArmaText5 = "{00ACFF}Sniper";
	if(CArma[playerid][4] == 0) ArmaText5 = "{FFFFFF}Vacío";
   	switch(listitem)
   	{
			case 0:
			{
			    	CArma[playerid][3] = 31;
			    	GivePlayerWeapon(playerid, 31, 1500);
			    	MensajeArmaEditada(playerid, "M4");
					format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
					ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR0, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 1:", string, "Aceptar", "Cancelar");
			}
			case 1:
			{
			    	CArma[playerid][3] = 30;
			    	GivePlayerWeapon(playerid, 30, 1500);
			    	MensajeArmaEditada(playerid, "AK-47");
					format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
					ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR0, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 1:", string, "Aceptar", "Cancelar");
			}
			case 2:
			{
				format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
				ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR0, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 1:", string, "Aceptar", "Cancelar");
			}
  		}
	}

		//Armas 5 - Slot 1
	if(dialogid == MENU_CARMAS_ELEGIR4S)
   	{
   	if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
   	new ArmaText[26], ArmaText2[26], ArmaText3[26], ArmaText4[26], ArmaText5[26];
	if(CArma[playerid][0] == 24) ArmaText = "{00ACFF}Desert Eagle";
	if(CArma[playerid][0] == 23) ArmaText = "{00ACFF}Silenciador 9mm";
	if(CArma[playerid][0] == 22) ArmaText = "{00ACFF}Pistola 9mm";
	if(CArma[playerid][0] == 0) ArmaText = "{FFFFFF}Vacío";
	if(CArma[playerid][1] == 25) ArmaText2 = "{00ACFF}Shotgun";
	if(CArma[playerid][1] == 26) ArmaText2 = "{00ACFF}Recortada";
	if(CArma[playerid][1] == 27) ArmaText2 = "{00ACFF}Shotgun combate";
	if(CArma[playerid][1] == 0) ArmaText2 = "{FFFFFF}Vacío";
	if(CArma[playerid][2] == 28) ArmaText3 = "{00ACFF}UZI";
	if(CArma[playerid][2] == 29) ArmaText3 = "{00ACFF}MP5";
	if(CArma[playerid][2] == 32) ArmaText3 = "{00ACFF}TEC-9";
	if(CArma[playerid][2] == 0) ArmaText3 = "{FFFFFF}Vacío";
	if(CArma[playerid][3] == 31) ArmaText4 = "{00ACFF}M4";
	if(CArma[playerid][3] == 30) ArmaText4 = "{00ACFF}AK-47";
	if(CArma[playerid][3] == 0) ArmaText4 = "{FFFFFF}Vacío";
	if(CArma[playerid][4] == 33) ArmaText5 = "{00ACFF}Rifle";
	if(CArma[playerid][4] == 34) ArmaText5 = "{00ACFF}Sniper";
	if(CArma[playerid][4] == 0) ArmaText5 = "{FFFFFF}Vacío";
   	switch(listitem)
   	{
			case 0:
			{
			    	CArma[playerid][4] = 33;
			    	GivePlayerWeapon(playerid, 33, 2100);
			    	MensajeArmaEditada(playerid, "Rifle");
					format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
					ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR0, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 1:", string, "Aceptar", "Cancelar");
			}
			case 1:
			{
			    	CArma[playerid][4] = 34;
			    	GivePlayerWeapon(playerid, 34, 250);
			    	MensajeArmaEditada(playerid, "Sniper Rifle");
					format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
					ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR0, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 1:", string, "Aceptar", "Cancelar");
			}
			case 2:
			{
				format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
				ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR0, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 1:", string, "Aceptar", "Cancelar");
			}
  		}
	}

	if(dialogid == 2026)
    {
		if (response == 1)
		{
		    new ArmaText[26], ArmaText2[26], ArmaText3[26], ArmaText4[26], ArmaText5[26];
   				if(CArma[playerid][0] == 24) ArmaText = "{00ACFF}Desert Eagle";
	   		if(CArma[playerid][0] == 23) ArmaText = "{00ACFF}Silenciador 9mm";
    		if(CArma[playerid][0] == 22) ArmaText = "{00ACFF}Pistola 9mm";
    		if(CArma[playerid][0] == 0) ArmaText = "{FFFFFF}Vacío";
    		if(CArma[playerid][1] == 25) ArmaText2 = "{00ACFF}Shotgun";
 			if(CArma[playerid][1] == 26) ArmaText2 = "{00ACFF}Recortada";
    		if(CArma[playerid][1] == 27) ArmaText2 = "{00ACFF}Shotgun combate";
    		if(CArma[playerid][1] == 0) ArmaText2 = "{FFFFFF}Vacío";
    		if(CArma[playerid][2] == 28) ArmaText3 = "{00ACFF}UZI";
 			if(CArma[playerid][2] == 29) ArmaText3 = "{00ACFF}MP5";
    		if(CArma[playerid][2] == 32) ArmaText3 = "{00ACFF}TEC-9";
    		if(CArma[playerid][2] == 0) ArmaText3 = "{FFFFFF}Vacío";
			if(CArma[playerid][3] == 31) ArmaText4 = "{00ACFF}M4";
    		if(CArma[playerid][3] == 30) ArmaText4 = "{00ACFF}AK-47";
    		if(CArma[playerid][3] == 0) ArmaText4 = "{FFFFFF}Vacío";
    		if(CArma[playerid][4] == 33) ArmaText5 = "{00ACFF}Rifle";
    		if(CArma[playerid][4] == 34) ArmaText5 = "{00ACFF}Sniper";
    		if(CArma[playerid][4] == 0) ArmaText5 = "{FFFFFF}Vacío";
		    format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
			ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR0, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 1:", string, "Aceptar", "Cancelar");
		}
	}

	//CARMAS 2 - Slot 2
	//Armas 1 - Slot 2
	if(dialogid == MENU_CARMAS_ELEGIR5S)
   	{
   	if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
    new ArmaText[26], ArmaText2[26], ArmaText3[26], ArmaText4[26], ArmaText5[26];
	if(CArma[playerid][5] == 24) ArmaText = "{00ACFF}Desert Eagle";
	if(CArma[playerid][5] == 23) ArmaText = "{00ACFF}Silenciador 9mm";
	if(CArma[playerid][5] == 22) ArmaText = "{00ACFF}Pistola 9mm";
	if(CArma[playerid][5] == 0) ArmaText = "{FFFFFF}Vacío";
	if(CArma[playerid][6] == 25) ArmaText2 = "{00ACFF}Shotgun";
	if(CArma[playerid][6] == 26) ArmaText2 = "{00ACFF}Recortada";
	if(CArma[playerid][6] == 27) ArmaText2 = "{00ACFF}Shotgun combate";
	if(CArma[playerid][6] == 0) ArmaText2 = "{FFFFFF}Vacío";
	if(CArma[playerid][7] == 28) ArmaText3 = "{00ACFF}UZI";
	if(CArma[playerid][7] == 29) ArmaText3 = "{00ACFF}MP5";
	if(CArma[playerid][7] == 32) ArmaText3 = "{00ACFF}TEC-9";
	if(CArma[playerid][7] == 0) ArmaText3 = "{FFFFFF}Vacío";
	if(CArma[playerid][8] == 31) ArmaText4 = "{00ACFF}M4";
	if(CArma[playerid][8] == 30) ArmaText4 = "{00ACFF}AK-47";
	if(CArma[playerid][8] == 0) ArmaText4 = "{FFFFFF}Vacío";
	if(CArma[playerid][9] == 33) ArmaText5 = "{00ACFF}Rifle";
	if(CArma[playerid][9] == 34) ArmaText5 = "{00ACFF}Sniper";
	if(CArma[playerid][9] == 0) ArmaText5 = "{FFFFFF}Vacío";
   	switch(listitem)
   	{
			case 0:
			{
			    	CArma[playerid][5] = 24;
			    	GivePlayerWeapon(playerid, 24, 3500);
			    	MensajeArmaEditada(playerid, "Desert Eagle");
					format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
					ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR1, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 2:", string, "Aceptar", "Cancelar");
			}
			case 1:
			{
			    	CArma[playerid][5] = 23;
			    	GivePlayerWeapon(playerid, 23, 3500);
			    	MensajeArmaEditada(playerid, "Silenciadora 9mm");
					format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
					ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR1, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 2:", string, "Aceptar", "Cancelar");
			}
			case 2:
			{
			    	CArma[playerid][5] = 22;
			    	GivePlayerWeapon(playerid, 22, 3500);
			    	MensajeArmaEditada(playerid, "Pistola 9mm");
					format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
					ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR1, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 2:", string, "Aceptar", "Cancelar");
			}
			case 3:
			{
				format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
				ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR1, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 2:", string, "Aceptar", "Cancelar");
			}
  		}
	}

	//Armas 2 - Slot 2
	if(dialogid == MENU_CARMAS_ELEGIR6S)
   	{
   	if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
   	new ArmaText[26], ArmaText2[26], ArmaText3[26], ArmaText4[26], ArmaText5[26];
	if(CArma[playerid][5] == 24) ArmaText = "{00ACFF}Desert Eagle";
	if(CArma[playerid][5] == 23) ArmaText = "{00ACFF}Silenciador 9mm";
	if(CArma[playerid][5] == 22) ArmaText = "{00ACFF}Pistola 9mm";
	if(CArma[playerid][5] == 0) ArmaText = "{FFFFFF}Vacío";
	if(CArma[playerid][6] == 25) ArmaText2 = "{00ACFF}Shotgun";
	if(CArma[playerid][6] == 26) ArmaText2 = "{00ACFF}Recortada";
	if(CArma[playerid][6] == 27) ArmaText2 = "{00ACFF}Shotgun combate";
	if(CArma[playerid][6] == 0) ArmaText2 = "{FFFFFF}Vacío";
	if(CArma[playerid][7] == 28) ArmaText3 = "{00ACFF}UZI";
	if(CArma[playerid][7] == 29) ArmaText3 = "{00ACFF}MP5";
	if(CArma[playerid][7] == 32) ArmaText3 = "{00ACFF}TEC-9";
	if(CArma[playerid][7] == 0) ArmaText3 = "{FFFFFF}Vacío";
	if(CArma[playerid][8] == 31) ArmaText4 = "{00ACFF}M4";
	if(CArma[playerid][8] == 30) ArmaText4 = "{00ACFF}AK-47";
	if(CArma[playerid][8] == 0) ArmaText4 = "{FFFFFF}Vacío";
	if(CArma[playerid][9] == 33) ArmaText5 = "{00ACFF}Rifle";
	if(CArma[playerid][9] == 34) ArmaText5 = "{00ACFF}Sniper";
	if(CArma[playerid][9] == 0) ArmaText5 = "{FFFFFF}Vacío";
   	switch(listitem)
   	{
			case 0:
			{
			    	CArma[playerid][6] = 25;
			    	GivePlayerWeapon(playerid, 25, 3500);
			    	MensajeArmaEditada(playerid, "Shotgun");
					format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
					ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR1, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 2:", string, "Aceptar", "Cancelar");
			}
			case 1:
			{
			    	CArma[playerid][6] = 26;
			    	GivePlayerWeapon(playerid, 26, 3500);
			    	MensajeArmaEditada(playerid, "Recortada");
					format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
					ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR1, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 2:", string, "Aceptar", "Cancelar");
			}
			case 2:
			{
			    	CArma[playerid][6] = 27;
			    	GivePlayerWeapon(playerid, 27, 3500);
			    	MensajeArmaEditada(playerid, "Shotgun Combat");
					format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
					ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR1, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 2:", string, "Aceptar", "Cancelar");
			}
			case 3:
			{
				format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
				ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR1, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 2:", string, "Aceptar", "Cancelar");
			}
  		}
	}

	//Armas 3 - Slot 2
	if(dialogid == MENU_CARMAS_ELEGIR7S)
   	{
   	if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
   	new ArmaText[26], ArmaText2[26], ArmaText3[26], ArmaText4[26], ArmaText5[26];
	if(CArma[playerid][5] == 24) ArmaText = "{00ACFF}Desert Eagle";
	if(CArma[playerid][5] == 23) ArmaText = "{00ACFF}Silenciador 9mm";
	if(CArma[playerid][5] == 22) ArmaText = "{00ACFF}Pistola 9mm";
	if(CArma[playerid][5] == 0) ArmaText = "{FFFFFF}Vacío";
	if(CArma[playerid][6] == 25) ArmaText2 = "{00ACFF}Shotgun";
	if(CArma[playerid][6] == 26) ArmaText2 = "{00ACFF}Recortada";
	if(CArma[playerid][6] == 27) ArmaText2 = "{00ACFF}Shotgun combate";
	if(CArma[playerid][6] == 0) ArmaText2 = "{FFFFFF}Vacío";
	if(CArma[playerid][7] == 28) ArmaText3 = "{00ACFF}UZI";
	if(CArma[playerid][7] == 29) ArmaText3 = "{00ACFF}MP5";
	if(CArma[playerid][7] == 32) ArmaText3 = "{00ACFF}TEC-9";
	if(CArma[playerid][7] == 0) ArmaText3 = "{FFFFFF}Vacío";
	if(CArma[playerid][8] == 31) ArmaText4 = "{00ACFF}M4";
	if(CArma[playerid][8] == 30) ArmaText4 = "{00ACFF}AK-47";
	if(CArma[playerid][8] == 0) ArmaText4 = "{FFFFFF}Vacío";
	if(CArma[playerid][9] == 33) ArmaText5 = "{00ACFF}Rifle";
	if(CArma[playerid][9] == 34) ArmaText5 = "{00ACFF}Sniper";
	if(CArma[playerid][9] == 0) ArmaText5 = "{FFFFFF}Vacío";
   	switch(listitem)
   	{
			case 0:
			{
			    	CArma[playerid][7] = 28;
			    	GivePlayerWeapon(playerid, 28, 1250);
			    	MensajeArmaEditada(playerid, "UZI");
					format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
					ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR1, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 2:", string, "Aceptar", "Cancelar");
			}
			case 1:
			{
			    	CArma[playerid][7] = 29;
			    	GivePlayerWeapon(playerid, 29, 1250);
			    	MensajeArmaEditada(playerid, "MP5");
					format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
					ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR1, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 2:", string, "Aceptar", "Cancelar");
			}
			case 2:
			{
			    	CArma[playerid][7] = 32;
			    	GivePlayerWeapon(playerid, 32, 1250);
			    	MensajeArmaEditada(playerid, "TEC-9");
					format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
					ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR1, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 2:", string, "Aceptar", "Cancelar");
			}
			case 3:
			{
				format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
				ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR1, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 2:", string, "Aceptar", "Cancelar");
			}
  		}
	}


	//Armas 4 - Slot 2
	if(dialogid == MENU_CARMAS_ELEGIR8S)
   	{
   	if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
   	new ArmaText[26], ArmaText2[26], ArmaText3[26], ArmaText4[26], ArmaText5[26];
	if(CArma[playerid][5] == 24) ArmaText = "{00ACFF}Desert Eagle";
	if(CArma[playerid][5] == 23) ArmaText = "{00ACFF}Silenciador 9mm";
	if(CArma[playerid][5] == 22) ArmaText = "{00ACFF}Pistola 9mm";
	if(CArma[playerid][5] == 0) ArmaText = "{FFFFFF}Vacío";
	if(CArma[playerid][6] == 25) ArmaText2 = "{00ACFF}Shotgun";
	if(CArma[playerid][6] == 26) ArmaText2 = "{00ACFF}Recortada";
	if(CArma[playerid][6] == 27) ArmaText2 = "{00ACFF}Shotgun combate";
	if(CArma[playerid][6] == 0) ArmaText2 = "{FFFFFF}Vacío";
	if(CArma[playerid][7] == 28) ArmaText3 = "{00ACFF}UZI";
	if(CArma[playerid][7] == 29) ArmaText3 = "{00ACFF}MP5";
	if(CArma[playerid][7] == 32) ArmaText3 = "{00ACFF}TEC-9";
	if(CArma[playerid][7] == 0) ArmaText3 = "{FFFFFF}Vacío";
	if(CArma[playerid][8] == 31) ArmaText4 = "{00ACFF}M4";
	if(CArma[playerid][8] == 30) ArmaText4 = "{00ACFF}AK-47";
	if(CArma[playerid][8] == 0) ArmaText4 = "{FFFFFF}Vacío";
	if(CArma[playerid][9] == 33) ArmaText5 = "{00ACFF}Rifle";
	if(CArma[playerid][9] == 34) ArmaText5 = "{00ACFF}Sniper";
	if(CArma[playerid][9] == 0) ArmaText5 = "{FFFFFF}Vacío";
   	switch(listitem)
   	{
			case 0:
			{
			    	CArma[playerid][8] = 31;
			    	GivePlayerWeapon(playerid, 31, 1500);
			    	MensajeArmaEditada(playerid, "M4");
					format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
					ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR1, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 2:", string, "Aceptar", "Cancelar");
			}
			case 1:
			{
			    	CArma[playerid][8] = 30;
			    	GivePlayerWeapon(playerid, 30, 1500);
			    	MensajeArmaEditada(playerid, "AK-47");
					format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
					ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR1, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 2:", string, "Aceptar", "Cancelar");
			}
			case 2:
			{
				format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
				ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR1, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 2:", string, "Aceptar", "Cancelar");
			}
  		}
	}

		//Armas 5 - Slot 2
	if(dialogid == MENU_CARMAS_ELEGIR9S)
   	{
   	if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
   	new ArmaText[26], ArmaText2[26], ArmaText3[26], ArmaText4[26], ArmaText5[26];
	if(CArma[playerid][5] == 24) ArmaText = "{00ACFF}Desert Eagle";
	if(CArma[playerid][5] == 23) ArmaText = "{00ACFF}Silenciador 9mm";
	if(CArma[playerid][5] == 22) ArmaText = "{00ACFF}Pistola 9mm";
	if(CArma[playerid][5] == 0) ArmaText = "{FFFFFF}Vacío";
	if(CArma[playerid][6] == 25) ArmaText2 = "{00ACFF}Shotgun";
	if(CArma[playerid][6] == 26) ArmaText2 = "{00ACFF}Recortada";
	if(CArma[playerid][6] == 27) ArmaText2 = "{00ACFF}Shotgun combate";
	if(CArma[playerid][6] == 0) ArmaText2 = "{FFFFFF}Vacío";
	if(CArma[playerid][7] == 28) ArmaText3 = "{00ACFF}UZI";
	if(CArma[playerid][7] == 29) ArmaText3 = "{00ACFF}MP5";
	if(CArma[playerid][7] == 32) ArmaText3 = "{00ACFF}TEC-9";
	if(CArma[playerid][7] == 0) ArmaText3 = "{FFFFFF}Vacío";
	if(CArma[playerid][8] == 31) ArmaText4 = "{00ACFF}M4";
	if(CArma[playerid][8] == 30) ArmaText4 = "{00ACFF}AK-47";
	if(CArma[playerid][8] == 0) ArmaText4 = "{FFFFFF}Vacío";
	if(CArma[playerid][9] == 33) ArmaText5 = "{00ACFF}Rifle";
	if(CArma[playerid][9] == 34) ArmaText5 = "{00ACFF}Sniper";
	if(CArma[playerid][9] == 0) ArmaText5 = "{FFFFFF}Vacío";
   	switch(listitem)
   	{
			case 0:
			{
			    	CArma[playerid][9] = 33;
			    	GivePlayerWeapon(playerid, 33, 1100);
			    	MensajeArmaEditada(playerid, "Rigle");
					format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
					ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR1, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 2:", string, "Aceptar", "Cancelar");
			}
			case 1:
			{
			    	CArma[playerid][9] = 34;
			    	GivePlayerWeapon(playerid, 34, 250);
			    	MensajeArmaEditada(playerid, "Sniper Rifle");
					format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
					ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR1, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 2:", string, "Aceptar", "Cancelar");
			}
			case 2:
			{
				format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
				ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR1, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 2:", string, "Aceptar", "Cancelar");
			}
  		}
	}

	if(dialogid == 2027)
    {
		if (response == 1)
		{
			new ArmaText[26], ArmaText2[26], ArmaText3[26], ArmaText4[26], ArmaText5[26];
			if(CArma[playerid][5] == 24) ArmaText = "{00ACFF}Desert Eagle";
			if(CArma[playerid][5] == 23) ArmaText = "{00ACFF}Silenciador 9mm";
			if(CArma[playerid][5] == 22) ArmaText = "{00ACFF}Pistola 9mm";
			if(CArma[playerid][5] == 0) ArmaText = "{FFFFFF}Vacío";
			if(CArma[playerid][6] == 25) ArmaText2 = "{00ACFF}Shotgun";
			if(CArma[playerid][6] == 26) ArmaText2 = "{00ACFF}Recortada";
			if(CArma[playerid][6] == 27) ArmaText2 = "{00ACFF}Shotgun combate";
			if(CArma[playerid][6] == 0) ArmaText2 = "{FFFFFF}Vacío";
			if(CArma[playerid][7] == 28) ArmaText3 = "{00ACFF}UZI";
			if(CArma[playerid][7] == 29) ArmaText3 = "{00ACFF}MP5";
			if(CArma[playerid][7] == 32) ArmaText3 = "{00ACFF}TEC-9";
			if(CArma[playerid][7] == 0) ArmaText3 = "{FFFFFF}Vacío";
			if(CArma[playerid][8] == 31) ArmaText4 = "{00ACFF}M4";
			if(CArma[playerid][8] == 30) ArmaText4 = "{00ACFF}AK-47";
			if(CArma[playerid][8] == 0) ArmaText4 = "{FFFFFF}Vacío";
			if(CArma[playerid][9] == 33) ArmaText5 = "{00ACFF}Rifle";
			if(CArma[playerid][9] == 34) ArmaText5 = "{00ACFF}Sniper";
			if(CArma[playerid][9] == 0) ArmaText5 = "{FFFFFF}Vacío";
			if(CArma[playerid][8] == 0) ArmaText4 = "{FFFFFF}Vacío";
			if(CArma[playerid][9] == 33) ArmaText5 = "{00ACFF}Rifle";
			if(CArma[playerid][9] == 34) ArmaText5 = "{00ACFF}Sniper";
			if(CArma[playerid][9] == 0) ArmaText5 = "{FFFFFF}Vacío";
		    format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
			ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR1, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 2:", string, "Aceptar", "Cancelar");
		}
	}

	//Equipación 3
	//Armas 1 - Slot 3
	if(dialogid == MENU_CARMAS_ELEGIR10S)
   	{
   	if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
    new ArmaText[26], ArmaText2[26], ArmaText3[26], ArmaText4[26], ArmaText5[26];
	if(CArma[playerid][10] == 24) ArmaText = "{00ACFF}Desert Eagle";
	if(CArma[playerid][10] == 23) ArmaText = "{00ACFF}Silenciador 9mm";
	if(CArma[playerid][10] == 22) ArmaText = "{00ACFF}Pistola 9mm";
	if(CArma[playerid][10] == 0) ArmaText = "{FFFFFF}Vacío";
	if(CArma[playerid][11] == 25) ArmaText2 = "{00ACFF}Shotgun";
	if(CArma[playerid][11] == 26) ArmaText2 = "{00ACFF}Recortada";
	if(CArma[playerid][11] == 27) ArmaText2 = "{00ACFF}Shotgun combate";
	if(CArma[playerid][11] == 0) ArmaText2 = "{FFFFFF}Vacío";
	if(CArma[playerid][12] == 28) ArmaText3 = "{00ACFF}UZI";
	if(CArma[playerid][12] == 29) ArmaText3 = "{00ACFF}MP5";
	if(CArma[playerid][12] == 32) ArmaText3 = "{00ACFF}TEC-9";
	if(CArma[playerid][12] == 0) ArmaText3 = "{FFFFFF}Vacío";
	if(CArma[playerid][13] == 31) ArmaText4 = "{00ACFF}M4";
	if(CArma[playerid][13] == 30) ArmaText4 = "{00ACFF}AK-47";
	if(CArma[playerid][13] == 0) ArmaText4 = "{FFFFFF}Vacío";
	if(CArma[playerid][14] == 33) ArmaText5 = "{00ACFF}Rifle";
	if(CArma[playerid][14] == 34) ArmaText5 = "{00ACFF}Sniper";
	if(CArma[playerid][14] == 0) ArmaText5 = "{FFFFFF}Vacío";
   	switch(listitem)
   	{
			case 0:
   			{

			    	CArma[playerid][10] = 24;
			    	GivePlayerWeapon(playerid, 24, 3500);
			    	MensajeArmaEditada(playerid, "Desert Eagle");
					format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
					ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR2, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 3:", string, "Aceptar", "Cancelar");
			}
			case 1:
			{
			    	CArma[playerid][10] = 23;
			    	GivePlayerWeapon(playerid, 23, 3500);
			    	MensajeArmaEditada(playerid, "Silenciadora 9mm");
					format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
					ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR2, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 3:", string, "Aceptar", "Cancelar");
			}
			case 2:
			{

			    	CArma[playerid][10] = 22;
			    	GivePlayerWeapon(playerid, 22, 3500);
			    	MensajeArmaEditada(playerid, "Pistola 9mm");
					format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
					ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR2, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 3:", string, "Aceptar", "Cancelar");
			}
			case 3:
			{
				format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
				ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR2, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 3:", string, "Aceptar", "Cancelar");
			}
  		}
 	}

	//Armas 2 - Slot 3
	if(dialogid == MENU_CARMAS_ELEGIR11S)
   	{
   	if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
   	new ArmaText[26], ArmaText2[26], ArmaText3[26], ArmaText4[26], ArmaText5[26];
	if(CArma[playerid][10] == 24) ArmaText = "{00ACFF}Desert Eagle";
	if(CArma[playerid][10] == 23) ArmaText = "{00ACFF}Silenciador 9mm";
	if(CArma[playerid][10] == 22) ArmaText = "{00ACFF}Pistola 9mm";
	if(CArma[playerid][10] == 0) ArmaText = "{FFFFFF}Vacío";
	if(CArma[playerid][11] == 25) ArmaText2 = "{00ACFF}Shotgun";
	if(CArma[playerid][11] == 26) ArmaText2 = "{00ACFF}Recortada";
	if(CArma[playerid][11] == 27) ArmaText2 = "{00ACFF}Shotgun combate";
	if(CArma[playerid][11] == 0) ArmaText2 = "{FFFFFF}Vacío";
	if(CArma[playerid][12] == 28) ArmaText3 = "{00ACFF}UZI";
	if(CArma[playerid][12] == 29) ArmaText3 = "{00ACFF}MP5";
	if(CArma[playerid][12] == 32) ArmaText3 = "{00ACFF}TEC-9";
	if(CArma[playerid][12] == 0) ArmaText3 = "{FFFFFF}Vacío";
	if(CArma[playerid][13] == 31) ArmaText4 = "{00ACFF}M4";
	if(CArma[playerid][13] == 30) ArmaText4 = "{00ACFF}AK-47";
	if(CArma[playerid][13] == 0) ArmaText4 = "{FFFFFF}Vacío";
	if(CArma[playerid][14] == 33) ArmaText5 = "{00ACFF}Rifle";
	if(CArma[playerid][14] == 34) ArmaText5 = "{00ACFF}Sniper";
	if(CArma[playerid][14] == 0) ArmaText5 = "{FFFFFF}Vacío";
   	switch(listitem)
   	{
			case 0:
			{
			    	CArma[playerid][11] = 25;
			    	GivePlayerWeapon(playerid, 25, 3500);
			    	MensajeArmaEditada(playerid, "Shotgun");
					format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
					ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR2, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 3:", string, "Aceptar", "Cancelar");
			}
			case 1:
			{
			    	CArma[playerid][11] = 26;
			    	GivePlayerWeapon(playerid, 26, 3500);
			    	MensajeArmaEditada(playerid, "Recortada");
					format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
					ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR2, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 3:", string, "Aceptar", "Cancelar");
			}
			case 2:
			{
			    	CArma[playerid][11] = 27;
			    	GivePlayerWeapon(playerid, 27, 3500);
			    	MensajeArmaEditada(playerid, "Shotgun Combat");
					format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
					ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR2, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 3:", string, "Aceptar", "Cancelar");
			}
			case 3:
			{
				format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
				ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR2, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 3:", string, "Aceptar", "Cancelar");
			}
  		}
	}

	//Armas 3 - Slot 3
	if(dialogid == MENU_CARMAS_ELEGIR12S)
   	{
   	if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
   	new ArmaText[26], ArmaText2[26], ArmaText3[26], ArmaText4[26], ArmaText5[26];
	if(CArma[playerid][10] == 24) ArmaText = "{00ACFF}Desert Eagle";
	if(CArma[playerid][10] == 23) ArmaText = "{00ACFF}Silenciador 9mm";
	if(CArma[playerid][10] == 22) ArmaText = "{00ACFF}Pistola 9mm";
	if(CArma[playerid][10] == 0) ArmaText = "{FFFFFF}Vacío";
	if(CArma[playerid][11] == 25) ArmaText2 = "{00ACFF}Shotgun";
	if(CArma[playerid][11] == 26) ArmaText2 = "{00ACFF}Recortada";
	if(CArma[playerid][11] == 27) ArmaText2 = "{00ACFF}Shotgun combate";
	if(CArma[playerid][11] == 0) ArmaText2 = "{FFFFFF}Vacío";
	if(CArma[playerid][12] == 28) ArmaText3 = "{00ACFF}UZI";
	if(CArma[playerid][12] == 29) ArmaText3 = "{00ACFF}MP5";
	if(CArma[playerid][12] == 32) ArmaText3 = "{00ACFF}TEC-9";
	if(CArma[playerid][12] == 0) ArmaText3 = "{FFFFFF}Vacío";
	if(CArma[playerid][13] == 31) ArmaText4 = "{00ACFF}M4";
	if(CArma[playerid][13] == 30) ArmaText4 = "{00ACFF}AK-47";
	if(CArma[playerid][13] == 0) ArmaText4 = "{FFFFFF}Vacío";
	if(CArma[playerid][14] == 33) ArmaText5 = "{00ACFF}Rifle";
	if(CArma[playerid][14] == 34) ArmaText5 = "{00ACFF}Sniper";
	if(CArma[playerid][14] == 0) ArmaText5 = "{FFFFFF}Vacío";
   	switch(listitem)
   	{
			case 0:
			{
			    	CArma[playerid][12] = 28;
			    	GivePlayerWeapon(playerid, 28, 1250);
			    	MensajeArmaEditada(playerid, "UZI");
					format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
					ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR2, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 3:", string, "Aceptar", "Cancelar");
			}
			case 1:
			{
			    	CArma[playerid][12] = 29;
			    	GivePlayerWeapon(playerid, 29, 1250);
			    	MensajeArmaEditada(playerid, "MP5");
					format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
					ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR2, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 3:", string, "Aceptar", "Cancelar");
			}
			case 2:
			{
			    	CArma[playerid][12] = 32;
			    	GivePlayerWeapon(playerid, 32, 1250);
			    	MensajeArmaEditada(playerid, "AK-47");
					format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
					ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR2, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 3:", string, "Aceptar", "Cancelar");
			}
			case 3:
			{
				format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
				ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR2, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 3:", string, "Aceptar", "Cancelar");
			}
		}
	}

	//Armas 4 - Slot 3
	if(dialogid == MENU_CARMAS_ELEGIR13S)
   	{
   	if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
   	new ArmaText[26], ArmaText2[26], ArmaText3[26], ArmaText4[26], ArmaText5[26];
	if(CArma[playerid][10] == 24) ArmaText = "{00ACFF}Desert Eagle";
	if(CArma[playerid][10] == 23) ArmaText = "{00ACFF}Silenciador 9mm";
	if(CArma[playerid][10] == 22) ArmaText = "{00ACFF}Pistola 9mm";
	if(CArma[playerid][10] == 0) ArmaText = "{FFFFFF}Vacío";
	if(CArma[playerid][11] == 25) ArmaText2 = "{00ACFF}Shotgun";
	if(CArma[playerid][11] == 26) ArmaText2 = "{00ACFF}Recortada";
	if(CArma[playerid][11] == 27) ArmaText2 = "{00ACFF}Shotgun combate";
	if(CArma[playerid][11] == 0) ArmaText2 = "{FFFFFF}Vacío";
	if(CArma[playerid][12] == 28) ArmaText3 = "{00ACFF}UZI";
	if(CArma[playerid][12] == 29) ArmaText3 = "{00ACFF}MP5";
	if(CArma[playerid][12] == 32) ArmaText3 = "{00ACFF}TEC-9";
	if(CArma[playerid][12] == 0) ArmaText3 = "{FFFFFF}Vacío";
	if(CArma[playerid][13] == 31) ArmaText4 = "{00ACFF}M4";
	if(CArma[playerid][13] == 30) ArmaText4 = "{00ACFF}AK-47";
	if(CArma[playerid][13] == 0) ArmaText4 = "{FFFFFF}Vacío";
	if(CArma[playerid][14] == 33) ArmaText5 = "{00ACFF}Rifle";
	if(CArma[playerid][14] == 34) ArmaText5 = "{00ACFF}Sniper";
	if(CArma[playerid][14] == 0) ArmaText5 = "{FFFFFF}Vacío";
   	switch(listitem)
   	{
			case 0:
			{
			    	CArma[playerid][13] = 31;
			    	GivePlayerWeapon(playerid, 31, 1500);
			    	MensajeArmaEditada(playerid, "M4");
					format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
					ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR2, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 3:", string, "Aceptar", "Cancelar");
			}
			case 1:
			{

			    	CArma[playerid][13] = 30;
			    	GivePlayerWeapon(playerid, 30, 2500);
			    	MensajeArmaEditada(playerid, "AK-47");
					format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
					ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR2, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 3:", string, "Aceptar", "Cancelar");
			}
			case 2:
			{
				format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
				ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR2, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 3:", string, "Aceptar", "Cancelar");
			}
  		}
	}

		//Armas 5 - Slot 3
	if(dialogid == MENU_CARMAS_ELEGIR14S)
   	{
   	if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
   	new ArmaText[26], ArmaText2[26], ArmaText3[26], ArmaText4[26], ArmaText5[26];
	if(CArma[playerid][10] == 24) ArmaText = "{00ACFF}Desert Eagle";
	if(CArma[playerid][10] == 23) ArmaText = "{00ACFF}Silenciador 9mm";
	if(CArma[playerid][10] == 22) ArmaText = "{00ACFF}Pistola 9mm";
	if(CArma[playerid][10] == 0) ArmaText = "{FFFFFF}Vacío";
	if(CArma[playerid][11] == 25) ArmaText2 = "{00ACFF}Shotgun";
	if(CArma[playerid][11] == 26) ArmaText2 = "{00ACFF}Recortada";
	if(CArma[playerid][11] == 27) ArmaText2 = "{00ACFF}Shotgun combate";
	if(CArma[playerid][11] == 0) ArmaText2 = "{FFFFFF}Vacío";
	if(CArma[playerid][12] == 28) ArmaText3 = "{00ACFF}UZI";
	if(CArma[playerid][12] == 29) ArmaText3 = "{00ACFF}MP5";
	if(CArma[playerid][12] == 32) ArmaText3 = "{00ACFF}TEC-9";
	if(CArma[playerid][12] == 0) ArmaText3 = "{FFFFFF}Vacío";
	if(CArma[playerid][13] == 31) ArmaText4 = "{00ACFF}M4";
	if(CArma[playerid][13] == 30) ArmaText4 = "{00ACFF}AK-47";
	if(CArma[playerid][13] == 0) ArmaText4 = "{FFFFFF}Vacío";
	if(CArma[playerid][14] == 33) ArmaText5 = "{00ACFF}Rifle";
	if(CArma[playerid][14] == 34) ArmaText5 = "{00ACFF}Sniper";
	if(CArma[playerid][14] == 0) ArmaText5 = "{FFFFFF}Vacío";
   	switch(listitem)
   	{
			case 0:
			{
			    	CArma[playerid][14] = 33;
			    	GivePlayerWeapon(playerid, 33, 2100);
			    	MensajeArmaEditada(playerid, "Rifle");
					format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
					ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR2, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 3:", string, "Aceptar", "Cancelar");
			}
			case 1:
			{

			    	CArma[playerid][14] = 34;
			    	GivePlayerWeapon(playerid, 34, 250);
			    	MensajeArmaEditada(playerid, "Sniper Rifle");
					format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
					ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR2, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 3:", string, "Aceptar", "Cancelar");
			}
			case 2:
			{
				format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
				ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR2, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 3:", string, "Aceptar", "Cancelar");
			}
  		}
	}

	if(dialogid == 2028)
    {
		if (response == 1)
		{
		    new ArmaText[26], ArmaText2[26], ArmaText3[26], ArmaText4[26], ArmaText5[26];
			if(CArma[playerid][10] == 24) ArmaText = "{00ACFF}Desert Eagle";
			if(CArma[playerid][10] == 23) ArmaText = "{00ACFF}Silenciador 9mm";
			if(CArma[playerid][10] == 22) ArmaText = "{00ACFF}Pistola 9mm";
			if(CArma[playerid][10] == 0) ArmaText = "{FFFFFF}Vacío";
			if(CArma[playerid][11] == 25) ArmaText2 = "{00ACFF}Shotgun";
			if(CArma[playerid][11] == 26) ArmaText2 = "{00ACFF}Recortada";
			if(CArma[playerid][11] == 27) ArmaText2 = "{00ACFF}Shotgun combate";
			if(CArma[playerid][11] == 0) ArmaText2 = "{FFFFFF}Vacío";
			if(CArma[playerid][12] == 28) ArmaText3 = "{00ACFF}UZI";
			if(CArma[playerid][12] == 29) ArmaText3 = "{00ACFF}MP5";
			if(CArma[playerid][12] == 32) ArmaText3 = "{00ACFF}TEC-9";
			if(CArma[playerid][12] == 0) ArmaText3 = "{FFFFFF}Vacío";
			if(CArma[playerid][13] == 31) ArmaText4 = "{00ACFF}M4";
			if(CArma[playerid][13] == 30) ArmaText4 = "{00ACFF}AK-47";
			if(CArma[playerid][13] == 0) ArmaText4 = "{FFFFFF}Vacío";
			if(CArma[playerid][14] == 33) ArmaText5 = "{00ACFF}Rifle";
			if(CArma[playerid][14] == 34) ArmaText5 = "{00ACFF}Sniper";
			if(CArma[playerid][14] == 0) ArmaText5 = "{FFFFFF}Vacío";
		    format(string, sizeof(string), "Arma 1: %s\nArma 2: %s\nArma 3: %s\nArma 4: %s\nArma 5: %s\n{00ACFF}Vacíar Lista\n", ArmaText, ArmaText2, ArmaText3, ArmaText4, ArmaText5);
			ShowPlayerDialog(playerid, MENU_CARMAS_ELEGIR2, DIALOG_STYLE_LIST, "{00ACFF}Grupo de Armas 3:", string, "Aceptar", "Cancelar");
		}
	}
	//SISTEMA CLAN ADMINISTRAR(PENDIENTE).
	if(dialogid == CCSKIN)
	{
	    if(!response) return SendClientMessage(playerid, -1, "Se canceló la operación.");
     	{
	        new Archivo[64];
	        format(Archivo, sizeof Archivo, "Clanes/%s.ini", Clan_TAG[playerid]);
            if(dini_Exists(Archivo))
            {
                new tmp[53], idx, skinid;
				tmp = strtok(inputtext, idx);
				skinid = strval(tmp);
				dini_IntSet(Archivo, "SkinClan", skinid);
				for(new i = 0; i < MP; i++)
      			{
       				if(IsPlayerConnected(i))
         			{
          				if(Clan_ID[i] == Clan_ID[playerid])
          				{
             				SetPlayerSkin(i, skinid);
               			}
                	}
            	}
            }
			else return SendClientMessage(playerid, -1, "{009EFF}Se produjo un error en la operación. Intenta de nuevo.");
		}
	}
	if(dialogid == CCINVITACION)
    {
    	if(!response) return INVICANCELAR(playerid);
     	{
            new Archivo[64], stringxx[100];
           	format(Archivo, sizeof Archivo, "Clanes/%s.ini", Invitacion[playerid]);
            if(dini_Exists(Archivo))
            {
            	new IDMiembro = 1;

				if(dini_Int(Archivo, "Miembros") == 25) return SendClientMessage(playerid, -1, "{8FEB01}No puedes unirte porque el clan se ha llenado!");
   				dini_IntSet(Archivo, "Miembros", dini_Int(Archivo, "Miembros") + 1);
   				if(dini_Int(Archivo, "MiembrosMax") == MAX_PLAYERS_CLAN_MIEMBROS_SINRANGO) return SendClientMessage(playerid, -1, "{8FEB01}La invitación se canceló por máximo de miembros(sin rango) en el clan!");
      			while(IDMiembro < 22)
       			{
        			format(string, sizeof string, "Miembro_%d", IDMiembro);
         			if(!strcmp(dini_Get(Archivo, string), "<Vacío>", true))
          			{
           				dini_Set(Archivo, string, GetName(playerid));
             			break;
               			}
                			IDMiembro++;
                   		}
                     	format(Clan_TAG[playerid], 4, Invitacion[playerid]);
                     	strmid(Clan_Jugador[playerid], Invitacion[playerid], 0, 64, 64);
                     	RangoClan[playerid] = 1;
           				format(Archivo, sizeof Archivo, "Clanes/%s.ini", Clan_TAG[playerid]);
           				dini_IntSet(Archivo, "MiembrosMax", dini_Int(Archivo, "MiembrosMax") + 1);
           				SetPlayerColor(playerid, dini_Int(Archivo, "Color"));
             			format(string, sizeof string, "{FF5F00}Has aceptado la invitación del clan \"%s\" y te has unido!", dini_Get(Archivo, "Nombre"));
               			SendClientMessage(playerid, -1, string);
               			SendClientMessage(playerid, -1, "Ahora que eres miembro de un clan tienes comandos nuevos. Escribe: /clan [opción]!");
           				Clan_ID[playerid] = dini_Int(Archivo, "IDClan");
           				strmid(Clan_JugadorCompleto[playerid], dini_Get(Archivo, "Nombre"), 0, 22, 22);
               			format(string, sizeof string, "{FF5F00}* %s aceptó la invitación de clan y se ha unido!", GetName(playerid));
               			RangoTEXT[playerid] = "Miembro";
               			format(stringxx, sizeof(stringxx), "Clan: ~p~~h~%s~w~~h~.", dini_Get(Archivo, "Nombre"));
						ClanInfoTD(playerid, stringxx);
                  		for(new i = 0; i < MP; i++) {
                    	if(i == playerid || !IsPlayerConnected(i)) continue;
                     	if(Clan_ID[playerid] == Clan_ID[i]) SendClientMessage(i, -1, string);
                      	}
          					EnClan[playerid] = 1;
             			} else return SendClientMessage(playerid, -1, "{009EFF}El clan al que intentas entrar no existe");
              			return 1;
               		}
           		}
	//CLAN DIALOGS
 	if(dialogid == CCASCENDER)
	{
	    if(!response) return SendClientMessage(playerid, -1, "Se canceló la operación.");
     	{
     		if (!isnull(inputtext))
     		{
     			NoEnviarMensajeClan[playerid] = 0;
     	    	new Archivo[64];
    			format(Archivo, sizeof Archivo, "Clanes/%s.ini", Clan_TAG[playerid]);
    			for(new d = 1; d < MAX_PLAYERS_CLAN_MIEMBROS ; d++)
    			{
					format(string, sizeof string, "Miembro_%d", d);
					if(!strcmp(dini_Get(Archivo, string), inputtext, true))
					{
						strmid(NombreJugadorClan[playerid], inputtext, 0, 34, 34);
						NoEnviarMensajeClan[playerid] = 1;
						ShowPlayerDialog(playerid, CCASCENDERP2, DIALOG_STYLE_LIST, "{E9E200}Escoge el Rango:", "Presidente\nVicepresidente\nTesorero\nSecretario\nSgt.Armas\n", "Aceptar", "Cancelar");
					}
			    	else JugadorNoLocalizado(playerid);
	   			}
	   			return 1;
	   		}
	   		else ShowPlayerDialog(playerid, CCASCENDER, DIALOG_STYLE_INPUT, "{E9E200}Sistema de Clanes:", "{FFFFFF}Ingresa el {01A2FF}nombre{FFFFFF} del al que deseas ascender:", "Aceptar", "Cancelar");
		}
	}
	if(dialogid == CCASCENDER1)
	{
	    if(!response) return SendClientMessage(playerid, -1, "Se canceló la operación.");
     	{
     		if (!isnull(inputtext))
     		{
     			NoEnviarMensajeClan[playerid] = 0;
     	    	new Archivo[64];
    			format(Archivo, sizeof Archivo, "Clanes/%s.ini", Clan_TAG[playerid]);
    			for(new d = 1; d < MAX_PLAYERS_CLAN_MIEMBROS ; d++)
    			{
					format(string, sizeof string, "Miembro_%d", d);
					if(!strcmp(dini_Get(Archivo, string), inputtext, true))
					{
						strmid(NombreJugadorClan[playerid], inputtext, 0, 34, 34);
						NoEnviarMensajeClan[playerid] = 1;
						ShowPlayerDialog(playerid, CCASCENDERP3, DIALOG_STYLE_LIST, "{E9E200}Escoge el Rango:", "Vicepresidente\nTesorero\nSecretario\nSgt.Armas\n", "Aceptar", "Cancelar");
					}
			    	else JugadorNoLocalizado(playerid);
	   			}
	   			return 1;
	   		}
	   		else ShowPlayerDialog(playerid, CCASCENDER, DIALOG_STYLE_INPUT, "{E9E200}Sistema de Clanes:", "{FFFFFF}Ingresa el {01A2FF}nombre{FFFFFF} del al que deseas ascender:", "Aceptar", "Cancelar");
		}
	}
	if(dialogid == CCASCENDERP2)
   	{
   	if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
   	switch(listitem)
   	{
		case 0:
		{
			NoEnviarMensajeClan[playerid] = 0;
	        new Archivo[64];
	        new stringc[80];
    		format(Archivo, sizeof Archivo, "Clanes/%s.ini", Clan_TAG[playerid]);
    		for(new d = 1; d < MAX_PLAYERS_CLAN_MIEMBROS ; d++)
    		{
				format(string, sizeof string, "Miembro_%d", d);
				if(!strcmp(dini_Get(Archivo, string), NombreJugadorClan[playerid], true))
				{
					//RangoOcupado[playerid] = dini_Get(Archivo, "VicepresidenteOcupado");
					strins(NombreJugadorClanA[playerid], dini_Get(Archivo, "Presidente"), 0);
  					if(dini_Int(Archivo, "PresidenteOcupado") == 1)
  					{
  						dini_Set(Archivo, string, NombreJugadorClanA[playerid]);
  					}
  					else
  					{
  						dini_Set(Archivo, string, "<Vacío>");
  						dini_IntSet(Archivo, "PresidenteOcupado", 1);
  						dini_IntSet(Archivo, "MiembrosMax", dini_Int(Archivo, "MiembrosMax") - 1);
  					}
  					dini_Set(Archivo, "Presidente", NombreJugadorClan[playerid]);
		    		NoEnviarMensajeClan[playerid] = 1;
					format(stringc, sizeof(stringc), "{59FF00}<%s> %s ha sido promovido a Presidente del clan.", Clan_TAG[playerid], NombreJugadorClan[playerid]);
					for(new i = 0; i < MP; i++) {
		    		if(strcmp(dini_Get(Archivo, "Presidente"), GetName(i), true ) == 0 ) RangoTEXT[i] = "Presidente";
					else if(strcmp(dini_Get(Archivo, "Vicepresidente"), GetName(i), true ) == 0 ) RangoTEXT[i] = "Vicepresidente";
					else if(strcmp(dini_Get(Archivo, "Tesorero"), GetName(i), true ) == 0 ) RangoTEXT[i] = "Tesorero";
					else if(strcmp(dini_Get(Archivo, "Secretario"), GetName(i), true ) == 0 ) RangoTEXT[i] = "Secretario";
					else if(strcmp(dini_Get(Archivo, "Sgt.Armas"), GetName(i), true ) == 0 ) RangoTEXT[i] = "Sgt.Armas";
					else RangoTEXT[i] = "Miembro";
					if(IsPlayerConnected(i)) {
					if(Clan_ID[i] == Clan_ID[playerid])
					{
             			SendClientMessage(i, -1, stringc); NoEnviarMensajeClan[i] = 0;
             		} } }
				}
				else JugadorNoLocalizado(playerid);
			}
			return 1;
		}
		case 1:
		{
			NoEnviarMensajeClan[playerid] = 0;
	        new Archivo[64];
	        new stringc[80];
    		format(Archivo, sizeof Archivo, "Clanes/%s.ini", Clan_TAG[playerid]);
    		for(new d = 1; d < MAX_PLAYERS_CLAN_MIEMBROS ; d++)
    		{
				format(string, sizeof string, "Miembro_%d", d);
				if(!strcmp(dini_Get(Archivo, string), NombreJugadorClan[playerid], true))
				{
					//RangoOcupado[playerid] = dini_Get(Archivo, "VicepresidenteOcupado");
					strins(NombreJugadorClanA[playerid], dini_Get(Archivo, "Vicepresidente"), 0);
  					if(dini_Int(Archivo, "VicepresidenteOcupado") == 1)
  					{
  						dini_Set(Archivo, string, NombreJugadorClanA[playerid]);
  					}
  					else
  					{
  						dini_Set(Archivo, string, "<Vacío>");
  						dini_IntSet(Archivo, "VicepresidenteOcupado", 1);
  						dini_IntSet(Archivo, "MiembrosMax", dini_Int(Archivo, "MiembrosMax") - 1);
  					}
  					dini_Set(Archivo, "Vicepresidente", NombreJugadorClan[playerid]);
		    		NoEnviarMensajeClan[playerid] = 1;
					format(stringc, sizeof(stringc), "{59FF00}<%s> %s ha sido promovido a Vicepresidente del clan.", Clan_TAG[playerid], NombreJugadorClan[playerid]);
					for(new i = 0; i < MP; i++) {
		    		if(strcmp(dini_Get(Archivo, "Presidente"), GetName(i), true ) == 0 ) RangoTEXT[i] = "Presidente";
					else if(strcmp(dini_Get(Archivo, "Vicepresidente"), GetName(i), true ) == 0 ) RangoTEXT[i] = "Vicepresidente";
					else if(strcmp(dini_Get(Archivo, "Tesorero"), GetName(i), true ) == 0 ) RangoTEXT[i] = "Tesorero";
					else if(strcmp(dini_Get(Archivo, "Secretario"), GetName(i), true ) == 0 ) RangoTEXT[i] = "Secretario";
					else if(strcmp(dini_Get(Archivo, "Sgt.Armas"), GetName(i), true ) == 0 ) RangoTEXT[i] = "Sgt.Armas";
					else RangoTEXT[i] = "Miembro";
					if(IsPlayerConnected(i)) {
					if(Clan_ID[i] == Clan_ID[playerid])
					{
             			SendClientMessage(i, -1, stringc); NoEnviarMensajeClan[i] = 0;
             		} } }
				}
				else JugadorNoLocalizado(playerid);
			}
			return 1;
		}
		case 2:
		{
			NoEnviarMensajeClan[playerid] = 0;
	        new Archivo[64];
	        new stringc[80];
    		format(Archivo, sizeof Archivo, "Clanes/%s.ini", Clan_TAG[playerid]);
    		for(new d = 1; d < MAX_PLAYERS_CLAN_MIEMBROS ; d++)
    		{
				format(string, sizeof string, "Miembro_%d", d);
				if(!strcmp(dini_Get(Archivo, string), NombreJugadorClan[playerid], true))
				{
					//RangoOcupado[playerid] = dini_Get(Archivo, "VicepresidenteOcupado");
					strins(NombreJugadorClanA[playerid], dini_Get(Archivo, "Tesorero"), 0);
  					if(dini_Int(Archivo, "TesoreroOcupado") == 1)
  					{
  						dini_Set(Archivo, string, NombreJugadorClanA[playerid]);
  					}
  					else
  					{
  						dini_Set(Archivo, string, "<Vacío>");
  						dini_IntSet(Archivo, "TesoreroOcupado", 1);
  						dini_IntSet(Archivo, "MiembrosMax", dini_Int(Archivo, "MiembrosMax") - 1);
  					}
  					dini_Set(Archivo, "Tesorero", NombreJugadorClan[playerid]);
		    		NoEnviarMensajeClan[playerid] = 1;
					format(stringc, sizeof(stringc), "{59FF00}<%s> %s ha sido promovido a Tesorero del clan.", Clan_TAG[playerid], NombreJugadorClan[playerid]);
					for(new i = 0; i < MP; i++) {
		    		if(strcmp(dini_Get(Archivo, "Presidente"), GetName(i), true ) == 0 ) RangoTEXT[i] = "Presidente";
					else if(strcmp(dini_Get(Archivo, "Vicepresidente"), GetName(i), true ) == 0 ) RangoTEXT[i] = "Vicepresidente";
					else if(strcmp(dini_Get(Archivo, "Tesorero"), GetName(i), true ) == 0 ) RangoTEXT[i] = "Tesorero";
					else if(strcmp(dini_Get(Archivo, "Secretario"), GetName(i), true ) == 0 ) RangoTEXT[i] = "Secretario";
					else if(strcmp(dini_Get(Archivo, "Sgt.Armas"), GetName(i), true ) == 0 ) RangoTEXT[i] = "Sgt.Armas";
					else RangoTEXT[i] = "Miembro";
					if(IsPlayerConnected(i)) {
					if(Clan_ID[i] == Clan_ID[playerid])
					{
             			SendClientMessage(i, -1, stringc); NoEnviarMensajeClan[i] = 0;
             		} } }
				}
				else JugadorNoLocalizado(playerid);
			}
			return 1;
		}
		case 3:
		{
			NoEnviarMensajeClan[playerid] = 0;
	        new Archivo[64];
	        new stringc[80];
    		format(Archivo, sizeof Archivo, "Clanes/%s.ini", Clan_TAG[playerid]);
    		for(new d = 1; d < MAX_PLAYERS_CLAN_MIEMBROS ; d++)
    		{
				format(string, sizeof string, "Miembro_%d", d);
				if(!strcmp(dini_Get(Archivo, string), NombreJugadorClan[playerid], true))
				{
					//RangoOcupado[playerid] = dini_Get(Archivo, "VicepresidenteOcupado");
					strins(NombreJugadorClanA[playerid], dini_Get(Archivo, "Secretario"), 0);
  					if(dini_Int(Archivo, "SecretarioOcupado") == 1)
  					{
  						dini_Set(Archivo, string, NombreJugadorClanA[playerid]);
  					}
  					else
  					{
  						dini_Set(Archivo, string, "<Vacío>");
  						dini_IntSet(Archivo, "SecretarioOcupado", 1);
  						dini_IntSet(Archivo, "MiembrosMax", dini_Int(Archivo, "MiembrosMax") - 1);
  					}
  					dini_Set(Archivo, "Secretario", NombreJugadorClan[playerid]);
		    		NoEnviarMensajeClan[playerid] = 1;
					format(stringc, sizeof(stringc), "{59FF00}<%s> %s ha sido promovido a Secretario del clan.", Clan_TAG[playerid], NombreJugadorClan[playerid]);
					for(new i = 0; i < MP; i++) {
		    		if(strcmp(dini_Get(Archivo, "Presidente"), GetName(i), true ) == 0 ) RangoTEXT[i] = "Presidente";
					else if(strcmp(dini_Get(Archivo, "Vicepresidente"), GetName(i), true ) == 0 ) RangoTEXT[i] = "Vicepresidente";
					else if(strcmp(dini_Get(Archivo, "Tesorero"), GetName(i), true ) == 0 ) RangoTEXT[i] = "Tesorero";
					else if(strcmp(dini_Get(Archivo, "Secretario"), GetName(i), true ) == 0 ) RangoTEXT[i] = "Secretario";
					else if(strcmp(dini_Get(Archivo, "Sgt.Armas"), GetName(i), true ) == 0 ) RangoTEXT[i] = "Sgt.Armas";
					else RangoTEXT[i] = "Miembro";
					if(IsPlayerConnected(i)) {
					if(Clan_ID[i] == Clan_ID[playerid])
					{
             			SendClientMessage(i, -1, stringc); NoEnviarMensajeClan[i] = 0;
             		} } }
				}
				else JugadorNoLocalizado(playerid);
			}
			return 1;
		}
		case 4:
		{
			NoEnviarMensajeClan[playerid] = 0;
	        new Archivo[64];
	        new stringc[80];
    		format(Archivo, sizeof Archivo, "Clanes/%s.ini", Clan_TAG[playerid]);
    		for(new d = 1; d < MAX_PLAYERS_CLAN_MIEMBROS ; d++)
    		{
				format(string, sizeof string, "Miembro_%d", d);
				if(!strcmp(dini_Get(Archivo, string), NombreJugadorClan[playerid], true))
				{
					//RangoOcupado[playerid] = dini_Get(Archivo, "VicepresidenteOcupado");
					strins(NombreJugadorClanA[playerid], dini_Get(Archivo, "Sgt.Armas"), 0);
  					if(dini_Int(Archivo, "Sgt.ArmasOcupado") == 1)
  					{
  						dini_Set(Archivo, string, NombreJugadorClanA[playerid]);
  					}
  					else
  					{
  						dini_Set(Archivo, string, "<Vacío>");
  						dini_IntSet(Archivo, "Sgt.ArmasOcupado", 1);
  						dini_IntSet(Archivo, "MiembrosMax", dini_Int(Archivo, "MiembrosMax") - 1);
  					}
  					dini_Set(Archivo, "Sgt.Armas", NombreJugadorClan[playerid]);
		    		NoEnviarMensajeClan[playerid] = 1;
					format(stringc, sizeof(stringc), "{59FF00}<%s> %s ha sido promovido a Sargento de Armas del clan.", Clan_TAG[playerid], NombreJugadorClan[playerid]);
					for(new i = 0; i < MP; i++) {
		    		if(strcmp(dini_Get(Archivo, "Presidente"), GetName(i), true ) == 0 ) RangoTEXT[i] = "Presidente";
					else if(strcmp(dini_Get(Archivo, "Vicepresidente"), GetName(i), true ) == 0 ) RangoTEXT[i] = "Vicepresidente";
					else if(strcmp(dini_Get(Archivo, "Tesorero"), GetName(i), true ) == 0 ) RangoTEXT[i] = "Tesorero";
					else if(strcmp(dini_Get(Archivo, "Secretario"), GetName(i), true ) == 0 ) RangoTEXT[i] = "Secretario";
					else if(strcmp(dini_Get(Archivo, "Sgt.Armas"), GetName(i), true ) == 0 ) RangoTEXT[i] = "Sgt.Armas";
					else RangoTEXT[i] = "Miembro";
					if(IsPlayerConnected(i)) {
					if(Clan_ID[i] == Clan_ID[playerid])
					{
             			SendClientMessage(i, -1, stringc); NoEnviarMensajeClan[i] = 0;
             		} } }
				}
				else JugadorNoLocalizado(playerid);
			}
			return 1;
			}
		}
	}
	if(dialogid == CCASCENDERP3)
   	{
   	if(!response) return SendClientMessage(playerid, -1, "No has seleccionado ninguna opción.");
   	switch(listitem)
   	{
		case 0:
		{
			NoEnviarMensajeClan[playerid] = 0;
	        new Archivo[64];
	        new stringc[80];
    		format(Archivo, sizeof Archivo, "Clanes/%s.ini", Clan_TAG[playerid]);
    		for(new d = 1; d < MAX_PLAYERS_CLAN_MIEMBROS ; d++)
    		{
				format(string, sizeof string, "Miembro_%d", d);
				if(!strcmp(dini_Get(Archivo, string), NombreJugadorClan[playerid], true))
				{
					//RangoOcupado[playerid] = dini_Get(Archivo, "VicepresidenteOcupado");
					strins(NombreJugadorClanA[playerid], dini_Get(Archivo, "Vicepresidente"), 0);
  					if(dini_Int(Archivo, "VicepresidenteOcupado") == 1)
  					{
  						dini_Set(Archivo, string, NombreJugadorClanA[playerid]);
  					}
  					else
  					{
  						dini_Set(Archivo, string, "<Vacío>");
  						dini_IntSet(Archivo, "VicepresidenteOcupado", 1);
  						dini_IntSet(Archivo, "MiembrosMax", dini_Int(Archivo, "MiembrosMax") - 1);
  					}
  					dini_Set(Archivo, "Vicepresidente", NombreJugadorClan[playerid]);
		    		NoEnviarMensajeClan[playerid] = 1;
					format(stringc, sizeof(stringc), "{59FF00}<%s> %s ha sido promovido a Vicepresidente del clan.", Clan_TAG[playerid], NombreJugadorClan[playerid]);
					for(new i = 0; i < MP; i++) {
		    		if(strcmp(dini_Get(Archivo, "Presidente"), GetName(i), true ) == 0 ) RangoTEXT[i] = "Presidente";
					else if(strcmp(dini_Get(Archivo, "Vicepresidente"), GetName(i), true ) == 0 ) RangoTEXT[i] = "Vicepresidente";
					else if(strcmp(dini_Get(Archivo, "Tesorero"), GetName(i), true ) == 0 ) RangoTEXT[i] = "Tesorero";
					else if(strcmp(dini_Get(Archivo, "Secretario"), GetName(i), true ) == 0 ) RangoTEXT[i] = "Secretario";
					else if(strcmp(dini_Get(Archivo, "Sgt.Armas"), GetName(i), true ) == 0 ) RangoTEXT[i] = "Sgt.Armas";
					else RangoTEXT[i] = "Miembro";
					if(IsPlayerConnected(i)) {
					if(Clan_ID[i] == Clan_ID[playerid])
					{
             			SendClientMessage(i, -1, stringc); NoEnviarMensajeClan[i] = 0;
             		} } }
				}
				else JugadorNoLocalizado(playerid);
			}
			return 1;
		}
		case 1:
		{
			NoEnviarMensajeClan[playerid] = 0;
	        new Archivo[64];
	        new stringc[80];
    		format(Archivo, sizeof Archivo, "Clanes/%s.ini", Clan_TAG[playerid]);
    		for(new d = 1; d < MAX_PLAYERS_CLAN_MIEMBROS ; d++)
    		{
				format(string, sizeof string, "Miembro_%d", d);
				if(!strcmp(dini_Get(Archivo, string), NombreJugadorClan[playerid], true))
				{
					//RangoOcupado[playerid] = dini_Get(Archivo, "VicepresidenteOcupado");
					strins(NombreJugadorClanA[playerid], dini_Get(Archivo, "Tesorero"), 0);
  					if(dini_Int(Archivo, "TesoreroOcupado") == 1)
  					{
  						dini_Set(Archivo, string, NombreJugadorClanA[playerid]);
  					}
  					else
  					{
  						dini_Set(Archivo, string, "<Vacío>");
  						dini_IntSet(Archivo, "TesoreroOcupado", 1);
  						dini_IntSet(Archivo, "MiembrosMax", dini_Int(Archivo, "MiembrosMax") - 1);
  					}
  					dini_Set(Archivo, "Tesorero", NombreJugadorClan[playerid]);
		    		NoEnviarMensajeClan[playerid] = 1;
					format(stringc, sizeof(stringc), "{59FF00}<%s> %s ha sido promovido a Tesorero del clan.", Clan_TAG[playerid], NombreJugadorClan[playerid]);
					for(new i = 0; i < MP; i++) {
		    		if(strcmp(dini_Get(Archivo, "Presidente"), GetName(i), true ) == 0 ) RangoTEXT[i] = "Presidente";
					else if(strcmp(dini_Get(Archivo, "Vicepresidente"), GetName(i), true ) == 0 ) RangoTEXT[i] = "Vicepresidente";
					else if(strcmp(dini_Get(Archivo, "Tesorero"), GetName(i), true ) == 0 ) RangoTEXT[i] = "Tesorero";
					else if(strcmp(dini_Get(Archivo, "Secretario"), GetName(i), true ) == 0 ) RangoTEXT[i] = "Secretario";
					else if(strcmp(dini_Get(Archivo, "Sgt.Armas"), GetName(i), true ) == 0 ) RangoTEXT[i] = "Sgt.Armas";
					else RangoTEXT[i] = "Miembro";
					if(IsPlayerConnected(i)) {
					if(Clan_ID[i] == Clan_ID[playerid])
					{
             			SendClientMessage(i, -1, stringc); NoEnviarMensajeClan[i] = 0;
             		} } }
				}
				else JugadorNoLocalizado(playerid);
			}
			return 1;
		}
		case 2:
		{
			NoEnviarMensajeClan[playerid] = 0;
	        new Archivo[64];
	        new stringc[80];
    		format(Archivo, sizeof Archivo, "Clanes/%s.ini", Clan_TAG[playerid]);
    		for(new d = 1; d < MAX_PLAYERS_CLAN_MIEMBROS ; d++)
    		{
				format(string, sizeof string, "Miembro_%d", d);
				if(!strcmp(dini_Get(Archivo, string), NombreJugadorClan[playerid], true))
				{
					//RangoOcupado[playerid] = dini_Get(Archivo, "VicepresidenteOcupado");
					strins(NombreJugadorClanA[playerid], dini_Get(Archivo, "Secretario"), 0);
  					if(dini_Int(Archivo, "SecretarioOcupado") == 1)
  					{
  						dini_Set(Archivo, string, NombreJugadorClanA[playerid]);
  					}
  					else
  					{
  						dini_Set(Archivo, string, "<Vacío>");
  						dini_IntSet(Archivo, "SecretarioOcupado", 1);
  						dini_IntSet(Archivo, "MiembrosMax", dini_Int(Archivo, "MiembrosMax") - 1);
  					}
  					dini_Set(Archivo, "Secretario", NombreJugadorClan[playerid]);
		    		NoEnviarMensajeClan[playerid] = 1;
					format(stringc, sizeof(stringc), "{59FF00}<%s> %s ha sido promovido a Secretario del clan.", Clan_TAG[playerid], NombreJugadorClan[playerid]);
					for(new i = 0; i < MP; i++) {
		    		if(strcmp(dini_Get(Archivo, "Presidente"), GetName(i), true ) == 0 ) RangoTEXT[i] = "Presidente";
					else if(strcmp(dini_Get(Archivo, "Vicepresidente"), GetName(i), true ) == 0 ) RangoTEXT[i] = "Vicepresidente";
					else if(strcmp(dini_Get(Archivo, "Tesorero"), GetName(i), true ) == 0 ) RangoTEXT[i] = "Tesorero";
					else if(strcmp(dini_Get(Archivo, "Secretario"), GetName(i), true ) == 0 ) RangoTEXT[i] = "Secretario";
					else if(strcmp(dini_Get(Archivo, "Sgt.Armas"), GetName(i), true ) == 0 ) RangoTEXT[i] = "Sgt.Armas";
					else RangoTEXT[i] = "Miembro";
					if(IsPlayerConnected(i)) {
					if(Clan_ID[i] == Clan_ID[playerid])
					{
             			SendClientMessage(i, -1, stringc); NoEnviarMensajeClan[i] = 0;
             		} } }
				}
				else JugadorNoLocalizado(playerid);
			}
			return 1;
		}
		case 3:
		{
			NoEnviarMensajeClan[playerid] = 0;
	        new Archivo[64];
	        new stringc[80];
    		format(Archivo, sizeof Archivo, "Clanes/%s.ini", Clan_TAG[playerid]);
    		for(new d = 1; d < MAX_PLAYERS_CLAN_MIEMBROS ; d++)
    		{
				format(string, sizeof string, "Miembro_%d", d);
				if(!strcmp(dini_Get(Archivo, string), NombreJugadorClan[playerid], true))
				{
					//RangoOcupado[playerid] = dini_Get(Archivo, "VicepresidenteOcupado");
					strins(NombreJugadorClanA[playerid], dini_Get(Archivo, "Sgt.Armas"), 0);
  					if(dini_Int(Archivo, "Sgt.ArmasOcupado") == 1)
  					{
  						dini_Set(Archivo, string, NombreJugadorClanA[playerid]);
  					}
  					else
  					{
  						dini_Set(Archivo, string, "<Vacío>");
  						dini_IntSet(Archivo, "Sgt.ArmasOcupado", 1);
  						dini_IntSet(Archivo, "MiembrosMax", dini_Int(Archivo, "MiembrosMax") - 1);
  					}
  					dini_Set(Archivo, "Sgt.Armas", NombreJugadorClan[playerid]);
		    		NoEnviarMensajeClan[playerid] = 1;
					format(stringc, sizeof(stringc), "{59FF00}<%s> %s ha sido promovido a Sargento de Armas del clan.", Clan_TAG[playerid], NombreJugadorClan[playerid]);
					for(new i = 0; i < MP; i++) {
		    		if(strcmp(dini_Get(Archivo, "Presidente"), GetName(i), true ) == 0 ) RangoTEXT[i] = "Presidente";
					else if(strcmp(dini_Get(Archivo, "Vicepresidente"), GetName(i), true ) == 0 ) RangoTEXT[i] = "Vicepresidente";
					else if(strcmp(dini_Get(Archivo, "Tesorero"), GetName(i), true ) == 0 ) RangoTEXT[i] = "Tesorero";
					else if(strcmp(dini_Get(Archivo, "Secretario"), GetName(i), true ) == 0 ) RangoTEXT[i] = "Secretario";
					else if(strcmp(dini_Get(Archivo, "Sgt.Armas"), GetName(i), true ) == 0 ) RangoTEXT[i] = "Sgt.Armas";
					else RangoTEXT[i] = "Miembro";
					if(IsPlayerConnected(i)) {
					if(Clan_ID[i] == Clan_ID[playerid])
					{
             			SendClientMessage(i, -1, stringc); NoEnviarMensajeClan[i] = 0;
             		} } }
				}
				else JugadorNoLocalizado(playerid);
			}
			return 1;
		}
	}
	}
	switch(dialogid)
    {
        case CCNOMBRE:
        {
            if(!response) return SendClientMessage(playerid, -1, "Se canceló la operación.");
            {
                if(strlen(inputtext) < 7 || strlen(inputtext) > 22) return ShowPlayerDialog(playerid, CCNOMBRE, DIALOG_STYLE_INPUT, "{E9E200}Sistema de Clanes:", "{FFFFFF}Ingresa el {01A2FF}nombre{FFFFFF} del clan a crear.\nRecuerda, el nombre solo puede contener {01A2FF}7-22{FFFFFF} de longitud:\n{FF0001}El nombre de tu clan es muy largo o corto, escribe otro:", "Aceptar", "Cancelar");
               	strmid(Clan_JugadorCompleto[playerid], inputtext, 0, strlen(inputtext), 22);
               	new stringjj2[1800];
               	format(stringjj2, sizeof (stringjj2), "{FFFFFF}Felicidades, has creado el clan: {01A2FF}%s{FFFFFF}.\nAhora, por favor escribe el TAG de tu clan. Sólo podrá ser de {01A2FF}1-4{FFFFFF} de longitud:", Clan_JugadorCompleto[playerid]);
               	ShowPlayerDialog(playerid, CCTAG, DIALOG_STYLE_INPUT, "{E9E200}Sistema de Clanes:", stringjj2, "Aceptar", "");
            }
        }
  		case CCTAG:
        {
            if(!response) return ShowPlayerDialog(playerid, CCTAG, DIALOG_STYLE_INPUT, "{E9E200}Sistema de Clanes:", "{FFFFFF}No puedes cancelar la creación de tu clan. Escribe el TAG para seguir:", "Aceptar", "");
            {
                new
                tmp[20],
                idx,
				Query[320],
				Cache:result,
				idd,
				stringxxx[100];
                tmp = strtok(inputtext, idx);
                if(strlen(inputtext) < 1 || strlen(inputtext) > 16) return ShowPlayerDialog(playerid, CCTAG, DIALOG_STYLE_INPUT, "{E9E200}Sistema de Clanes:", "{FFFFFF}El TAG de tu clan es muy larga, por favor introduce otra:", "Aceptar", "");
                if(strfind(tmp, "[", true) != -1 || strfind(tmp, "]", true) != -1)
                {
                	return SendClientMessage(playerid, -1, "*** El nombre de cla no puede llevar corchetes '[]'.");
                }
				idd = 1;
				mysql_format(Conexion, Query, sizeof(Query), "SELECT* FROM Clanes WHERE NombreClan = '%s'", inputtext);
				result = mysql_query(Conexion, Query);
				if(cache_get_row_count(Conexion) == 0)
				{
	    				mysql_format(Conexion, Query, sizeof(Query), "SELECT NumeroClanes FROM Clanesmax WHERE ID = '%d'", idd);
						result = mysql_query(Conexion, Query);
						ClanIDNext[playerid] = cache_get_field_content_int(0, "NumeroClanes", Conexion);
						ClanIDNext[playerid] += 1;
						cache_delete(result, Conexion);
						mysql_format(Conexion, Query, sizeof(Query), "UPDATE `clanesmax` SET `NumeroClanes` = '%d' WHERE `ID` = %d", ClanIDNext[playerid], idd);
						mysql_query(Conexion, Query, false);
						cache_delete(result, Conexion);
						new MesTEXT[15];
                    	getdate(TCC[playerid][0], TCC[playerid][1], TCC[playerid][2]);
						if(TCC[playerid][1] == 1) MesTEXT = "Enero";
						if(TCC[playerid][1] == 2) MesTEXT = "Febrero";
						if(TCC[playerid][1] == 3) MesTEXT = "Marzo";
						if(TCC[playerid][1] == 4) MesTEXT = "Abril";
						if(TCC[playerid][1] == 5) MesTEXT = "Mayo";
						if(TCC[playerid][1] == 6) MesTEXT = "Junio";
						if(TCC[playerid][1] == 7) MesTEXT = "Julio";
						if(TCC[playerid][1] == 8) MesTEXT = "Agosto";
						if(TCC[playerid][1] == 9) MesTEXT = "Septiembre";
						if(TCC[playerid][1] == 10) MesTEXT = "Octubre";
						if(TCC[playerid][1] == 11) MesTEXT = "Noviembre";
						if(TCC[playerid][1] == 12) MesTEXT = "Diciembre";
						mysql_format(Conexion, Query, sizeof(Query), "INSERT INTO Clanes(NombreClan, Fundador, IDClan, DiaCreacion, MesCreacion, AnoCreacion) VALUES('%s', '%s', '%d', '%d', '%s', '%d');", inputtext, GetName(playerid), ClanIDNext[playerid], TCC[playerid][2], MesTEXT, TCC[playerid][0]);
						mysql_query(Conexion, Query);
						mysql_format(Conexion, Query, sizeof(Query), "SELECT IDClan FROM Clanes WHERE NombreClan = '%s'", inputtext);
						result = mysql_query(Conexion, Query);
        				Clan_ID[playerid] = cache_get_field_content_int(0, "IDClan", Conexion);
        				RangoClan[playerid] = 5;
        				EnClan[playerid] = 1;
						cache_delete(result, Conexion);
						mysql_format(Conexion, Query, sizeof(Query), "INSERT INTO ClanesMiembros(NombreMiembro, IDClan, RangoClan) VALUES('%s', %d, %d);",\
						GetName(playerid), Clan_ID[playerid], RangoClan[playerid]);
						mysql_query(Conexion, Query, false);
						strmid(Clan_Jugador[playerid], inputtext, 0, strlen(inputtext), 64);
                    	RangoClan[playerid] = 7;
                    	SetPlayerColor(playerid, 0);
                    	ResetPlayerMoney(playerid);
			    		DineroJugador[playerid] -= 1000000;
						GivePlayerMoney(playerid, DineroJugador[playerid]);
						ScoreGeneralJugador[playerid] -= 250;
						format(stringxxx, sizeof(stringxxx), "Clan: ~p~~h~%s~w~~h~.", Clan_JugadorCompleto[playerid]);
						ClanInfoTD(playerid, stringxxx);
						format(stringxxx, sizeof(stringxxx), "{00FF00}*** Enhorabuena has creado el clan '%s' correctamente.", inputtext);
						SendClientMessage(playerid, -1, stringxxx);
						SendClientMessage(playerid, -1, "   Eres el Líder de tu clan, escribe: /clan para ver las preferencias.");
				}
				else
    			{
					cache_delete(result, Conexion);
					SendClientMessage(playerid, -1, "{FFE900}*** Lo sentimos pero ya existe un clan con ese nombre.");
				}
   			}
  		}
	}
//=========================================================//
	return 1;
}

funcion INVICANCELAR(playerid){
    SendClientMessage(playerid, -1, "{8FEB01}Has rechazado la invitación de clan.");
    Invitacion[playerid][0] = 0;
    return 1;
}

funcion COLOR_AUTO1(playerid, color, color2){
  //  new queryx[100];
	//mysql_format(conexion, queryx, sizeof(queryx), "UPDATE `jugadores` SET AutoN1_Color1=%d, AutoN1_Color2=%d WHERE Nombre='%s'", color, color2, GetName(playerid));
	//mysql_function_query(conexion, queryx, true, "OnQueryFinish", "ii", 0, playerid);
	return 1;
}

funcion RUEDAS_AUTON1(playerid, ruedas){
 //   new queryx[100];
	//mysql_format(conexion, queryx, sizeof(queryx), "UPDATE `jugadores` SET AutoN1_Ruedas=%d WHERE Nombre='%s'", ruedas, GetName(playerid));
	//mysql_function_query(conexion, queryx, true, "OnQueryFinish", "ii", 0, playerid);
	return 1;
}

funcion PAINTJOBS_AUTON1(playerid, paintjobs){
  //  new queryx[100];
	//mysql_format(conexion, queryx, sizeof(queryx), "UPDATE `jugadores` SET AutoN1_PaintJobs=%d WHERE Nombre='%s'", paintjobs, GetName(playerid));
	//mysql_function_query(conexion, queryx, true, "OnQueryFinish", "ii", 0, playerid);
	return 1;
}

//Nimero 2
funcion COLOR_AUTO2(playerid, color, color2){
   // new queryx[100];
	//mysql_format(conexion, queryx, sizeof(queryx), "UPDATE `jugadores` SET AutoN2_Color1=%d, AutoN2_Color2=%d WHERE Nombre='%s'", color, color2, GetName(playerid));
	//mysql_function_query(conexion, queryx, true, "OnQueryFinish", "ii", 0, playerid);
	return 1;
}

funcion RUEDAS_AUTON2(playerid, ruedas){
  //  new queryx[100];
	//mysql_format(conexion, queryx, sizeof(queryx), "UPDATE `jugadores` SET AutoN2_Ruedas=%d WHERE Nombre='%s'", ruedas, GetName(playerid));
	//mysql_function_query(conexion, queryx, true, "OnQueryFinish", "ii", 0, playerid);
	return 1;
}

funcion PAINTJOBS_AUTON2(playerid, paintjobs){
 //   new queryx[100];
	//mysql_format(conexion, queryx, sizeof(queryx), "UPDATE `jugadores` SET AutoN2_PaintJobs=%d WHERE Nombre='%s'", paintjobs, GetName(playerid));
	//mysql_function_query(conexion, queryx, true, "OnQueryFinish", "ii", 0, playerid);
	return 1;
}

//Numero 3
funcion COLOR_AUTO3(playerid, color, color2){
   // new queryx[100];
	//mysql_format(conexion, queryx, sizeof(queryx), "UPDATE `jugadores` SET AutoN3_Color1=%d, AutoN3_Color2=%d WHERE Nombre='%s'", color, color2, GetName(playerid));
	//mysql_function_query(conexion, queryx, true, "OnQueryFinish", "ii", 0, playerid);
	return 1;
}

funcion RUEDAS_AUTON3(playerid, ruedas){
    //new queryx[100];
	//mysql_format(conexion, queryx, sizeof(queryx), "UPDATE `jugadores` SET AutoN3_Ruedas=%d WHERE Nombre='%s'", ruedas, GetName(playerid));
	//mysql_function_query(conexion, queryx, true, "OnQueryFinish", "ii", 0, playerid);
	return 1;
}

funcion PAINTJOBS_AUTON3(playerid, paintjobs){
    //new queryx[100];
	//mysql_format(conexion, queryx, sizeof(queryx), "UPDATE `jugadores` SET AutoN3_PaintJobs=%d WHERE Nombre='%s'", paintjobs, GetName(playerid));
	//mysql_function_query(conexion, queryx, true, "OnQueryFinish", "ii", 0, playerid);
	return 1;
}

CrearVehiculoEx(playerid, modelo, color, color2, ruedas, paintjobs)
{
    new Float:x;new Float:y;new Float:z,Float:angulo;
	GetPlayerPos(playerid, x, y, z);

	if(IsPlayerInAnyVehicle(playerid)) SendClientMessage(playerid, Blanco, "Usted ya esta dentro de un vehículo. Por favor baje antes de obtener otro.");
	if(SACO_AUTO[0][playerid] == 0)
	{
	VEHICULO_CREADOR0[playerid] = CreateVehicle(modelo, x, y, z, angulo, -1, -1, -1);
	PutPlayerInVehicle(playerid, VEHICULO_CREADOR0[playerid], 0);
	ChangeVehiclePaintjob(GetPlayerVehicleID(playerid), paintjobs);
	AddVehicleComponent(GetPlayerVehicleID(playerid), ruedas);

	LinkVehicleToInterior(VEHICULO_CREADOR0[playerid], GetPlayerInterior(playerid));
	SetVehicleVirtualWorld(VEHICULO_CREADOR0[playerid], GetPlayerVirtualWorld(playerid));
	if(TIENE_PINTURA[playerid][0] == 1) ChangeVehicleColor(GetPlayerVehicleID(playerid), color, color2);

	//TIMER_PONER_PAINTJOBS0[playerid] = SetTimerEx("PONER_PAINTJOBS_N1", 10, true, "i", playerid);
	return 1;
	}
	else if(SACO_AUTO[0][playerid] == 1)
	{
	SendClientMessage(playerid, Naranja, "El vehículo número 1 ya está spawneado. Para volver a spawnear debes destruirlo primero.");
	return 1;
	}
	return 1;
}

CrearVehiculoEx2(playerid, modelo, color, color2, ruedas, paintjobs)
{
    new Float:x;new Float:y;new Float:z,Float:angulo;
	GetPlayerPos(playerid, x, y, z);

	if(IsPlayerInAnyVehicle(playerid)) SendClientMessage(playerid, Blanco, "Usted ya esta dentro de un vehículo. Por favor baje antes de obtener otro.");

    if(SACO_AUTO[1][playerid] == 1)
	{
	VEHICULO_CREADOR1[playerid] = CreateVehicle(modelo, x, y, z, angulo, -1, -1, -1);
	PutPlayerInVehicle(playerid, VEHICULO_CREADOR1[playerid], 0);
	ChangeVehiclePaintjob(GetPlayerVehicleID(playerid), paintjobs);
	AddVehicleComponent(GetPlayerVehicleID(playerid), ruedas);
	ChangeVehicleColor(GetPlayerVehicleID(playerid), color, color2);
	LinkVehicleToInterior(VEHICULO_CREADOR1[playerid], GetPlayerInterior(playerid));
	SetVehicleVirtualWorld(VEHICULO_CREADOR1[playerid], GetPlayerVirtualWorld(playerid));
	if(TIENE_PINTURA[playerid][1] == 1) ChangeVehicleColor(GetPlayerVehicleID(playerid), color, color2);

	//TIMER_PONER_PAINTJOBS1[playerid] = SetTimerEx("PONER_PAINTJOBS_N2", 10, true, "i", playerid);
	return 1;
	}
	else if(SACO_AUTO[1][playerid] == 1)
	{
	SendClientMessage(playerid, Naranja, "El vehículo número 2 ya está spawneado. Para volver a spawnear debes destruirlo primero.");
	return 1;
	}
	return 1;
}

CrearVehiculoEx3(playerid, modelo, color, color2, ruedas, paintjobs)
{
    new Float:x;new Float:y;new Float:z,Float:angulo;
	GetPlayerPos(playerid, x, y, z);

	if(IsPlayerInAnyVehicle(playerid)) SendClientMessage(playerid, Blanco, "Usted ya esta dentro de un vehículo. Por favor baje antes de obtener otro.");

    if(SACO_AUTO[2][playerid] == 1)
	{
	VEHICULO_CREADOR2[playerid] = CreateVehicle(modelo, x, y, z, angulo, -1, -1, -1);
	PutPlayerInVehicle(playerid, VEHICULO_CREADOR2[playerid], 0);
	ChangeVehiclePaintjob(GetPlayerVehicleID(playerid), paintjobs);
	AddVehicleComponent(GetPlayerVehicleID(playerid), ruedas);
	ChangeVehicleColor(GetPlayerVehicleID(playerid), color, color2);
	LinkVehicleToInterior(VEHICULO_CREADOR2[playerid], GetPlayerInterior(playerid));
	SetVehicleVirtualWorld(VEHICULO_CREADOR2[playerid], GetPlayerVirtualWorld(playerid));

	if(TIENE_PINTURA[playerid][2] == 1) ChangeVehicleColor(GetPlayerVehicleID(playerid), color, color2);

	//TIMER_PONER_PAINTJOBS2[playerid] = SetTimerEx("PONER_PAINTJOBS_N3", 10, true, "i", playerid);
	return 1;
	}
	else if(SACO_AUTO[2][playerid] == 1)
	{
	SendClientMessage(playerid, Naranja, "El vehículo número 3 ya está spawneado. Para volver a spawnear debes destruirlo primero.");
	return 1;
	}
	return 1;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
    if(Administrador[playerid] >= 1){
	new coordsstring[2300], Text0[26], Text02[26], X[1028], Text03[26], Text04[26], Text05[26], Ase[40], IP[16], MesTEXT[19];
   	new Float:ratio=floatdiv(PuntajeJugador[clickedplayerid], Muertes[clickedplayerid]);
	GetPlayerIp(clickedplayerid, IP, sizeof(IP));
    if (NoJump[clickedplayerid] == 1) Text0 = "{00FF00}Activado";
    if (NoJump[clickedplayerid] == 0) Text0 = "{FF0A00}Desactivado";
    if (NoSALTO[clickedplayerid] == 1) Text02 = "{00FF00}Activado";
    if (NoSALTO[clickedplayerid] == 0) Text02 = "{FF0A00}Desactivado";
    if(aFix[clickedplayerid] == 1) Text03 = "{00FF00}Activado";
    if(aFix[clickedplayerid] == 0) Text03 = "{FF0A00}Desactivado";
    if(NoMPS[clickedplayerid] == 0) Text04 = "{00FF00}Activado";
    if(NoMPS[clickedplayerid] == 1) Text04 = "{FF0A00}Desactivado";
    if(TieneSpawnJugador[clickedplayerid] == 1) Text05 = "{00FF00}Activado";
    if(TieneSpawnJugador[clickedplayerid] == 0) Text05 = "{FF0A00}Desactivado";
   	if(NIVEL_KILLS[clickedplayerid] == 1) Ase = "{FFFFFF}Prospecto";
    if(NIVEL_KILLS[clickedplayerid] == 2) Ase = "{FFFFFF}Iniciado";
    if(NIVEL_KILLS[clickedplayerid] == 3) Ase = "{FFFFFF}Semiprofesional";
    if(NIVEL_KILLS[clickedplayerid] == 4) Ase = "{FFFFFF}Profesional";
    if(NIVEL_KILLS[clickedplayerid] == 5) Ase = "{FFFFFF}Maestro";
    if(NIVEL_KILLS[clickedplayerid] == 6) Ase = "{FFFFFF}Superpro";
    if(NIVEL_KILLS[clickedplayerid] == 76) Ase = "{FFFFFF}Demente";
    if(NIVEL_KILLS[clickedplayerid] == 8) Ase = "{FFFFFF}Desquisiado";
    if(NIVEL_KILLS[clickedplayerid] == 9) Ase = "{FFFFFF}Destructor";
    if(NIVEL_KILLS[clickedplayerid] == 10) Ase = "{FFFFFF}Leyenda";
    if(NIVEL_KILLS[clickedplayerid] == 11) Ase = "{FFFFFF}Legendario Negro";
    if(NIVEL_KILLS[clickedplayerid] == 12) Ase = "{FFFFFF}Legendario Oro";
    if(NIVEL_KILLS[clickedplayerid] == 0) Ase = "{FFFFFF}Easy";
	if(TT[clickedplayerid][4] == 1) MesTEXT = "Enero";
	if(TT[clickedplayerid][4] == 2) MesTEXT = "Febrero";
	if(TT[clickedplayerid][4] == 3) MesTEXT = "Marzo";
	if(TT[clickedplayerid][4] == 4) MesTEXT = "Abril";
	if(TT[clickedplayerid][4] == 5) MesTEXT = "Mayo";
	if(TT[clickedplayerid][4] == 6) MesTEXT = "Junio";
	if(TT[clickedplayerid][4] == 7) MesTEXT = "Julio";
	if(TT[clickedplayerid][4] == 8) MesTEXT = "Agosto";
	if(TT[clickedplayerid][4] == 9) MesTEXT = "Septiembre";
	if(TT[clickedplayerid][4] == 10) MesTEXT = "Octubre";
	if(TT[clickedplayerid][4] == 11) MesTEXT = "Noviembre";
	if(TT[clickedplayerid][4] == 12) MesTEXT = "Diciembre";
    format(X, sizeof(X),"{FFFFFF}{11A6FF}Estaditicas: {FFFFFF}%s (%d)\n", GetName(clickedplayerid), clickedplayerid);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Admin Nivel: {FFFFFF}%d\n", Administrador[clickedplayerid]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}V.I.P Nivel: {FFFFFF}%d\n\n", Vip[clickedplayerid]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Dinero: {FFFFFF}$%d\n", DineroJugador[clickedplayerid]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Asesinatos: {FFFFFF}%d\n", PuntajeJugador[clickedplayerid]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Muertes: {FFFFFF}%d\n", Muertes[clickedplayerid]);
    strcat(X, coordsstring);
     format(coordsstring, sizeof(coordsstring), "{11A6FF}Ratio: {FFFFFF}%.2f\n", ratio);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Score: {FFFFFF}%d\n", ScoreGeneralJugador[clickedplayerid]);
    strcat(X, coordsstring);
	 	format(coordsstring, sizeof(coordsstring), "{11A6FF}Rango de Asesino: {FFFFFF}%s\n", Ase);
    	strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Headshot: {FFFFFF}%d\n", HSH[clickedplayerid]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Duelos Ganados: {FFFFFF}%d\n", DuelosG[clickedplayerid]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Duelos Perdidos: {FFFFFF}%d\n", DuelosP[clickedplayerid]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Carreras Ganadas: {FFFFFF}%d\n", RacesS[clickedplayerid]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Carreras Perdidas: {FFFFFF}%d\n", RacesSx[clickedplayerid]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}MultiKills: {FFFFFF}%d\n", MK[clickedplayerid]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}HolyShit: {FFFFFF}%d\n\n", HS[clickedplayerid]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Skin Guardado: {FFFFFF}%d\n", SkinPlayer[clickedplayerid]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Turbo: {FFFFFF}%s\n", Text0);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Salto: {FFFFFF}%s\n", Text02);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Auto Fix: {FFFFFF}%s\n", Text03);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}MPs Activados: {FFFFFF}%s\n", Text04);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}MiSpawn: {FFFFFF}%s\n", Text05);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}CArmas Slot: {FFFFFF}%d\n", CArma[clickedplayerid][20]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}PuntosTLSFR: {FFFFFF}%d\n", PuntosDM[clickedplayerid]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Texto: {FFFFFF}%s{11A6FF}\n\n", TEXTO_CABECERO[clickedplayerid]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Advertencias: {FFFFFF}%d\n", JugadorAK[clickedplayerid][0]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Kicks: {FFFFFF}%d\n", JugadorAK[clickedplayerid][1]);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}IP: {FFFFFF}[ %s ]\n", IP);
    strcat(X, coordsstring);
    format(coordsstring, sizeof(coordsstring), "{11A6FF}Antigüedad: {FFFFFF}%d-%s-%d\n", TT[clickedplayerid][5], MesTEXT, TT[clickedplayerid][3]);
    strcat(X, coordsstring);
    ShowPlayerDialog(playerid, 102, DIALOG_STYLE_MSGBOX, "{FFFFFF}Estadisticas:", X,"Cerrar","");
    return 1;
}
	return 1;
}

funcion RevisarPlayer(playerid)
{
    new pName[24], Query[256];
    GetPlayerName(playerid, pName, 24);
    format(Query, sizeof(Query), "SELECT * FROM `jugadores` WHERE Nombre='%s'", pName);
    mysql_function_query(Conexion, Query, true, "OnQueryFinish", "ii",2, playerid);
    return 1;
}

forward OnQueryFinish(resultid, extraid, ConnectionHandle);
public OnQueryFinish(resultid, extraid, ConnectionHandle)
{
    new Rows, Field;
    if(resultid != 0)
    {
        cache_get_data(Rows, Field);
    }
    switch(resultid)
    {
    	case 1:{
        if(Rows == 1){
            new content[20], stringa[25];
            cache_get_field_content(0,"Password", stringa);
            strmid(PlayerInfo[extraid][Password], stringa, 0, strlen(stringa), 50);
            cache_get_field_content(0,"IP", IPa[extraid]);
            cache_get_field_content(0, "NivelAdmin", content); Administrador[extraid] = strval(content);
            cache_get_field_content(0,"Muertes", content);Muertes[extraid] = strval(content);
            cache_get_field_content(0,"Puntaje", content);PuntajeJugador[extraid] = strval(content);
            cache_get_field_content(0,"PuntajeGeneral", content);ScoreGeneralJugador[extraid] = strval(content);
            cache_get_field_content(0,"Dinero", content);DineroJugador[extraid] = strval(content);
            cache_get_field_content(0,"Skin", content);SkinPlayer[extraid] = strval(content);
            cache_get_field_content(0,"NivelVip", content);Vip[extraid] = strval(content);
            cache_get_field_content(0,"DuelosGanados", content);DuelosG[extraid] = strval(content);
            cache_get_field_content(0,"DuelosPerdidos", content);DuelosP[extraid] = strval(content);
            cache_get_field_content(0,"TC", content);CoNs1[extraid] = strval(content);
            cache_get_field_content(0,"RaceS", content);RacesS[extraid] = strval(content);
            cache_get_field_content(0,"MultiKills", content);MK[extraid] = strval(content);
            cache_get_field_content(0,"HolyShit", content);HS[extraid] = strval(content);
            cache_get_field_content(0,"VehSpawn", content);CreoAuto[extraid] = strval(content);
            cache_get_field_content(0,"Kills", content);SumarGame0[extraid] = strval(content);
            cache_get_field_content(0,"Matanza", content);SumarGame1[extraid] = strval(content);
            cache_get_field_content(0,"Texto", TEXTO_CABECERO[extraid]);
            cache_get_field_content(0,"TextoActivado", content);Cabecero[extraid] = strval(content);
            cache_get_field_content(0,"AutoN1_Modelo", content);MODELO_AUTO[extraid][0] = strval(content);
            cache_get_field_content(0,"AutoN1_Ruedas", content);RUEDAS_AUTO[extraid][0] = strval(content);
            cache_get_field_content(0,"AutoN1_PaintJobs", content);AUTO_PAINTJOB[extraid][0] = strval(content);
            cache_get_field_content(0,"AutoN1_Color1", content);AUTO_COLOR[extraid][0] = strval(content);
            cache_get_field_content(0,"AutoN1_Color2", content);AUTO_COLOR2[extraid][0] = strval(content);
            cache_get_field_content(0,"Neones", content);NEONES_AUTO[extraid][0] = strval(content);
            cache_get_field_content(0,"TieneAutoN1", content);TIENE_AUTO[extraid][0] = strval(content);
            cache_get_field_content(0,"AutoN2_Modelo", content);MODELO_AUTO[extraid][1] = strval(content);
            cache_get_field_content(0,"AutoN2_Ruedas", content);RUEDAS_AUTO[extraid][1] = strval(content);
            cache_get_field_content(0,"AutoN2_PaintJobs", content);AUTO_PAINTJOB[extraid][1] = strval(content);
            cache_get_field_content(0,"AutoN2_Color1", content);AUTO_COLOR[extraid][1] = strval(content);
            cache_get_field_content(0,"AutoN2_Color2", content);AUTO_COLOR2[extraid][1] = strval(content);
            cache_get_field_content(0,"Neones2", content);NEONES_AUTO[extraid][1] = strval(content);
            cache_get_field_content(0,"TieneAutoN2", content);TIENE_AUTO[extraid][1] = strval(content);
            cache_get_field_content(0,"AutoN3_Modelo", content);MODELO_AUTO[extraid][2] = strval(content);
            cache_get_field_content(0,"AutoN3_Ruedas", content);RUEDAS_AUTO[extraid][2] = strval(content);
            cache_get_field_content(0,"AutoN3_PaintJobs", content);AUTO_PAINTJOB[extraid][2] = strval(content);
            cache_get_field_content(0,"AutoN3_Color1", content);AUTO_COLOR[extraid][2] = strval(content);
            cache_get_field_content(0,"AutoN3_Color2", content);AUTO_COLOR2[extraid][2] = strval(content);
            cache_get_field_content(0,"Neones3", content);NEONES_AUTO[extraid][2] = strval(content);
            cache_get_field_content(0,"TieneAutoN3", content);TIENE_AUTO[extraid][2] = strval(content);
            cache_get_field_content(0,"TienePintura1", content);TIENE_PINTURA[extraid][0] = strval(content);
            cache_get_field_content(0,"TienePintura2", content);TIENE_PINTURA[extraid][1] = strval(content);
            cache_get_field_content(0,"TienePintura3", content);TIENE_PINTURA[extraid][2] = strval(content);
            cache_get_field_content(0,"Rango", content);NIVEL_KILLS[extraid] = strval(content);
            cache_get_field_content(0,"RacePerdidas", content);RacesSx[extraid] = strval(content);
            cache_get_field_content(0,"ModoPelea", content);MODO_PELEA[extraid] = strval(content);
            cache_get_field_content(0,"Equipo", content);Equipo[extraid] = strval(content);
            cache_get_field_content(0,"Displays", content);DISPLAYS[extraid] = strval(content);
            cache_get_field_content(0, "VIPpPosX", content);VIPPosX[extraid] = floatstr(content);
            cache_get_field_content(0, "VIPpPosY", content);VIPPosY[extraid] = floatstr(content);
            cache_get_field_content(0, "VIPpPosZ", content);VIPPosZ[extraid] = floatstr(content);
            cache_get_field_content(0, "VIPpPosA", content);VIPPosA[extraid] = floatstr(content);
            cache_get_field_content(0,"VIPpPos", content);VIPps[extraid] = strval(content);
            cache_get_field_content(0,"HydraC", content);TIENE_HYDRA[extraid] = strval(content);
            cache_get_field_content(0,"RacesIndividuales", content);CarreraGanadasIndividuales[extraid] = strval(content);
            cache_get_field_content(0,"RacesIndividualesPerdidas", content);CarreraPerdidasIndividuales[extraid] = strval(content);
            cache_get_field_content(0,"AutoFix", content);aFix[extraid] = strval(content);
            cache_get_field_content(0,"Turbo", content);NoJump[extraid] = strval(content);
            cache_get_field_content(0,"Salto", content);NoSALTO[extraid] = strval(content);
            cache_get_field_content(0,"TieneSpawn", content);TieneSpawnJugador[extraid] = strval(content);
            cache_get_field_content(0, "MiSpawnX", content);MiSpawn[0][extraid] = floatstr(content);
            cache_get_field_content(0, "MiSpawnY", content);MiSpawn[1][extraid] = floatstr(content);
            cache_get_field_content(0, "MiSpawnZ", content);MiSpawn[2][extraid] = floatstr(content);
            cache_get_field_content(0,"MiSpawnIntA", content); MiSpawnInt[extraid] = strval(content);
            cache_get_field_content(0,"PuntosDM", content); PuntosDM[extraid] = strval(content);
            cache_get_field_content(0,"CARMAs1", content); CArma[extraid][0] = strval(content);
            cache_get_field_content(0,"CArma2s1", content); CArma[extraid][1] = strval(content);
            cache_get_field_content(0,"CArma3s1", content); CArma[extraid][2] = strval(content);
            cache_get_field_content(0,"CArma4s1", content); CArma[extraid][3] = strval(content);
            cache_get_field_content(0,"CArma5s1", content); CArma[extraid][4] = strval(content);
            cache_get_field_content(0,"CARMAs2", content); CArma[extraid][5] = strval(content);
            cache_get_field_content(0,"CArma2s2", content); CArma[extraid][6] = strval(content);
            cache_get_field_content(0,"CArma3s2", content); CArma[extraid][7] = strval(content);
            cache_get_field_content(0,"CArma4s2", content); CArma[extraid][8] = strval(content);
            cache_get_field_content(0,"CArma5s2", content); CArma[extraid][9] = strval(content);
            cache_get_field_content(0,"CARMAs3", content); CArma[extraid][10] = strval(content);
            cache_get_field_content(0,"CArma2s3", content); CArma[extraid][11] = strval(content);
            cache_get_field_content(0,"CArma3s3", content); CArma[extraid][12] = strval(content);
            cache_get_field_content(0,"CArma4s3", content); CArma[extraid][13] = strval(content);
            cache_get_field_content(0,"CArma5s3", content); CArma[extraid][14] = strval(content);
            cache_get_field_content(0,"CArmaSpawn", content); CArma[extraid][20] = strval(content);
            cache_get_field_content(0,"MPSONOFF", content); NoMPS[extraid] = strval(content);
            cache_get_field_content(0,"TT0", content); TT[extraid][0] = strval(content);
            cache_get_field_content(0,"TT1", content); TT[extraid][1] = strval(content);
            cache_get_field_content(0,"TT2", content); TT[extraid][2] = strval(content);
            cache_get_field_content(0,"Advertencias", content); JugadorAK[extraid][0] = strval(content);
            cache_get_field_content(0,"Kicks", content); JugadorAK[extraid][1] = strval(content);
            cache_get_field_content(0,"TT3", content); TT[extraid][3] = strval(content);
            cache_get_field_content(0,"TT4", content); TT[extraid][4] = strval(content);
            cache_get_field_content(0,"TT5", content); TT[extraid][5] = strval(content);
            cache_get_field_content(0,"MaxKills", content); MAX_KILLSASESINO[extraid] = strval(content);
            cache_get_field_content(0,"KillsAsesinoRango", content); KillsAsesino[extraid] = strval(content);
            cache_get_field_content(0, "Clan", Clan_Jugador[extraid]);
            cache_get_field_content(0, "NombredeClan", Clan_JugadorCompleto[extraid]);
            cache_get_field_content(0,"EnClanJugador", content); EnClan[extraid] = strval(content);
            cache_get_field_content(0,"RangoClan", content); RangoClan[extraid] = strval(content);
            cache_get_field_content(0,"VidaPrecio", content); PrecioVidaArm[0][extraid] = strval(content);
            cache_get_field_content(0,"ArmaduraPrecio", content); PrecioVidaArm[1][extraid] = strval(content);
            cache_get_field_content(0,"Encarcelado", content); Encarcelado[extraid] = strval(content);
            cache_get_field_content(0,"JailMin", content); Digito1Jail[extraid] = strval(content);
            cache_get_field_content(0,"JailSeg", content); Digito2Jail[extraid] = strval(content);
            cache_get_field_content(0,"Muteado", content); Mute[extraid] = strval(content);
            cache_get_field_content(0,"MinMute", content); Digito1Mute[extraid] = strval(content);
            cache_get_field_content(0,"MuteSeg", content); Digito2Mute[extraid] = strval(content);
			MensajeNO[extraid] = 1;
            }
            else if(!Rows)
            {
               //
            }
        }
        case 2:
        {
            if(Rows == 1)
            {
       			if(MensajeNOO[extraid] == 0)
    			{
                new pName[24]; GetPlayerName(extraid, pName, 24);
                cache_get_field_content(0, "Password", PlayerInfo[extraid][Password]);
                cache_get_field_content(0, "IP", IPa[extraid]);
                new Ipp[16];
				GetPlayerIp(extraid, Ipp, sizeof(Ipp));
				if(!strcmp(Ipp, IPa[extraid], true))
				{
		    		new MesTEXT[15], stringTT[110];
					if (TT[extraid][4] == 1) MesTEXT = "Enero";
    				if (TT[extraid][4] == 2) MesTEXT = "Febrero";
    				if (TT[extraid][4] == 3) MesTEXT = "Marzo";
    				if (TT[extraid][4] == 4) MesTEXT = "Abril";
    				if (TT[extraid][4] == 5) MesTEXT = "Mayo";
    				if (TT[extraid][4] == 6) MesTEXT = "Junio";
    				if (TT[extraid][4] == 7) MesTEXT = "Julio";
    				if (TT[extraid][4] == 8) MesTEXT = "Agosto";
    				if (TT[extraid][4] == 9) MesTEXT = "Septiembre";
    				if (TT[extraid][4] == 10) MesTEXT = "Octubre";
    				if (TT[extraid][4] == 11) MesTEXT = "Noviembre";
    				if (TT[extraid][4] == 12) MesTEXT = "Diciembre";
					format(stringTT, sizeof(stringTT), "{00DEFF}* %s bienvenido de nuevo tu última conexión fue %d-%s-%d.", GetName(extraid), TT[extraid][3], MesTEXT, TT[extraid][5]);
					SendClientMessage(extraid, -1, stringTT);
					SendClientMessage(extraid, -1, "{00DEFF} Posees el autologin activado, fuiste automaticamente spawneado.");
					SendClientMessage(extraid, -1, "{FFFFFF} Recuerda que si no deseas tener activo el auto-login puedes escribir: /noautologin.");
					JugadorRegistrado[extraid] = 1;
					JugadorIngresado[extraid] = 1;
					Spawnear[extraid] = 1;
					MensajeNOO[extraid] = 1;
					PlayerTextDrawHide(extraid, InicioSesionTD[extraid]);
					KillTimer(InicioSesionTime[extraid]);
					Cargar_DatosTimer[extraid] = SetTimerEx("CARGAR_DATOS_JUGADOR", 2000, false, "i", extraid);
					format(queryx, sizeof(queryx), "SELECT * FROM `jugadores` WHERE `Nombre` = '%s'", pName);
                	mysql_function_query(Conexion, queryx, true, "OnQueryFinish", "ii", 1, extraid);
				}
				else
				{
   					if(MensajeNOO[extraid] == 0)
    				{
		    		new MesTEXT[15], stringTT[110];
					if (TT[extraid][4] == 1) MesTEXT = "Enero";
    				if (TT[extraid][4] == 2) MesTEXT = "Febrero";
    				if (TT[extraid][4] == 3) MesTEXT = "Marzo";
    				if (TT[extraid][4] == 4) MesTEXT = "Abril";
    				if (TT[extraid][4] == 5) MesTEXT = "Mayo";
    				if (TT[extraid][4] == 6) MesTEXT = "Junio";
    				if (TT[extraid][4] == 7) MesTEXT = "Julio";
    				if (TT[extraid][4] == 8) MesTEXT = "Agosto";
    				if (TT[extraid][4] == 9) MesTEXT = "Septiembre";
    				if (TT[extraid][4] == 10) MesTEXT = "Octubre";
    				if (TT[extraid][4] == 11) MesTEXT = "Noviembre";
    				if (TT[extraid][4] == 12) MesTEXT = "Diciembre";
					format(stringTT, sizeof(stringTT), "{00DEFF}* %s bienvenido de nuevo tu última conexión fue %d-%s-%d.", GetName(extraid), TT[extraid][3], MesTEXT, TT[extraid][5]);
					SendClientMessage(extraid, -1, stringTT);
					ShowPlayerDialog(extraid, INGRESO, DIALOG_STYLE_INPUT, "{FFFFFF}Login:", "{FFFFFF}Ingresa tu contraseña para iniciar sesión","Aceptar","Kick");
					JugadorRegistrado[extraid] = 1;
					JugadorIngresado[extraid] = 1;
					MensajeNOO[extraid] = 1;
					tiempois[extraid] = 50;
					InicioSesionTime[extraid] = SetTimerEx("TiempoDeInicio", 1500, true, "i", extraid);
					format(queryx, sizeof(queryx), "SELECT * FROM `jugadores` WHERE `Nombre` = '%s'", pName);
               	 	mysql_function_query(Conexion, queryx, true, "OnQueryFinish", "ii", 1, extraid);
				}
			}
		}
		}
        else if(!Rows)
        {
        	if(MensajeNO[extraid] == 0)
    		{
    			SendClientMessage(extraid, -1, "{00DEFF} Bienvenido a VirtualZone Freeroam/DM - Versión 1.0!");
            	SendClientMessage(extraid, -1, "{00DEFF}* No estás registrado en nuestro servidor, escribe: /register para crear una cuenta nueva.");
				SendClientMessage(extraid, -1, "{00DEFF} Recuerda que si no te registras tu progreso(EXP, Dinero y más) no se guardarán.");
				PonerSkin[extraid] = 1;
				JugadorRegistrado[extraid] = 0;
				MensajeNO[extraid] = 1;
				Muertes[extraid] = 1;
			}
        }
	}
	}
    return 1;
}

funcion TiempoDeInicio(playerid)
{
	new stryng[120], IP[16];
	if(tiempois[playerid] >= 2)
	{
		tiempois[playerid] -= 1;
	}
	else if(tiempois[playerid] == 1)
	{
	    KillTimer(InicioSesionTime[playerid]);
        PlayerTextDrawHide(playerid, InicioSesionTD[playerid]);
        GameTextForPlayer(playerid, "~n~~n~~r~~h~~h~Kickeado!", 2000000000000, 3);
        SendClientMessage(playerid, Rojo, "* Has superado el tiempo máximo de inicio de sesión.");
		GetPlayerIp(playerid, IP, sizeof(IP));
		format(stryng, sizeof(stryng), "* AdminInfo: %s fue kickeado por posible robo de cuenta(admin) - [IP: %s].", GetName(playerid), IP);
		AdminInfoOtro(stryng);
		KickTime[playerid] = SetTimerEx("KickPlayer", 500, 1, "ii", playerid, playerid);
	}
	format(stryng, sizeof(stryng), "_~n~Inicia sesion:~n~ %d segundos", tiempois[playerid]);
	PlayerTextDrawSetString(playerid, InicioSesionTD[playerid], stryng);
	PlayerTextDrawShow(playerid, InicioSesionTD[playerid]);
	return 1;
}

stock UserPath(playerid)
{
    new string[128],playername[MAX_PLAYER_NAME];
    GetPlayerName(playerid,playername,sizeof(playername));
    format(string,sizeof(string),PATH,playername);
    return string;
}

funcion CARGAR_DATOS_JUGADOR(playerid)
{
	KillTimer(InicioSesionTime[playerid]);
	PlayerTextDrawHide(playerid, InicioSesionTD[playerid]);
	JugadorLogeado[playerid][0] = 1;
	JugadorIngresado[playerid] = 1;
	if(DarTuto[playerid] != 1) PonerSkin[playerid] = 0;
	JugadorLogeado[playerid][1] = 1;
	IPActualizar[playerid] = 1;
	KillTimerEx(playerid, 9);
	SetCameraBehindPlayer(playerid);
	SpawnPlayer(playerid);
	new Ipp[16], query[128], Cache:result;
	GetPlayerIp(playerid, Ipp, sizeof(Ipp));
	format(queryx, sizeof(queryx), "UPDATE `jugadores` SET `IP`='%s' WHERE Nombre='%s'", Ipp, GetName(playerid));
   	mysql_function_query(Conexion, queryx, true, "OnQueryFinish", "ii", 2, playerid);
 	//Clanes Cargar
 	mysql_format(Conexion, query, sizeof(query), "SELECT IDClan, RangoClan FROM ClanesMiembros WHERE NombreMiembro = '%s'", GetName(playerid));
	result = mysql_query(Conexion, query);
	if(cache_get_row_count(Conexion) != 0)
	{
		static tskin, tcolor, stringc[128], stringcc[128], clanid, temp[17], tantitk;
		Clan_ID[playerid] = cache_get_row_int(0, 0, Conexion);
		RangoClan[playerid] = cache_get_row_int(0, 1, Conexion);
		cache_delete(result, Conexion);
		mysql_format(Conexion, query, sizeof(query), "SELECT ClanColor, ClanSkin, AntiTeamKill, NombreClan, ClanColorGangZone FROM Clanes WHERE IDClan = %d", Clan_ID[playerid]);
		result = mysql_query(Conexion, query);
		tcolor = cache_get_row_int(0, 0, Conexion);
		tskin = cache_get_row_int(0, 1, Conexion);
		tantitk = cache_get_row_int(0, 2, Conexion);
		ColorClanGangZone[playerid] = cache_get_row_int(0, 4, Conexion);
        cache_get_field_content(0, "NombreClan", temp, Conexion, sizeof(temp));
		strmid(Clan_JugadorCompleto[playerid], temp, 0, 17, 17);
		cache_delete(result, Conexion);
		if(tskin != -1)
			SkinClan[playerid] = tskin;
		if(tcolor != -1)
			SetPlayerColor(playerid, tcolor);
			ColorClan[playerid] = GetPlayerColor(playerid);
		if(tantitk > 1)
		    SetPlayerTeam(playerid, Clan_ID[playerid]);
			AntiTeamKill[playerid] = 1;
  		EnClan[playerid] = 1;
		format(stringc, sizeof(stringc), "Clan: ~p~~h~%s~w~~h~.", Clan_JugadorCompleto[playerid]);
		ClanInfoTD(playerid, stringc);
		clanid = Clan_ID[playerid];
		GetPlayerName(playerid, NombreJugadorEnClan[playerid], 32);
		format(stringcc, sizeof(stringcc), "{59FF00}<%s> Clan: %s(%d) ha sido identificado como %s del clan.", Clan_JugadorCompleto[playerid], GetName(playerid), playerid, RangosClans[RangoClan[playerid]-1]);
		foreach(new i : Player)
		{
       		if(IsPlayerConnected(i))
         	{
          		if(Clan_ID[i] == clanid)
            	{
             		SendClientMessage(i, -1, stringcc);
                }
            }
		}
	}
	cache_delete(result, Conexion);
	return 1;
}

stock ClanInfoTD(playerid, text[])
{
     new X[100];
     format(X, sizeof(X), "%s", text);
     PTDString(playerid, TEXTCLAN[playerid], X);
     PTDShow(playerid, TEXTCLAN[playerid]);
     return 1;
}

funcion REGISTRAR_JUGADOR(playerid, passworda[])
{
	static stringI[100], MesTEXT[15];
	getdate(TT[playerid][3], TT[playerid][4], TT[playerid][5]);
	if(TT[playerid][4] == 1) MesTEXT = "Enero";
	if(TT[playerid][4] == 2) MesTEXT = "Febrero";
	if(TT[playerid][4] == 3) MesTEXT = "Marzo";
	if(TT[playerid][4] == 4) MesTEXT = "Abril";
	if(TT[playerid][4] == 5) MesTEXT = "Mayo";
	if(TT[playerid][4] == 6) MesTEXT = "Junio";
	if(TT[playerid][4] == 7) MesTEXT = "Julio";
	if(TT[playerid][4] == 8) MesTEXT = "Agosto";
	if(TT[playerid][4] == 9) MesTEXT = "Septiembre";
	if(TT[playerid][4] == 10) MesTEXT = "Octubre";
	if(TT[playerid][4] == 11) MesTEXT = "Noviembre";
	if(TT[playerid][4] == 12) MesTEXT = "Diciembre";
    format(stringI, sizeof(stringI), "{00D200}Contraseña: '%s' - Fecha de registro: '%d/%s/%d'.", passworda, TT[playerid][5],  MesTEXT, TT[playerid][3]);
    SendClientMessage(playerid, -1, "{00D200}Felicidades te has registrado en nuestro servidor correctamente. A continuación tus datos:");
    SendClientMessage(playerid, -1, stringI);
    SendClientMessage(playerid, -1, "{00D200}* No olvides usar: /comandos[1-4] o /ayuda para ver la lista completa de comandos disponibles!");
    //SendClientMessage(playerid, -1, "{00D200}*** Para finalizar el proceso de registro por favor logeate: /login [contraseña] o simplemente /login.");
	GetPlayerIp(playerid, IPa[playerid], 16);
	NIVEL_KILLS[playerid] = 0;
	MAX_KILLSASESINO[playerid] = 1;
	KillsAsesino[playerid] = 0;
    
	new string2[50];
	new pName[24], Query[256];
    GetPlayerName(playerid, pName, 24);
    format(string2, sizeof(string2), "%s", passworda); PlayerInfo[playerid][Password] = string2;
    format(Query, sizeof(Query), "INSERT INTO `jugadores` (Nombre, Password) VALUES ('%s', '%s')",pName, PlayerInfo[playerid][Password]);
    mysql_function_query(Conexion, Query, true, "OnQueryFinish", "ii", 0, playerid);
    format(queryx, sizeof(queryx), "UPDATE `jugadores` SET `TT0`='%d', `TT1`='%d', `TT2`='%d' WHERE Nombre='%s'", TT[playerid][3], TT[playerid][4], TT[playerid][5], GetName(playerid));
   	mysql_function_query(Conexion, queryx, true, "OnQueryFinish", "ii", 2, playerid);
   	new Ipp[16];
	GetPlayerIp(playerid, Ipp, sizeof(Ipp));
	format(queryx, sizeof(queryx), "UPDATE `jugadores` SET `IP`='%s', `MaxKills`='%d' WHERE Nombre='%s'", Ipp, MAX_KILLSASESINO[playerid], GetName(playerid));
   	mysql_function_query(Conexion, queryx, true, "OnQueryFinish", "ii", 2, playerid);
   	MensajeNO[playerid] = 1;
    NIVEL_KILLS[playerid] = 1; EstadisticasInfo(playerid);
	JugadorRegistrado[playerid] = 2;
 	GetPlayerName(playerid, pName, 24);
	format(Query, sizeof(Query), "SELECT * FROM `jugadores` WHERE `Nombre` = '%s'", pName);
	mysql_function_query(Conexion, Query, true, "OnQueryFinish", "ii", 1, playerid);
 	JugadorIngresado[playerid] = 1;
    return 1;
}

//Funcion Mensaje
funcion MensajeAscenso(playerid)
{
	if(ClanMensajeRangos[playerid] >= 0 && ClanMensajeRangos[playerid] < MAX_PLAYERS_CLAN_MIEMBROS)
	{
		ClanMensajeRangos[playerid]++;
	}
	if(ClanMensajeRangos[playerid] == MAX_PLAYERS_CLAN_MIEMBROS)
	{
		new stringc[80];
		format(stringc, sizeof(stringc), "{59FF00}<%s> %s ha sido promovido a Vicepresidente del clan.", Clan_TAG[playerid], NombreJugadorClan[playerid]);
		SendClientMessageToAll(-1, stringc);
		ClanMensajeRangos[playerid] = 0;
	}
	return 1;
}

funcion JugadorNoLocalizado(playerid)
{
	if(ClanNoLocalizado[playerid] >= 1 && ClanNoLocalizado[playerid] < MAX_PLAYERS_CLAN_MIEMBROS)
	{
		ClanNoLocalizado[playerid]++;
	}
	else if(ClanNoLocalizado[playerid] == MAX_PLAYERS_CLAN_MIEMBROS)
	{
		if(NoEnviarMensajeClan[playerid] == 1)
		{
			SendClientMessage(playerid, -1, "El jugador no fue encontrado en el clan.");
			ClanNoLocalizado[playerid] = 1;
		}
	}
	return 1;
}

//------------------------------------------------

GetNumberOfPages()
{
	if((gTotalItems >= SELECTION_ITEMS) && (gTotalItems % SELECTION_ITEMS) == 0)
	{
		return (gTotalItems / SELECTION_ITEMS);
	}
	else return (gTotalItems / SELECTION_ITEMS) + 1;
}

//------------------------------------------------

PlayerText:CreateCurrentPageTextDraw(playerid, Float:Xpos, Float:Ypos)
{
	new PlayerText:txtInit;
   	txtInit = CreatePlayerTextDraw(playerid, Xpos, Ypos, "0/0");
   	PlayerTextDrawUseBox(playerid, txtInit, 0);
	PlayerTextDrawLetterSize(playerid, txtInit, 0.4, 1.1);
	PlayerTextDrawFont(playerid, txtInit, 1);
	PlayerTextDrawSetShadow(playerid, txtInit, 0);
    PlayerTextDrawSetOutline(playerid, txtInit, 1);
    PlayerTextDrawColor(playerid, txtInit, 0xACCBF1FF);
    PlayerTextDrawShow(playerid, txtInit);
    return txtInit;
}

//------------------------------------------------
// Creates a button textdraw and returns the textdraw ID.

PlayerText:CreatePlayerDialogButton(playerid, Float:Xpos, Float:Ypos, Float:Width, Float:Height, button_text[])
{
 	new PlayerText:txtInit;
   	txtInit = CreatePlayerTextDraw(playerid, Xpos, Ypos, button_text);
   	PlayerTextDrawUseBox(playerid, txtInit, 1);
   	PlayerTextDrawBoxColor(playerid, txtInit, 0x000000FF);
   	PlayerTextDrawBackgroundColor(playerid, txtInit, 0x000000FF);
	PlayerTextDrawLetterSize(playerid, txtInit, 0.4, 1.1);
	PlayerTextDrawFont(playerid, txtInit, 1);
	PlayerTextDrawSetShadow(playerid, txtInit, 0); // no shadow
    PlayerTextDrawSetOutline(playerid, txtInit, 0);
    PlayerTextDrawColor(playerid, txtInit, 0x4A5A6BFF);
    PlayerTextDrawSetSelectable(playerid, txtInit, 1);
    PlayerTextDrawAlignment(playerid, txtInit, 2);
    PlayerTextDrawTextSize(playerid, txtInit, Height, Width); // The width and height are reversed for centering.. something the game does <g>
    PlayerTextDrawShow(playerid, txtInit);
    return txtInit;
}

//------------------------------------------------

PlayerText:CreatePlayerHeaderTextDraw(playerid, Float:Xpos, Float:Ypos, header_text[])
{
	new PlayerText:txtInit;
   	txtInit = CreatePlayerTextDraw(playerid, Xpos, Ypos, header_text);
   	PlayerTextDrawUseBox(playerid, txtInit, 0);
	PlayerTextDrawLetterSize(playerid, txtInit, 1.25, 3.0);
	PlayerTextDrawFont(playerid, txtInit, 0);
	PlayerTextDrawSetShadow(playerid, txtInit, 0);
    PlayerTextDrawSetOutline(playerid, txtInit, 1);
    PlayerTextDrawColor(playerid, txtInit, 0xACCBF1FF);
    PlayerTextDrawShow(playerid, txtInit);
    return txtInit;
}

//------------------------------------------------

PlayerText:CreatePlayerBackgroundTextDraw(playerid, Float:Xpos, Float:Ypos, Float:Width, Float:Height)
{
	new PlayerText:txtBackground = CreatePlayerTextDraw(playerid, Xpos, Ypos,
	"                                            ~n~"); // enough space for everyone
    PlayerTextDrawUseBox(playerid, txtBackground, 1);
    PlayerTextDrawBoxColor(playerid, txtBackground, 0x00000099);
	PlayerTextDrawLetterSize(playerid, txtBackground, 5.0, 5.0);
	PlayerTextDrawFont(playerid, txtBackground, 0);
	PlayerTextDrawSetShadow(playerid, txtBackground, 0);
    PlayerTextDrawSetOutline(playerid, txtBackground, 0);
    PlayerTextDrawColor(playerid, txtBackground,0x000000FF);
    PlayerTextDrawTextSize(playerid, txtBackground, Width, Height);
   	PlayerTextDrawBackgroundColor(playerid, txtBackground, 0x00000099);
    PlayerTextDrawShow(playerid, txtBackground);
    return txtBackground;
}

//------------------------------------------------
// Creates a model preview sprite

PlayerText:CreateModelPreviewTextDraw(playerid, modelindex, Float:Xpos, Float:Ypos, Float:width, Float:height)
{
    new PlayerText:txtPlayerSprite = CreatePlayerTextDraw(playerid, Xpos, Ypos, ""); // it has to be set with SetText later
    PlayerTextDrawFont(playerid, txtPlayerSprite, TEXT_DRAW_FONT_MODEL_PREVIEW);
    PlayerTextDrawColor(playerid, txtPlayerSprite, 0xFFFFFFFF);
    PlayerTextDrawBackgroundColor(playerid, txtPlayerSprite, 0x000000EE);
    PlayerTextDrawTextSize(playerid, txtPlayerSprite, width, height); // Text size is the Width:Height
    PlayerTextDrawSetPreviewModel(playerid, txtPlayerSprite, modelindex);
    PlayerTextDrawSetPreviewRot(playerid,txtPlayerSprite, -16.0, 0.0, -55.0);
    PlayerTextDrawSetSelectable(playerid, txtPlayerSprite, 1);
    PlayerTextDrawShow(playerid,txtPlayerSprite);
    return txtPlayerSprite;
}

//------------------------------------------------

DestroyPlayerModelPreviews(playerid)
{
	new x=0;
	while(x != SELECTION_ITEMS) {
	    if(gSelectionItems[playerid][x] != PlayerText:INVALID_TEXT_DRAW) {
			PlayerTextDrawDestroy(playerid, gSelectionItems[playerid][x]);
			gSelectionItems[playerid][x] = PlayerText:INVALID_TEXT_DRAW;
		}
		x++;
	}
}

//------------------------------------------------

ShowPlayerModelPreviews(playerid)
{
    new x=0;
	new Float:BaseX = DIALOG_BASE_X;
	new Float:BaseY = DIALOG_BASE_Y - (SPRITE_DIM_Y * 0.33); // down a bit
	new linetracker = 0;

	new itemat = GetPVarInt(playerid, "vspawner_page") * SELECTION_ITEMS;

	// Destroy any previous ones created
	DestroyPlayerModelPreviews(playerid);

	while(x != SELECTION_ITEMS && itemat < gTotalItems) {
	    if(linetracker == 0) {
	        BaseX = DIALOG_BASE_X + 25.0; // in a bit from the box
	        BaseY += SPRITE_DIM_Y + 1.0; // move on the Y for the next line
		}
  		gSelectionItems[playerid][x] = CreateModelPreviewTextDraw(playerid, gItemList[itemat], BaseX, BaseY, SPRITE_DIM_X, SPRITE_DIM_Y);
  		gSelectionItemsTag[playerid][x] = gItemList[itemat];
		BaseX += SPRITE_DIM_X + 1.0; // move on the X for the next sprite
		linetracker++;
		if(linetracker == ITEMS_PER_LINE) linetracker = 0;
		itemat++;
		x++;
	}
}

//------------------------------------------------

UpdatePageTextDraw(playerid)
{
	new PageText[64+1];
	format(PageText, 64, "%d/%d", GetPVarInt(playerid,"vspawner_page") + 1, GetNumberOfPages());
	PlayerTextDrawSetString(playerid, gCurrentPageTextDrawId[playerid], PageText);
}

//------------------------------------------------

CreateSelectionMenu(playerid)
{
    gBackgroundTextDrawId[playerid] = CreatePlayerBackgroundTextDraw(playerid, DIALOG_BASE_X, DIALOG_BASE_Y + 20.0, DIALOG_WIDTH, DIALOG_HEIGHT);
    gHeaderTextDrawId[playerid] = CreatePlayerHeaderTextDraw(playerid, DIALOG_BASE_X, DIALOG_BASE_Y, HEADER_TEXT);
    gCurrentPageTextDrawId[playerid] = CreateCurrentPageTextDraw(playerid, DIALOG_WIDTH - 30.0, DIALOG_BASE_Y + 15.0);
    gNextButtonTextDrawId[playerid] = CreatePlayerDialogButton(playerid, DIALOG_WIDTH - 30.0, DIALOG_BASE_Y+DIALOG_HEIGHT+100.0, 50.0, 16.0, NEXT_TEXT);
    gPrevButtonTextDrawId[playerid] = CreatePlayerDialogButton(playerid, DIALOG_WIDTH - 90.0, DIALOG_BASE_Y+DIALOG_HEIGHT+100.0, 50.0, 16.0, PREV_TEXT);

    ShowPlayerModelPreviews(playerid);
    UpdatePageTextDraw(playerid);
}

//------------------------------------------------

DestroySelectionMenu(playerid)
{
	DestroyPlayerModelPreviews(playerid);

	PlayerTextDrawDestroy(playerid, gHeaderTextDrawId[playerid]);
	PlayerTextDrawDestroy(playerid, gBackgroundTextDrawId[playerid]);
	PlayerTextDrawDestroy(playerid, gCurrentPageTextDrawId[playerid]);
	PlayerTextDrawDestroy(playerid, gNextButtonTextDrawId[playerid]);
	PlayerTextDrawDestroy(playerid, gPrevButtonTextDrawId[playerid]);

	gHeaderTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    gBackgroundTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    gCurrentPageTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    gNextButtonTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    gPrevButtonTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
}

//------------------------------------------------

SpawnVehicle_InfrontOfPlayer(playerid, vehiclemodel)
{
	new Float:x,Float:y,Float:z;
	new Float:facing;
	new Float:distance;

    GetPlayerPos(playerid, x, y, z);
    GetPlayerFacingAngle(playerid, facing);

    new Float:size_x,Float:size_y,Float:size_z;
	GetVehicleModelInfo(vehiclemodel, VEHICLE_MODEL_INFO_SIZE, size_x, size_y, size_z);

	distance = size_x + 0.5;

  	x += (distance * floatsin(-facing, degrees));
    y += (distance * floatcos(-facing, degrees));

	facing += 90.0;
	if(facing > 360.0) facing -= 360.0;

	return CrearVehiculo(playerid, vehiclemodel);
}

//------------------------------------------------

HandlePlayerItemSelection(playerid, selecteditem)
{
 	// In this case we're spawning a vehicle for them
    SpawnVehicle_InfrontOfPlayer(playerid, gSelectionItemsTag[playerid][selecteditem]);
}

//------------------------------------------------

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
   	if(GetPVarInt(playerid, "vspawner_active") == 0) return 0;

	// Handle: They cancelled (with ESC)
	if(clickedid == Text:INVALID_TEXT_DRAW) {
        DestroySelectionMenu(playerid);
        SetPVarInt(playerid, "vspawner_active", 0);
        PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
        return 1;
	}

	return 0;
}

//------------------------------------------------

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	if(GetPVarInt(playerid, "vspawner_active") == 0) return 0;

	new curpage = GetPVarInt(playerid, "vspawner_page");

	// Handle: next button
	if(playertextid == gNextButtonTextDrawId[playerid]) {
	    if(curpage < (GetNumberOfPages() - 1)) {
	        SetPVarInt(playerid, "vspawner_page", curpage + 1);
	        ShowPlayerModelPreviews(playerid);
         	UpdatePageTextDraw(playerid);
         	PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
		} else {
		    PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		}
		return 1;
	}

	// Handle: previous button
	if(playertextid == gPrevButtonTextDrawId[playerid]) {
	    if(curpage > 0) {
	    	SetPVarInt(playerid, "vspawner_page", curpage - 1);
	    	ShowPlayerModelPreviews(playerid);
	    	UpdatePageTextDraw(playerid);
	    	PlayerPlaySound(playerid, 1084, 0.0, 0.0, 0.0);
		} else {
		    PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		}
		return 1;
	}

	// Search in the array of textdraws used for the items
	new x=0;
	while(x != SELECTION_ITEMS) {
	    if(playertextid == gSelectionItems[playerid][x]) {
	        HandlePlayerItemSelection(playerid, x);
	        PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
	        DestroySelectionMenu(playerid);
	        CancelSelectTextDraw(playerid);
        	SetPVarInt(playerid, "vspawner_active", 0);
        	return 1;
		}
		x++;
	}

	return 0;
}

// STOCKS VARIOS:
stock GetName(playerid)
{
    new nnombree[MAX_PLAYER_NAME];
    GetPlayerName(playerid, nnombree, sizeof(nnombree));
    return nnombree;
}

funcion AutoVehicleColorChange(playerid)
{
	if(avcc[playerid] == 1)
	{
	if (IsPlayerInAnyVehicle(playerid)&&(GetPlayerState(playerid)==PLAYER_STATE_DRIVER))
	{
	new vehicleid;
	vehicleid = GetPlayerVehicleID(playerid);
	new rand = random(126)+0;
	new rand1 = random(126)+0;
	ChangeVehicleColor(vehicleid, rand, rand1);
	}
	}
	return 1;
}

stock ErrorAdmin(playerid, nivelrequerido)
{
 	format(stringj, sizeof(stringj), "Comando solo para administradores nivel %d.", nivelrequerido);
	SendClientMessage(playerid, Rojo, stringj);
	return 1;
}

stock ErrorVIP(playerid, nivelrequerido)
{
	new string[150];
 	format(string, sizeof(string), "{FF7F6A}Comando solo para VIP%d.", nivelrequerido);
	SendClientMessage(playerid, -1, string);
	return 1;
}

stock Reporte(const string[])
{
	for(new adminid=0; adminid <MP; adminid++)
	{
		if (Administrador[adminid] >= 1)
		{
            SendClientMessage(adminid, Blanco, "");
            SendClientMessage(adminid, Blanco, "====================================================================");
			SendClientMessage(adminid, -1, string);
		}
	}
	return 1;
}

stock Reporte2(const string[])
{
	for(new adminid=0; adminid <MP; adminid++)
	{
		if (Administrador[adminid] >= 1)
		{
            SendClientMessage(adminid, Blanco, string);
            SendClientMessage(adminid, Blanco, "*** {00C4FF}El reporte fue adjuntado a la lista de último reportes: /reportes.");
            SendClientMessage(adminid, Blanco, "====================================================================");
            SendClientMessage(adminid, Blanco, "");
		}
	}
	return 1;
}

stock MensajeConsola(const string[])
{
	for(new i=0; i<MP; i++)
	{
		if (CHAT[i] == 0)
		{
            SendClientMessage(i, Blanco, string);
		}
	}
	return 0;
}

stock AdminInfo(const string[])
{
	for(new adminid=0; adminid <MP; adminid++)
	{
		if (Administrador[adminid] >= 1 && pCMDS[adminid] > 0)
		{
			SendClientMessage(adminid, Gris4, string);
		}
	}
	return 1;
}

stock AdminInfo2(const string[])
{
	for(new adminid=0; adminid <MP; adminid++)
	{
		if (Administrador[adminid] >= 1 && pMPs[adminid] > 0)
		{
			SendClientMessage(adminid, Gris4, string);
		}
	}
	return 1;
}

stock AdminInfoOtro(const string[])
{
	for(new adminid=0; adminid <MP; adminid++)
	{
		if (Administrador[adminid] >= 1)
		{
			SendClientMessage(adminid, Gris4, string);
		}
	}
	return 1;
}

stock AdminInfoDUDA(const string[])
{
	for(new adminid=0; adminid <MP; adminid++)
	{
		if (Administrador[adminid] >= 1)
		{
			SendClientMessage(adminid, -1, string);
		}
	}
	return 1;
}

//FUNCIONCLAN
stock ClanColorChange(playerid, ColorRGB, GangZoneColor)
{
    new query[100], Cache:result, stringc[128];
	mysql_format(Conexion, query, sizeof(query), "SELECT IDClan, RangoClan FROM ClanesMiembros WHERE NombreMiembro = '%s'", GetName(playerid));
	result = mysql_query(Conexion, query);
	if(cache_get_row_count(Conexion) != 0)
	{
		cache_delete(result, Conexion);
	    mysql_format(Conexion, query, sizeof(query), "UPDATE Clanes SET ClanColor = '%d', ClanColorGangzone = '%d' WHERE IDClan ='%d'", ColorRGB, GangZoneColor, Clan_ID[playerid]);
		mysql_query(Conexion, query, false);
		format(stringc, sizeof(stringc), "* <%s> Clan: %s(id:%d) cambió el color del clan!", Clan_JugadorCompleto[playerid], GetName(playerid), playerid);
 		foreach(new i : Player)
		{
  			if(IsPlayerConnected(i))
      		{
     			if(Clan_ID[i] == Clan_ID[playerid])
           		{
 					SendClientMessage(i, ColorRGB, stringc);
             		Sonido(i);
             		SetPlayerColor(i, ColorRGB);
             		ColorClan[i] = GetPlayerColor(i);
       			}
        	}
    	}
    }
	cache_delete(result, Conexion);
	return 1;
}

stock Sonido(playerid)
{
    PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
}

stock SetTimerXP(playerid, idtimer, string[], time)
{
	Timer[playerid][idtimer] = SetTimerEx(string, time, false, "d", playerid);
	return 1;
}

stock KillTimerEx(playerid, idtimer)
{
	KillTimer(Timer[playerid][idtimer]);
	return 1;
}

/*public OnPlayerGiveDamageActor(playerid, damaged_actorid, Float: amount, weaponid, bodypart)
{
    new string[128], attacker[MAX_PLAYER_NAME];
    new weaponname[24];
    GetPlayerName(playerid, attacker, sizeof (attacker));
    GetWeaponName(weaponid, weaponname, sizeof (weaponname));

    format(string, sizeof(string), "%s has made %.0f damage to actor id %d, weapon: %s", attacker, amount, damaged_actorid, weaponname);
    SendClientMessageToAll(0xFFFFFFFF, string);
    return 1;
}*/

//stocks
stock RotarVehiculo180Grados(playerid)
{
    GameTextForPlayer(playerid, "~n~~n~~n~~r~~h~vehiculo rotado", 3000, 5);
    new Float:angulo; new Veh; Veh = GetPlayerVehicleID(playerid);
    GetVehicleZAngle(Veh, angulo); SetVehicleZAngle(Veh, angulo+180);
    return 1;
}

stock RotarVehiculo90Grados(playerid)
{
    GameTextForPlayer(playerid, "~n~~n~~n~~r~~h~vehiculo rotado", 3000, 5);
    new Float:angulo; new Veh; Veh = GetPlayerVehicleID(playerid);
    GetVehicleZAngle(Veh, angulo); SetVehicleZAngle(Veh, angulo+90);
    return 1;
}

ReturnVehicleID(vName[])
{
	Loop(x, 211)
	{
	    if(strfind(vNames[x], vName, true) != -1)
		return x + 400;
	}
	return -1;
}

stock isNumeric(const string[])
{
	new length=strlen(string);
	if(length == 0) return 0;
	for(new i = 0; i < length; i++)
	{
		if ((string[i] > '9' || string[i] < '0' && string[i]!='-' && string[i]!='+') || (string[i]=='-' && i!=0) || (string[i]=='+' && i!=0)) return 0;
	}
	if(length==1 && (string[0]=='-' || string[0]=='+')) return 0;
	return 1;
}

//Estadisticas:
funcion EstadisticasInfo(playerid)
{
     new X[100], d, k;
     k = PuntajeJugador[playerid];
     d = Muertes[playerid];
     format(X, sizeof(X), "Kills: %d - Deaths: %d - Ratio: %0.2f", PuntajeJugador[playerid], Muertes[playerid], d == 0 ? float( k ) : floatdiv( k, d ));//floatround(ratio, floatround_round));
     PlayerTextDrawSetString(playerid, TheLastShotLogo3[playerid], X);
	 PTDShow(playerid, TheLastShotLogo3[playerid]);
	 //Rango
	 new X2[35];
	 if(NIVEL_KILLS[playerid] >= 1)
	 {
	 	format(X2, sizeof(X2), "%s", RangoNombreTD[NIVEL_KILLS[playerid]-1]);
     	PTDShow(playerid, RangoJugadorTD[playerid]);
     	PlayerTextDrawSetString(playerid, RangoJugadorTD[playerid], X2);
     }
     else
     {
        PTDShow(playerid, RangoJugadorTD[playerid]);
     	PlayerTextDrawSetString(playerid, RangoJugadorTD[playerid], "          Rango: easy");
     }
     return 1;
}

stock XatAdmin(const string[])
{
	foreach(new i: Player)
	{
		if (Administrador[i] >= 1)
		{
			SendClientMessage(i, -1, string);
		}
	}
	return 1;
}

stock XatVip(const string45[])
{
	foreach(new i: Player)
	{
		if (Vip[i] >= 1)
		{
			SendClientMessage(i, -1, string45);
		}
	}
	return 1;
}

stock DAR_MENSAJE_TELEPORT(const string[])
{
    new astring[150];
    format(astring,sizeof(astring), "* %s", string);
    SendClientMessageToAll(Blanco, astring);
    return 1;
}

stock VidaTodos()
{
	foreach(new i: Player)
	{
 		if(JugadorEnElDuelo[i] == 0 || EstaDM[i] == 0|| Encarcelado[i] == 0)
 		{
  			SetPlayerHealth(i, 99.9);
   			Sonido(i);
		}
  	}
 	return 1;
}

stock ArmaduraTodos()
{
	foreach(new i: Player)
	{
 		if(JugadorEnElDuelo[i] == 0 || EstaDM[i] == 0|| Encarcelado[i] == 0)
 		{
  			SetPlayerArmour(i, 99.9);
   			Sonido(i);
		}
  	}
 	return 1;
}

stock RemoverArmasTodos()
{
	foreach(new i: Player)
	{
 		if(JugadorEnElDuelo[i] == 0 || EstaDM[i] == 0|| Encarcelado[i] == 0)
 		{
  			ResetPlayerWeapons(i);
   			Sonido(i);
		}
  	}
 	return 1;
}

stock DarArmasTodos(weap, ammo)
{
	foreach(new i: Player)
	{
 		if(JugadorEnElDuelo[i] == 0 || EstaDM[i] == 0 || Encarcelado[i] == 0)
 		{
  			GivePlayerWeapon(i, weap, ammo);
   			Sonido(i);
		}
  	}
 	return 1;
}

stock LimpiarChat(playerid)
{
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, -1, "");
}

stock LimpiarChatGeneral()
{
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    SendClientMessageToAll(-1, "");
    return true;
}

funcion RamdonColorsSpawn(playerid){
    switch(random(17))
    {
    	case 0: CarSpawnVal[playerid] = 151;
        case 1: CarSpawnVal[playerid] = 144;
        case 2: CarSpawnVal[playerid] = 149;
        case 3: CarSpawnVal[playerid] = 128;
        case 4: CarSpawnVal[playerid] = 145;
        case 5: CarSpawnVal[playerid] = 134;
        case 6: CarSpawnVal[playerid] = 241;
        case 7: CarSpawnVal[playerid] = 211;
        case 8: CarSpawnVal[playerid] = 212;
        case 9: CarSpawnVal[playerid] = 233;
        case 10: CarSpawnVal[playerid] = 168;
        case 11: CarSpawnVal[playerid] = 135;
        case 12: CarSpawnVal[playerid] = 243;
        case 13: CarSpawnVal[playerid] = 146;
        case 14: CarSpawnVal[playerid] = 1;
        case 15: CarSpawnVal[playerid] = 0;
        case 16: CarSpawnVal[playerid] = 6;
        case 17: CarSpawnVal[playerid] = 93;
	}
	return 1;
}

funcion RamdonWheelsSpawn(playerid){
    switch(random(14))
    {
    	case 0: CarWheelsVal[playerid] = 1025;
        case 1: CarWheelsVal[playerid] = 1073;
        case 2: CarWheelsVal[playerid] = 1074;
        case 3: CarWheelsVal[playerid] = 1075;
        case 4: CarWheelsVal[playerid] = 1077;
        case 5: CarWheelsVal[playerid] = 1079;
        case 6: CarWheelsVal[playerid] = 1080;
        case 7: CarWheelsVal[playerid] = 1081;
        case 8: CarWheelsVal[playerid] = 1082;
        case 9: CarWheelsVal[playerid] = 1083;
        case 10: CarWheelsVal[playerid] = 1084;
        case 11: CarWheelsVal[playerid] = 1085;
        case 12: CarWheelsVal[playerid] = 1096;
        case 13: CarWheelsVal[playerid] = 1097;
        case 14: CarWheelsVal[playerid] = 1098;
	}
	return 1;
}

CrearVehiculo(playerid, model)
{
	new vid,Float:x;new Float:y;new Float:z,Float:angulo;
	GetPlayerPos(playerid, x, y, z);

	if(IsPlayerInAnyVehicle(playerid))
	{
		SendClientMessage(playerid, -1, "No puedes spawnear un vehículo estando dentro de uno!");
	}
	else
	{
	if(CarSpawn[playerid]==0)
	{
		vid = GetPlayerVehicleID(playerid);
		GetVehiclePos(vid, x, y, z);
		GetVehicleZAngle(vid, angulo);
		DestroyVehicle(vid);
	}
	else
	{
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, angulo);
	}
	RamdonColorsSpawn(playerid);
	RamdonWheelsSpawn(playerid);
	new vehicleid=CreateVehicle(model, x, y, z, angulo, CarSpawnVal[playerid], CarSpawnVal[playerid], -1, 1);
	PutPlayerInVehicle(playerid,vehicleid,0);
	AddVehicleComponent(vehicleid, CarWheelsVal[playerid]);

	GameTextForPlayer(playerid, "~g~~h~~h~vehiculo spawneado...",2000,3);

	new stringxd[30], stringkxd2[93];
    format(stringxd, sizeof(stringxd), "%s", vNames[model-400]);
    format(stringkxd2, sizeof(stringkxd2), "{00B9FF}Has spawneado un vehiculo %s(%d) correctamente!", vNames[model-400], model);
    SendClientMessage(playerid, -1, stringkxd2);

	if(VTUNE[playerid] == 1)
	{
		AddVehicleComponent(vehicleid, 1169); // Parachoques delantero(Alien)
		AddVehicleComponent(vehicleid, 1140); //Parachoques trasero(X-flow)
		AddVehicleComponent(vehicleid, 1032); //roof
		AddVehicleComponent(vehicleid, 1059); //Escape
		AddVehicleComponent(vehicleid, 1058); //Spoiler
		AddVehicleComponent(vehicleid, 1029); //X-Flow
		ChangeVehicleColor(vehicleid, 211, 211);
		AddVehicleComponent(vehicleid, 1080); //Ruedas Switch
		ChangeVehiclePaintjob(vehicleid, 1); //PaintJob
		VTUNE[playerid] = 0;
	}

	for(new i=0;i<AutosMaximosPorJugador;i++)
	{
		if(Turn[playerid]==AutosMaximosPorJugador)
	{
	CarDeleter(PlayerCar[playerid][0]);
	new b=AutosMaximosPorJugador-1;
	for(new a=0;a<b;a++)
	{
		new A=a+1;
		PlayerCar[playerid][a]=PlayerCar[playerid][A];
	}
		PlayerCar[playerid][b]=0;
		Turn[playerid]--;}
 	if(!PlayerCar[playerid][i])
	{
		PlayerCar[playerid][i]=vehicleid;
		Turn[playerid]++;
		}
	}
}
return 1;
}

forward VehRes(vehicleid);
public VehRes(vehicleid)
{
	DestroyVehicle(vehicleid);
}

CarDeleter(vehicleid)
{
    for(new i=0;i<MP;i++)
	{
        new Float:Xz,Float:Yz,Float:Zz;
    	if(IsPlayerInVehicle(i, vehicleid))
		{
    	    RemovePlayerFromVehicle(i);
    	    GetPlayerPos(i,Xz,Yz,Zz);
        	SetPlayerPos(i,Xz,Yz+3,Zz);
		}
	    SetVehicleParamsForPlayer(vehicleid,i,0,1);
	}
    SetTimerEx("VehRes",1500,0,"i",vehicleid);
}

//Funciones varias
stock SetPlayerPosEx(playerid, Float:X, Float:Y, Float:Z, Float:A, interiorid, worldid)
{
    SetPlayerPos(playerid, X, Y, Z);
    SetPlayerFacingAngle(playerid, A);
    SetPlayerInterior(playerid, interiorid);
    SetPlayerVirtualWorld(playerid, worldid);
}

stock SetPlayerPosExV(playerid, Float:x,Float:y,Float:z)
{
	new cartype = GetPlayerVehicleID(playerid); new State = GetPlayerState(playerid); new Float:Angulo; Angulo = GetVehicleZAngle(cartype, Angulo);
	if(State!=PLAYER_STATE_DRIVER)
	{
		SetPlayerPos(playerid,x,y,z); SetPlayerInterior(playerid, 0); SetPlayerVirtualWorld(playerid, 0);
		SetVehicleZAngle(cartype, Angulo+1);
	}
	else if(IsPlayerInVehicle(playerid, cartype) == 1)
	{
		SetVehiclePos(cartype,x,y,z); SetPlayerInterior(playerid, 0); SetPlayerVirtualWorld(playerid, 0);
	 	SetVehicleZAngle(cartype, Angulo+1);
	 	LinkVehicleToInterior(cartype, GetPlayerInterior(playerid));
	    SetVehicleVirtualWorld(cartype, GetPlayerVirtualWorld(playerid));
	} else {
		SetPlayerPos(playerid,x,y,z); SetPlayerInterior(playerid, 0); SetPlayerVirtualWorld(playerid, 0);
	}
}

//DETECTAR SPAM POR GROVE4L
stock DetectarSpam(SPAM[])
{
    new SSPAM;
    new CUENTAP,CUENTAN,CUENTAW,CUENTADP,CUENTAGB;
	for(SSPAM = 0; SSPAM < strlen(SPAM); SSPAM ++)
	{
	    if(SPAM[SSPAM] == '.') CUENTAP ++; //Cuenta los Puntos
	    if(SPAM[SSPAM] == '0' || SPAM[SSPAM] == '1' || SPAM[SSPAM] == '2' || SPAM[SSPAM] == '3' || SPAM[SSPAM] == '4' || SPAM[SSPAM] == '5' || SPAM[SSPAM] == '6' || SPAM[SSPAM] == '7' || SPAM[SSPAM] == '8' || SPAM[SSPAM] == '9') CUENTAN ++; //Cuenta los Numeros
	    if(SPAM[SSPAM] == 'w' || SPAM[SSPAM] == 'W') CUENTAW ++; //Cuenta las "W"
	    if(SPAM[SSPAM] == ':') CUENTADP ++; //Cuenta los ":"
	    if(SPAM[SSPAM] == '_') CUENTAGB ++; //Cuenta los "_"
	}
 	if(CUENTAP >= 3 && CUENTAN >= 4) return 1;
 	if(CUENTAW >= 3) return 1;
 	if(CUENTAN >= 3) return 1;
 	if(CUENTAGB >= 2 && CUENTAN >= 3) return 1;
 	if(strfind(SPAM, ".com", true) != -1 || strfind(SPAM, ".com.ar", true) != -1 || strfind(SPAM, ".org", true) != -1 || strfind(SPAM, ".net", true) != -1 || strfind(SPAM, ".es", true) != -1 || strfind(SPAM, ".tk", true) != -1) return 1;
 	if(CUENTADP >= 1 && CUENTAN >= 4) return 1;
 	return 0;
}

SpawnsRand(playerid)
{
    new rand = random(sizeof(Spawns));
    SetPlayerPosEx(playerid, Spawns[rand][0], Spawns[rand][1], Spawns[rand][2], Spawns[rand][3], 0, 0);
    return 1;
}

funcion NivelAsesino1(playerid){
	KillTimerEx(playerid, 6);
    SetPlayerArmour(playerid, 0);
   	GivePlayerWeapon(playerid, 1, 0);
   	GivePlayerWeapon(playerid, 28, 600);
   	GivePlayerWeapon(playerid, 30, 600);
   	GivePlayerWeapon(playerid, 34, 600);
   	GivePlayerWeapon(playerid, 16, 2);
   	GivePlayerWeapon(playerid, 24, 600);
   	return 1;
	}

	funcion NivelAsesino2(playerid){
	KillTimerEx(playerid, 6);
    SetPlayerArmour(playerid, 0);
    GivePlayerWeapon(playerid, 5, 0);
    GivePlayerWeapon(playerid, 28, 6000);
    GivePlayerWeapon(playerid, 30, 6000);
    GivePlayerWeapon(playerid, 34, 6000);
    GivePlayerWeapon(playerid, 16, 5);
    GivePlayerWeapon(playerid, 24, 6000);
    return 1;
    }
    funcion NivelAsesino3(playerid){
    KillTimerEx(playerid, 6);
    SetPlayerArmour(playerid, 5);
   	GivePlayerWeapon(playerid, 15, 0);
   	GivePlayerWeapon(playerid, 28, 6000);
   	GivePlayerWeapon(playerid, 30, 6000);
   	GivePlayerWeapon(playerid, 26, 6000);
   	GivePlayerWeapon(playerid, 16, 10);
   	GivePlayerWeapon(playerid, 24, 6000);
    return 1;
    }
    funcion NivelAsesino4(playerid){
    KillTimerEx(playerid, 6);
    SetPlayerArmour(playerid, 15);
   	GivePlayerWeapon(playerid, 14, 0);
   	GivePlayerWeapon(playerid, 28, 6000);
	GivePlayerWeapon(playerid, 30, 6000);
   	GivePlayerWeapon(playerid, 34, 6000);
   	GivePlayerWeapon(playerid, 16, 15);
   	GivePlayerWeapon(playerid, 24, 6000);
    return 1;
    }
    funcion NivelAsesino5(playerid){
    KillTimerEx(playerid, 6);
    SetPlayerArmour(playerid, 20);
   	GivePlayerWeapon(playerid, 6, 0);
   	GivePlayerWeapon(playerid, 24, 6000);
   	GivePlayerWeapon(playerid, 30, 6000);
   	GivePlayerWeapon(playerid, 34, 6000);
   	GivePlayerWeapon(playerid, 16, 20);
   	GivePlayerWeapon(playerid, 24, 6000);
    return 1;
    }
    funcion NivelAsesino6(playerid){
    KillTimerEx(playerid, 6);
    SetPlayerArmour(playerid, 50);
   	GivePlayerWeapon(playerid, 4, 0);
   	GivePlayerWeapon(playerid, 24, 6000);
   	GivePlayerWeapon(playerid, 30, 6000);
   	GivePlayerWeapon(playerid, 34, 6000);
   	GivePlayerWeapon(playerid, 16, 25);
   	GivePlayerWeapon(playerid, 24, 6000);
    return 1;
    }
    funcion NivelAsesino7(playerid){
    KillTimerEx(playerid, 6);
    SetPlayerArmour(playerid, 60);
   	GivePlayerWeapon(playerid, 8, 0);
   	GivePlayerWeapon(playerid, 28, 6000);
   	GivePlayerWeapon(playerid, 30, 6000);
   	GivePlayerWeapon(playerid, 34, 6000);
   	GivePlayerWeapon(playerid, 16, 35);
   	GivePlayerWeapon(playerid, 24, 6000);
    return 1;
    }
    funcion NivelAsesino8(playerid){
    KillTimerEx(playerid, 6);
    SetPlayerArmour(playerid, 70);
   	GivePlayerWeapon(playerid, 9, 0);
   	GivePlayerWeapon(playerid, 28, 6000);
   	GivePlayerWeapon(playerid, 31, 6000);
   	GivePlayerWeapon(playerid, 34, 6000);
   	GivePlayerWeapon(playerid, 16, 45);
    GivePlayerWeapon(playerid, 24, 6000);
    return 1;
    }
    funcion NivelAsesino9(playerid){
    KillTimerEx(playerid, 6);
    SetPlayerArmour(playerid, 75);
   	GivePlayerWeapon(playerid, 43, 60);
   	GivePlayerWeapon(playerid, 28, 6000);
   	GivePlayerWeapon(playerid, 30, 6000);
   	GivePlayerWeapon(playerid, 34, 6000);
   	GivePlayerWeapon(playerid, 16, 55);
   	GivePlayerWeapon(playerid, 24, 6000);
    return 1;
    }
    funcion NivelAsesino10(playerid){
    KillTimerEx(playerid, 6);
    SetPlayerArmour(playerid, 80);
   	GivePlayerWeapon(playerid, 42, 606050);
   	GivePlayerWeapon(playerid, 28, 6000);
   	GivePlayerWeapon(playerid, 30, 6000);
   	GivePlayerWeapon(playerid, 34, 6000);
   	GivePlayerWeapon(playerid, 16, 65);
   	GivePlayerWeapon(playerid, 24, 6000);
    return 1;
    }
    funcion NivelAsesino11(playerid){
    KillTimerEx(playerid, 6);
    SetPlayerArmour(playerid, 90);
   	GivePlayerWeapon(playerid, 5, 0);
   	GivePlayerWeapon(playerid, 32, 6000);
   	GivePlayerWeapon(playerid, 31, 6000);
   	GivePlayerWeapon(playerid, 34, 6000);
   	GivePlayerWeapon(playerid, 16, 75);
   	GivePlayerWeapon(playerid, 24, 6000);
    return 1;
    }
    funcion NivelAsesino12(playerid){
    KillTimerEx(playerid, 6);
    SetPlayerArmour(playerid, 99.9);
   	GivePlayerWeapon(playerid, 5, 0);
   	GivePlayerWeapon(playerid, 32, 6000);
   	GivePlayerWeapon(playerid, 31, 6000);
   	GivePlayerWeapon(playerid, 34, 6000);
   	GivePlayerWeapon(playerid, 16, 85);
   	GivePlayerWeapon(playerid, 24, 6000);
    return 1;
    }

funcion CargarLabelsyPickups()
{
    // TextLabels
    //Create3DTextLabel("¡Los Santos(/ls)!\n", 0x95B7FFFF, -10.7345,1192.4111,19.3594, 30.0, 0, 0);
    Create3DTextLabel("¡Zona Guerra(/zg)!\n", 0x95B7FFFF, -1909.7997, 882.4308, 35.1719, 30.0, 0, 0);
	Create3DTextLabel("¡Barrio Vagos(/bv)!\n", 0x95B7FFFF, 2730.4031, -1149.1985, 69.5781, 30.0, 0, 0);
	Create3DTextLabel("¡Liberty City(/lc)!\n", 0x95B7FFFF, -732.793457,492.012481,1371.976562, 30.0, 0, 0);
	Create3DTextLabel("¡Underground(/underground)!\n", 0x95B7FFFF, 1535.648193, -1367.375122, 329.460937, 30.0, 0, 0);
	Create3DTextLabel("¡Aeropuerto Los Santos(/als)!\n", 0x95B7FFFF, 1953.343750, -2185.194824, 17.660312, 30.0, 0, 0);
	Create3DTextLabel("¡Zona Stunt 2(/stunt2)!\n", 0x95B7FFFF, 836.263488, -2033.703247, 12.867187, 30.0, 0, 0);
	Create3DTextLabel("¡Grove Street(/ls)!\n", 0x95B7FFFF, 2495.391601, -1669.040161, 13.335947, 30.0, 0, 0);
	Create3DTextLabel("¡New City(/newcity)!\n", 0x95B7FFFF, 2459.881591, -2256.944335, 25.062500, 30.0, 0, 0);
	Create3DTextLabel("¡San Fierro(/sf)!\n", 0x95B7FFFF, -1990.711669, 156.575057, 27.539062, 30.0, 0, 0);
	Create3DTextLabel("¡San Fierro Stunt(/sfs)!\n", 0x95B7FFFF, -1751.960571, 887.102050, 296.380310, 30.0, 0, 0);
	Create3DTextLabel("¡Las Venturas Stunt(/lvstunt)!\n", 0x95B7FFFF, 1804.725341,1695.058593,6.734375, 30.0, 0, 0);
	Create3DTextLabel("¡Alhambra(/alhambra)!\n", 0x95B7FFFF, 1821.4860, -1682.1538, 13.3828, 30.0, 0, 0);
	Create3DTextLabel("¡Trasfender Las Venturas(/tranlv)!\n", 0x95B7FFFF, -1936.6191,229.0444,34.1563, 30.0, 0, 0);
	Create3DTextLabel("¡Trasfender Los Santos(/trasls)!\n", 0x95B7FFFF, 1042.4972,-1041.6581,31.7976, 30.0, 0, 0);
	Create3DTextLabel("¡Drifting(/drift)!\n", 0x95B7FFFF, -324.2683,1525.9818,75.3570, 30.0, 0, 0);
	Create3DTextLabel("¡Drifting 2(/drift2)!\n", 0x95B7FFFF, 2254.2102,1964.0096,31.7797, 30.0, 0, 0);
	Create3DTextLabel("¡Drifting 3(/drift3)!\n", 0x95B7FFFF, -1817.3018,1303.9838,59.7344, 30.0, 0, 0);
	Create3DTextLabel("¡Drifting 4(/drift4)!\n", 0x95B7FFFF, 2328.3909,1447.4694,42.8203, 30.0, 0, 0);
	Create3DTextLabel("¡Tuberia(/tuberia)!\n", 0x95B7FFFF, -2256.2747,2446.8306,4.9717, 30.0, 0, 0);
//	Create3DTextLabel("¡Stunt San Fierro(/ )!\n", 0x95B7FFFF, , 30.0, 0, 0);
	Create3DTextLabel("¡Club Jizzy(/jizzy)!\n", 0x95B7FFFF, -2632.4692,1369.3971,7.1119, 30.0, 0, 0);
	Create3DTextLabel("¡Jump(/jump)!\n", 0x95B7FFFF, 399.6974,3732.6333,643.7263, 30.0, 0, 0);
	Create3DTextLabel("¡Zona Stunt(/stunt)!\n", 0x95B7FFFF, 453.8123,3219.8450,58.5544, 30.0, 0, 0);
	Create3DTextLabel("¡Zona Stunt3(/stunt3)!\n", 0x95B7FFFF, 2266.1602,-1929.3458,-27.4000, 30.0, 0, 0);
	Create3DTextLabel("¡Loco Low(/ll)!\n", 0x95B7FFFF, 2647.0054,-2004.2131,13.3828, 30.0, 0, 0);
	Create3DTextLabel("¡Cantera(/cantera)!\n", 0x95B7FFFF, 611.4616,882.8682,-42.9609, 30.0, 0, 0);
	Create3DTextLabel("¡Playa Los Santos(/playa)!\n", 0x95B7FFFF, 263.2350,-1828.4753,3.8215, 30.0, 0, 0);
	Create3DTextLabel("¡Paracaidismo XZ(/xz)!\n", 0x95B7FFFF, 1824.9858,-1288.0322,131.7344, 30.0, 0, 0);
	Create3DTextLabel("¡Paracaidismo XZ2(/xz2)!\n", 0x95B7FFFF, 1666.0364,-1242.7211,233.3750, 30.0, 0, 0);
	Create3DTextLabel("¡Paracaidismo XZ3(/xz3)!\n", 0x95B7FFFF, 1577.0929,-1245.1472,277.8776, 30.0, 0, 0);
	Create3DTextLabel("¡Paracaidismo XZ4(/xz4)!\n", 0x95B7FFFF, 2399.1707,1923.2483,76.3745, 30.0, 0, 0);
	Create3DTextLabel("¡Paracaidismo XZ5(/xz5)!\n", 0x95B7FFFF, 2059.4338,2430.0925,165.6172, 30.0, 0, 0);
	Create3DTextLabel("¡Paracaidismo XZ6(/xz6)!\n", 0x95B7FFFF, -2677.7866,1594.7925,217.2739, 30.0, 0, 0);
	Create3DTextLabel("¡Paracaidismo XZ7(/xz7)!\n", 0x95B7FFFF, -2503.6709,-695.5320,279.7314, 30.0, 0, 0);
	Create3DTextLabel("¡Paracaidismo XZ8(/xz8)!\n", 0x95B7FFFF, 286.6269,-1608.7111,114.4219, 30.0, 0, 0);
	Create3DTextLabel("¡Aeropuerto San Fierro(/asf)!\n", 0x95B7FFFF, -1225.159301, 30.931833, 21.310312, 30.0, 0, 0);
	Create3DTextLabel("¡Monte Chilliand(/monte)!\n", 0x95B7FFFF, -2326.668212, -1626.296752, 483.705657, 30.0, 0, 0);
	Create3DTextLabel("¡Las Venturas(/lv)!\n", 0x95B7FFFF, 2035.291015, 1526.176757, 10.380242, 30.0, 0, 0);
	Create3DTextLabel("¡Aeropuerto Abandonado(/aa)!\n", 0x95B7FFFF, 324.2039, 2544.5725, 16.8082, 30.0, 0, 0);
	Create3DTextLabel("¡Aeropuerto Las Venturas(/alv)!\n", 0x95B7FFFF, 1319.983520, 1290.765258, 10.380865, 30.0, 0, 0);
	Create3DTextLabel("¡Zona Stunt 4(/stunt4)!\n", 0x95B7FFFF, 1606.332397, 2247.553466, 86.432029, 30.0, 0, 0);
	Create3DTextLabel("¡Underwater(/underwater)!\n", 0x95B7FFFF, 1469.887695, 2922.575195, -27.469688, 30.0, 0, 0);
	Create3DTextLabel("¡Presa Stunt(/presa)!\n", 0x95B7FFFF, -669.118957, 2306.079589, 135.600219, 30.0, 0, 0);
	Create3DTextLabel("¡Area 51(/area51)!\n", 0x95B7FFFF, 355.942291, 2027.881225, 23.784393, 30.0, 0, 0);
    return 1;
}

funcion CargarTextdraws()
{

	//Vigilar
	Vigilar0 = TextDrawCreate(19.000000, 255.000000, "Jugador: [Chanito][Jefe]LocoVerde(102)");
	TextDrawBackgroundColor(Vigilar0, 255);
	TextDrawFont(Vigilar0, 1);
	TextDrawLetterSize(Vigilar0, 0.190000, 1.200000);
	TextDrawColor(Vigilar0, -1);
	TextDrawSetOutline(Vigilar0, 0);
	TextDrawSetProportional(Vigilar0, 1);
	TextDrawSetShadow(Vigilar0, 1);
	TextDrawUseBox(Vigilar0, 1);
	TextDrawBoxColor(Vigilar0, 28508255);
	TextDrawTextSize(Vigilar0, 173.000000, 0.000000);
	TextDrawSetSelectable(Vigilar0, 0);

	Vigilar1 = TextDrawCreate(19.000000, 269.000000, "Vida: ~r~~h~100.0 ~w~- Armadura: ~r~~h~99.9 ~n~~y~~h~Si las cantidades son, 100.0. Posible bug o hack.");
	TextDrawBackgroundColor(Vigilar1, 255);
	TextDrawFont(Vigilar1, 1);
	TextDrawLetterSize(Vigilar1, 0.170000, 1.500000);
	TextDrawColor(Vigilar1, -1);
	TextDrawSetOutline(Vigilar1, 1);
	TextDrawSetProportional(Vigilar1, 1);
	TextDrawSetSelectable(Vigilar1, 0);
	return 1;
}

funcion CargarRemovings(playerid){
	//AA
	RemoveBuildingForPlayer(playerid, 3368, 161.7891, 2411.3828, 15.4766, 0.25);
RemoveBuildingForPlayer(playerid, 3368, 323.0078, 2411.3828, 15.4766, 0.25);
RemoveBuildingForPlayer(playerid, 3369, 349.8750, 2438.2500, 15.4766, 0.25);
RemoveBuildingForPlayer(playerid, 3369, 269.2656, 2411.3828, 15.4766, 0.25);
RemoveBuildingForPlayer(playerid, 3369, 242.3984, 2438.2500, 15.4766, 0.25);
RemoveBuildingForPlayer(playerid, 3369, 188.6563, 2438.2500, 15.4766, 0.25);
RemoveBuildingForPlayer(playerid, 3369, 108.0469, 2411.3828, 15.4766, 0.25);
RemoveBuildingForPlayer(playerid, 3367, 296.1406, 2438.2500, 15.4766, 0.25);
RemoveBuildingForPlayer(playerid, 3367, 215.5313, 2411.3828, 15.4766, 0.25);
RemoveBuildingForPlayer(playerid, 3367, 134.9141, 2438.2500, 15.4766, 0.25);
RemoveBuildingForPlayer(playerid, 16598, 231.2813, 2545.7969, 20.0234, 0.25);
RemoveBuildingForPlayer(playerid, 3296, 255.9844, 2549.3281, 20.2031, 0.25);
RemoveBuildingForPlayer(playerid, 16600, 435.6250, 2532.0859, 20.1797, 0.25);
RemoveBuildingForPlayer(playerid, 16602, 307.9531, 2543.4531, 20.3984, 0.25);
RemoveBuildingForPlayer(playerid, 3269, 108.0469, 2411.3828, 15.4766, 0.25);
RemoveBuildingForPlayer(playerid, 3270, 161.7891, 2411.3828, 15.4766, 0.25);
RemoveBuildingForPlayer(playerid, 3269, 188.6563, 2438.2500, 15.4766, 0.25);
RemoveBuildingForPlayer(playerid, 3271, 134.9141, 2438.2500, 15.4766, 0.25);
RemoveBuildingForPlayer(playerid, 3271, 215.5313, 2411.3828, 15.4766, 0.25);
RemoveBuildingForPlayer(playerid, 3269, 242.3984, 2438.2500, 15.4766, 0.25);
RemoveBuildingForPlayer(playerid, 3287, 255.9844, 2549.3281, 20.2031, 0.25);
RemoveBuildingForPlayer(playerid, 16599, 231.2813, 2545.7969, 20.0234, 0.25);
RemoveBuildingForPlayer(playerid, 3269, 269.2656, 2411.3828, 15.4766, 0.25);
RemoveBuildingForPlayer(playerid, 16098, 307.9531, 2543.4531, 20.3984, 0.25);
RemoveBuildingForPlayer(playerid, 3271, 296.1406, 2438.2500, 15.4766, 0.25);
RemoveBuildingForPlayer(playerid, 3270, 323.0078, 2411.3828, 15.4766, 0.25);
RemoveBuildingForPlayer(playerid, 16101, 321.6719, 2463.4922, 15.4766, 0.25);
RemoveBuildingForPlayer(playerid, 16368, 321.6719, 2463.4922, 25.6641, 0.25);
RemoveBuildingForPlayer(playerid, 3269, 349.8750, 2438.2500, 15.4766, 0.25);
RemoveBuildingForPlayer(playerid, 864, 352.7734, 2444.4063, 15.8828, 0.25);
RemoveBuildingForPlayer(playerid, 864, 346.8984, 2435.5547, 16.2266, 0.25);
RemoveBuildingForPlayer(playerid, 864, 345.2422, 2432.1328, 16.0391, 0.25);
RemoveBuildingForPlayer(playerid, 864, 346.4141, 2445.2969, 15.9922, 0.25);
RemoveBuildingForPlayer(playerid, 864, 357.5938, 2449.6172, 15.6406, 0.25);
RemoveBuildingForPlayer(playerid, 864, 364.2266, 2450.7578, 15.5469, 0.25);
RemoveBuildingForPlayer(playerid, 1224, 316.3672, 2531.6094, 16.1563, 0.25);
RemoveBuildingForPlayer(playerid, 1224, 316.1641, 2534.6484, 16.1563, 0.25);
RemoveBuildingForPlayer(playerid, 1224, 316.2656, 2533.0781, 16.1563, 0.25);
RemoveBuildingForPlayer(playerid, 1224, 316.3516, 2545.1406, 16.1563, 0.25);
RemoveBuildingForPlayer(playerid, 1224, 315.5625, 2551.6250, 16.1563, 0.25);
RemoveBuildingForPlayer(playerid, 1224, 315.6641, 2550.0625, 16.1563, 0.25);
RemoveBuildingForPlayer(playerid, 1224, 410.8281, 2528.5703, 16.1563, 0.25);
RemoveBuildingForPlayer(playerid, 1224, 409.8047, 2529.6328, 16.1563, 0.25);
RemoveBuildingForPlayer(playerid, 1224, 408.7188, 2530.7656, 16.1563, 0.25);
RemoveBuildingForPlayer(playerid, 1224, 407.1563, 2530.4688, 16.1563, 0.25);
RemoveBuildingForPlayer(playerid, 1224, 407.8828, 2532.0078, 16.1563, 0.25);
RemoveBuildingForPlayer(playerid, 16601, 435.6250, 2532.0859, 20.1797, 0.25);

	RemoveBuildingForPlayer(playerid, 1411, 347.1953, 1799.2656, 18.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 3474, 1024.2578, 2110.6953, 16.7422, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, 342.9375, 1796.2891, 18.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 16670, 330.7891, 1813.2188, 17.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 3267, 354.4297, 2028.4922, 22.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3277, 354.4141, 2028.5000, 22.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 16668, 357.9375, 2049.4219, 16.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 16669, 380.2578, 1914.9609, 17.4297, 0.25);
	RemoveBuildingForPlayer(playerid, 3513, 2037.7969, 868.7656, 10.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3509, 2137.0313, 1954.1641, 9.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 3509, 2137.8828, 1940.6406, 9.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 3509, 2137.8906, 1921.5078, 9.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 3509, 2137.8906, 1972.0469, 9.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 3509, 2137.8828, 1986.4531, 9.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 3509, 2137.3984, 2003.8047, 9.7656, 0.25);
	RemoveBuildingForPlayer(playerid, 3509, 2137.2500, 2094.3047, 9.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 3509, 2137.3984, 2075.7969, 9.7656, 0.25);
	RemoveBuildingForPlayer(playerid, 3509, 2137.8828, 2194.8516, 6.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3509, 2137.3984, 2174.2656, 9.7656, 0.25);
	RemoveBuildingForPlayer(playerid, 3509, 2137.8906, 2180.7813, 9.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 3509, 2137.8906, 2208.2344, 9.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 8468, 2152.3906, 1283.2266, 8.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 8972, 2152.3906, 1283.2266, 8.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 7557, 1235.3594, 2927.1328, 20.9219, 0.25);
	RemoveBuildingForPlayer(playerid, 9175, 2324.3828, 1281.6484, 47.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 17758, 2260.0000, -1707.7344, 17.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 17885, 2457.8359, -1695.9375, 14.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 2507.5938, -1663.0547, 16.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 2511.5000, -1654.1563, 13.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 5156, 2838.0391, -2423.8828, 10.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 5159, 2838.0313, -2371.9531, 7.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 5160, 2829.9531, -2479.5703, 5.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 5161, 2838.0234, -2358.4766, 21.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 5162, 2838.0391, -2423.8828, 10.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 5163, 2838.0391, -2532.7734, 17.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 5164, 2838.1406, -2447.8438, 15.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 5165, 2838.0313, -2520.1875, 18.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 5166, 2829.9531, -2479.5703, 5.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 5167, 2838.0313, -2371.9531, 7.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3689, 2685.3828, -2366.0547, 19.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 3689, 2430.5859, -2583.9453, 20.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 3707, 2716.2344, -2452.5938, 20.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 3707, 2720.3203, -2530.9141, 19.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 3707, 2480.8594, -2460.0547, 20.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 3707, 2539.1797, -2424.3594, 20.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 3690, 2685.3828, -2366.0547, 19.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 3690, 2430.5859, -2583.9453, 20.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 3688, 2387.8047, -2580.8672, 17.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 3688, 2450.8750, -2680.4531, 17.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 3687, 2503.5391, -2366.5078, 16.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 3687, 2475.2578, -2394.7891, 16.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 3687, 2450.5078, -2419.5391, 16.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 3686, 2464.3047, -2617.0156, 16.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 3710, 2788.1563, -2417.7891, 16.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 3710, 2788.1563, -2455.8828, 16.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 3710, 2788.1563, -2493.9844, 16.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 3709, 2511.9609, -2608.0156, 17.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 3709, 2511.9609, -2571.2422, 17.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 3709, 2511.9609, -2535.4531, 17.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 3709, 2660.4766, -2429.2969, 17.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 3709, 2639.5469, -2429.2969, 17.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 3709, 2618.8594, -2429.2969, 17.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 3708, 2720.3203, -2530.9141, 19.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 3708, 2716.2344, -2452.5938, 20.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 3708, 2480.8594, -2460.0547, 20.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 3708, 2539.1797, -2424.3594, 20.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 3710, 2415.4609, -2468.5781, 16.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 3744, 2771.0703, -2372.4453, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3744, 2789.2109, -2377.6250, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3744, 2774.7969, -2386.8516, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3744, 2771.0703, -2520.5469, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3744, 2774.7969, -2534.9531, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3744, 2437.2109, -2490.0938, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3744, 2399.4219, -2490.6797, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3744, 2391.8750, -2503.5078, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3744, 2551.5313, -2472.6953, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3709, 2544.2500, -2524.0938, 16.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 3709, 2544.2500, -2548.8125, 16.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 3746, 2814.2656, -2356.5703, 25.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 3746, 2814.2656, -2521.4922, 25.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 3746, 2568.4453, -2483.3906, 25.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 3746, 2563.1563, -2563.5781, 25.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 3746, 2531.7031, -2629.2266, 25.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 3746, 2519.8047, -2701.8750, 25.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 3746, 2381.1016, -2701.8750, 25.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 5325, 2488.9922, -2509.2578, 18.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 3746, 2422.7031, -2411.9219, 25.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 3746, 2472.4453, -2362.9375, 25.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 5335, 2829.9531, -2479.5703, 5.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 5336, 2829.9531, -2479.5703, 5.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 7985, 1537.9922, 1082.5000, 14.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 8258, 1537.9922, 1082.5000, 14.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 1349, 1532.0938, 1042.1328, 10.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1349, 1529.9453, 1041.5391, 10.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1349, 1521.6250, 1046.0547, 10.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 955, 1520.1484, 1055.2656, 10.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 1687, 1525.2500, 1115.7344, 17.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 1687, 1525.2500, 1119.1328, 17.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 1290, 1797.2734, 1763.0625, 11.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 8971, 2093.6797, 1553.3203, 22.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 1294, 1787.4297, 1709.2891, 17.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 3509, 2057.3594, 1560.7188, 9.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 3509, 2089.3203, 1566.1875, 9.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 8618, 2093.6797, 1553.3203, 22.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 3509, 2109.0469, 1547.2734, 9.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 3540, 1412.8359, 2530.4297, 16.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 3483, 1412.8359, 2530.4297, 16.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 3770, 2795.8281, -2394.2422, 14.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 3770, 2746.4063, -2453.4844, 14.0781, 0.25);
	RemoveBuildingForPlayer(playerid, 3770, 2507.3672, -2640.0703, 14.0781, 0.25);
	RemoveBuildingForPlayer(playerid, 3769, 2464.1250, -2571.6328, 15.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 3769, 2400.9063, -2577.3359, 15.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 5352, 2838.1953, -2488.6641, 29.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 3620, 2381.1016, -2701.8750, 25.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, 2392.1172, -2653.5625, 13.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, 2386.8438, -2653.5078, 13.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, 2397.3984, -2653.6250, 13.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2402.6719, -2653.6406, 13.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, 2407.9453, -2653.6484, 13.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 3621, 2387.8047, -2580.8672, 17.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, 2391.8750, -2503.5078, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3625, 2400.9063, -2577.3359, 15.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, 2399.4219, -2490.6797, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3624, 2415.4609, -2468.5781, 16.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 3620, 2519.8047, -2701.8750, 25.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 3621, 2450.8750, -2680.4531, 17.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 1306, 2469.6016, -2645.3203, 19.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3578, 2470.1406, -2628.2656, 13.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 3626, 2507.3672, -2640.0703, 14.0781, 0.25);
	RemoveBuildingForPlayer(playerid, 3620, 2531.7031, -2629.2266, 25.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 3627, 2464.3047, -2617.0156, 16.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 1306, 2469.6016, -2579.9844, 19.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3625, 2464.1250, -2571.6328, 15.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 1306, 2498.3438, -2612.6563, 19.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, 2496.5547, -2585.1797, 13.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, 2501.8359, -2585.2422, 13.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 3623, 2511.9609, -2608.0156, 17.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 3623, 2511.9609, -2571.2422, 17.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, 2496.5547, -2557.3359, 13.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, 2501.8359, -2557.3984, 13.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 1306, 2498.3438, -2547.3203, 19.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 1278, 2470.2734, -2539.0234, 26.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 3578, 2470.1406, -2530.5547, 13.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 1306, 2469.6016, -2514.6484, 19.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, 2437.2109, -2490.0938, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 1306, 2498.3438, -2481.9766, 19.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 1635, 2471.5859, -2494.0703, 15.0781, 0.25);
	RemoveBuildingForPlayer(playerid, 1306, 2444.3281, -2435.0625, 19.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3578, 2526.4297, -2561.3047, 13.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 3623, 2544.2500, -2548.8125, 16.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 3623, 2511.9609, -2535.4531, 17.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 3623, 2544.2500, -2524.0938, 16.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 1306, 2533.3906, -2514.1094, 19.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, 2551.5313, -2472.6953, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3620, 2563.1563, -2563.5781, 25.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 3620, 2568.4453, -2483.3906, 25.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 1635, 2459.3359, -2427.8281, 16.7422, 0.25);
	RemoveBuildingForPlayer(playerid, 3622, 2450.5078, -2419.5391, 16.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 3578, 2468.8594, -2413.5234, 13.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 3620, 2422.7031, -2411.9219, 25.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 1635, 2483.7188, -2403.3438, 16.7422, 0.25);
	RemoveBuildingForPlayer(playerid, 1306, 2455.0703, -2399.0156, 19.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3622, 2475.2578, -2394.7891, 16.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 1306, 2491.7031, -2383.3281, 19.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3578, 2495.8438, -2386.9375, 13.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 3620, 2472.4453, -2362.9375, 25.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 3622, 2503.5391, -2366.5078, 16.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 3578, 2546.0469, -2396.5938, 13.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 1635, 2512.0078, -2375.0859, 16.7422, 0.25);
	RemoveBuildingForPlayer(playerid, 1306, 2513.0000, -2339.3281, 19.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3578, 2571.1641, -2421.1328, 13.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 3623, 2618.8594, -2429.2969, 17.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 1635, 2704.3672, -2487.8672, 20.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 1306, 2742.2656, -2481.5156, 19.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 5326, 2661.5156, -2465.1406, 20.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1306, 2669.9063, -2447.2891, 19.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3623, 2639.5469, -2429.2969, 17.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 3623, 2660.4766, -2429.2969, 17.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2686.7578, -2416.6250, 15.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1306, 2742.2656, -2416.5234, 19.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3578, 2639.1953, -2392.8203, 13.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 3578, 2663.8359, -2392.8203, 13.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 1306, 2669.9063, -2394.5078, 19.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, 2774.7969, -2534.9531, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, 2771.0703, -2520.5469, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2783.7813, -2501.8359, 14.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 3624, 2788.1563, -2493.9844, 16.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2783.7813, -2486.9609, 14.6563, 0.25);
	RemoveBuildingForPlayer(playerid, 3578, 2747.0078, -2480.2422, 13.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2783.7813, -2463.8203, 14.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3624, 2788.1563, -2455.8828, 16.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 3626, 2746.4063, -2453.4844, 14.0781, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2783.7813, -2448.4766, 14.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 1278, 2773.3438, -2443.1719, 26.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 3577, 2744.5703, -2436.1875, 13.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 3577, 2744.5703, -2427.3203, 13.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2783.7813, -2425.3516, 14.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, 2774.7969, -2386.8516, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, 2771.0703, -2372.4453, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2783.7813, -2410.2109, 14.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 3624, 2788.1563, -2417.7891, 16.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, 2789.2109, -2377.6250, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2791.9531, -2501.8359, 14.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2797.5156, -2486.8281, 14.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2791.9531, -2486.9609, 14.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2791.9531, -2463.8203, 14.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2797.5156, -2448.3438, 14.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2791.9531, -2448.4766, 14.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2791.9531, -2425.3516, 14.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2791.9531, -2410.2109, 14.6563, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2797.5156, -2410.0781, 14.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3626, 2795.8281, -2394.2422, 14.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 729, -1806.6797, 558.9141, 34.1328, 0.25);
	RemoveBuildingForPlayer(playerid, 3620, 2814.2656, -2521.4922, 25.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 9384, -2187.1172, 2414.3203, 6.5313, 0.25);
	RemoveBuildingForPlayer(playerid, 9362, -2188.7109, 2413.3516, 4.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 9361, -2187.1172, 2414.3203, 6.5313, 0.25);
	RemoveBuildingForPlayer(playerid, 1223, -2182.4922, 2419.3438, 3.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 1223, -2233.8828, 2470.6094, 3.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 3474, 978.2891, 2094.9922, 16.7422, 0.25);
	RemoveBuildingForPlayer(playerid, 5157, 2838.0391, -2532.7734, 17.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 5154, 2838.1406, -2447.8438, 15.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 3724, 2838.1953, -2488.6641, 29.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 3620, 2814.2656, -2356.5703, 25.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 5155, 2838.0234, -2358.4766, 21.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 3724, 2838.1953, -2407.1406, 29.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 5158, 2837.7734, -2334.4766, 11.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 2509.0156, -1652.1719, 13.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 2509.1719, -1648.7031, 13.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 3589, 2528.6328, -1658.4453, 16.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 2514.7344, -1654.1875, 13.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 3649, 2517.4766, -1644.6953, 15.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 17515, 2260.0000, -1707.7344, 17.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 17573, 2457.8359, -1695.9375, 14.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 17876, 2393.0625, -1677.5234, 20.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 1498, 2460.2422, -1692.0859, 12.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 2477.6641, -1689.4688, 12.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 17879, 2484.5313, -1667.6094, 21.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 17971, 2484.5313, -1667.6094, 21.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2366.3594, -1648.8828, 13.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 3648, 2470.8203, -1640.8203, 15.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 3474, 978.2891, 2094.9922, 16.7422, 0.25);
	RemoveBuildingForPlayer(playerid, 8340, 1568.0000, 1676.1953, 13.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 8341, 1568.0000, 1676.1953, 13.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 9175, 2324.3828, 1281.6484, 47.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 7557, 1235.3594, 2927.1328, 20.9219, 0.25);
	RemoveBuildingForPlayer(playerid, 7816, 1235.3594, 2927.1328, 20.9219, 0.25);
	RemoveBuildingForPlayer(playerid, 3540, 1412.8359, 2530.4297, 16.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 3483, 1412.8359, 2530.4297, 16.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 8340, 1568.0000, 1676.1953, 13.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 8341, 1568.0000, 1676.1953, 13.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 9175, 2324.3828, 1281.6484, 47.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 7557, 1235.3594, 2927.1328, 20.9219, 0.25);
	RemoveBuildingForPlayer(playerid, 7816, 1235.3594, 2927.1328, 20.9219, 0.25);
	RemoveBuildingForPlayer(playerid, 3540, 1412.8359, 2530.4297, 16.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 3483, 1412.8359, 2530.4297, 16.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 4288, 801.6563, -2387.1953, -20.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 4289, 801.6563, -2162.1953, -19.3047, 0.25);
	RemoveBuildingForPlayer(playerid, 4422, 801.6563, -2387.1953, -20.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 4423, 801.6563, -2162.1953, -19.3047, 0.25);
	RemoveBuildingForPlayer(playerid, 17758, 2260.0000, -1707.7344, 17.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 17770, 2485.9063, -1639.3281, 16.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 17885, 2457.8359, -1695.9375, 14.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 3654, 2517.4766, -1644.6953, 15.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 3647, 2470.8203, -1640.8203, 15.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 3592, 2528.6328, -1658.4453, 16.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 2507.5938, -1663.0547, 16.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 2511.5000, -1654.1563, 13.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 2509.0156, -1652.1719, 13.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 2509.1719, -1648.7031, 13.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, 2514.7344, -1654.1875, 13.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 17515, 2260.0000, -1707.7344, 17.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 17573, 2457.8359, -1695.9375, 14.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 17876, 2393.0625, -1677.5234, 20.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 1498, 2460.2422, -1692.0859, 12.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 2477.6641, -1689.4688, 12.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 17879, 2484.5313, -1667.6094, 21.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 17971, 2484.5313, -1667.6094, 21.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2366.3594, -1648.8828, 13.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 14757, 154.2656, 1369.5234, 1084.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 14757, 154.2656, 1369.5234, 1084.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 14757, 154.2656, 1369.5234, 1084.5234, 0.25);
	//derecoacion
	RemoveBuildingForPlayer(playerid, 2670, 478.1953, -7.1719, 999.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 2670, 478.6016, -7.6953, 999.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 1436, 479.5938, -8.9922, 1001.2188, 0.25);

	//Remover Objetos GOLF
	RemoveBuildingForPlayer(playerid, 621, 1214.2344, 2726.9453, 9.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 621, 1273.2578, 2727.6719, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 621, 1223.3750, 2730.0078, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 621, 1121.8438, 2732.4375, 9.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 616, 1180.0547, 2733.1016, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 616, 1167.5859, 2732.3906, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 622, 1219.1172, 2738.9063, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 1204.1484, 2736.3984, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 1133.2109, 2741.0938, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1228.9063, 2740.0547, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 616, 1234.7969, 2742.9922, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 622, 1222.8359, 2740.7891, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 1162.0625, 2758.6328, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 621, 1209.0078, 2765.3828, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 1219.7578, 2767.5234, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 621, 1195.0234, 2771.9844, 9.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 1130.4219, 2784.9219, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 622, 1157.2344, 2783.4063, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1129.9609, 2784.0234, 11.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1127.1328, 2783.3672, 11.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 1122.1250, 2788.0234, 9.3281, 0.25);
	RemoveBuildingForPlayer(playerid, 616, 1206.6172, 2791.9922, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1128.5859, 2786.9453, 11.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 621, 1204.2891, 2797.9688, 9.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 621, 1211.4063, 2800.6484, 9.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 616, 1214.1328, 2798.3672, 9.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 1218.9922, 2794.2500, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1223.3281, 2805.7422, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 622, 1176.1250, 2807.2500, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 622, 1216.1875, 2805.9531, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 617, 1120.7266, 2810.2188, 9.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1166.1953, 2815.7500, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 621, 1187.9688, 2814.4141, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 621, 1183.7344, 2809.2813, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1151.2500, 2826.4375, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 621, 1132.3281, 2828.7813, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1153.8438, 2851.7656, 11.6484, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1157.5469, 2851.7422, 11.6484, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1161.1172, 2851.2969, 11.6484, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 1152.8828, 2852.9766, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 1173.8125, 2853.4531, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1150.5625, 2855.3906, 11.6484, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1133.0313, 2856.1953, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1234.2266, 2857.8047, 11.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1196.7266, 2859.7734, 11.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1230.0938, 2860.5703, 11.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1223.8828, 2862.2344, 11.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 622, 1277.9219, 2736.6484, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 1243.4531, 2730.3125, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1242.6250, 2753.9609, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 1275.0625, 2762.4531, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 621, 1242.5625, 2758.9922, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 621, 1282.9297, 2773.0547, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1268.7891, 2775.0781, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1277.6641, 2769.7969, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 621, 1277.0000, 2774.3750, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 616, 1264.0703, 2776.8750, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 622, 1269.9375, 2782.9375, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 621, 1280.9297, 2787.8984, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1249.0859, 2820.0000, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 621, 1262.6719, 2819.3750, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 1289.3594, 2818.9453, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 1240.7578, 2833.9609, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 616, 1248.1797, 2841.6406, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1272.9766, 2843.9219, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 616, 1259.2813, 2844.4609, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 1241.3750, 2841.3281, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 1272.4922, 2851.7656, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 617, 1332.1016, 2736.9844, 9.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 616, 1311.7031, 2742.1641, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 621, 1304.2578, 2731.8359, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 621, 1313.2969, 2767.4844, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 621, 1314.6875, 2764.9453, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1308.5859, 2760.0703, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 621, 1324.8125, 2799.5625, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 616, 1326.2031, 2776.4219, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1318.4297, 2793.3594, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 622, 1326.9297, 2784.7031, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1328.0156, 2776.7578, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 622, 1324.7656, 2815.7266, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 622, 1316.8828, 2860.0313, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 621, 1319.3984, 2807.8281, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 652, 1345.1328, 2786.7344, 9.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1346.7422, 2849.4922, 10.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 621, 1346.6719, 2819.6172, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 1358.4141, 2815.2422, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 616, 1359.8438, 2727.7891, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 621, 1363.0156, 2738.6250, 9.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 622, 1365.5469, 2741.4844, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 1363.0234, 2778.6172, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 622, 1362.6875, 2771.1484, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 1377.1250, 2732.8203, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 1367.9766, 2751.7188, 9.3281, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 1388.5703, 2735.5625, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 1400.4688, 2739.7188, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 616, 1379.6797, 2765.1797, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 616, 1404.8203, 2767.2344, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 621, 1409.4141, 2769.0469, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 617, 1372.3516, 2779.4844, 9.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 1403.1641, 2782.4297, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 622, 1401.2266, 2797.3672, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 1389.5859, 2834.2422, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 621, 1390.9531, 2823.7344, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 616, 1396.8906, 2825.1875, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 621, 1378.1406, 2847.3438, 9.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 622, 1384.5000, 2848.6016, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 621, 1399.3359, 2840.8672, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 622, 1408.0547, 2804.3672, 9.6563, 0.25);
	RemoveBuildingForPlayer(playerid, 616, 1410.4766, 2777.9766, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 621, 1408.5938, 2794.1250, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 621, 1407.8203, 2796.9219, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 1403.5938, 2814.0078, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 621, 1404.9063, 2830.7734, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1409.2969, 2827.9844, 11.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1410.1094, 2835.4609, 11.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 616, 1411.9609, 2848.3672, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 1415.1016, 2836.1563, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1414.3906, 2820.3125, 11.1953, 0.25);

	//MAPA Construccion
RemoveBuildingForPlayer(playerid, 3687, 2135.7422, -2186.4453, 15.6719, 0.25);
RemoveBuildingForPlayer(playerid, 3687, 2162.8516, -2159.7500, 15.6719, 0.25);
RemoveBuildingForPlayer(playerid, 3687, 2150.1953, -2172.3594, 15.6719, 0.25);
RemoveBuildingForPlayer(playerid, 3744, 2101.7891, -2162.5781, 15.1328, 0.25);
RemoveBuildingForPlayer(playerid, 1531, 2173.5938, -2165.1875, 15.3047, 0.25);
RemoveBuildingForPlayer(playerid, 3622, 2135.7422, -2186.4453, 15.6719, 0.25);
RemoveBuildingForPlayer(playerid, 3622, 2150.1953, -2172.3594, 15.6719, 0.25);
RemoveBuildingForPlayer(playerid, 3574, 2101.7969, -2162.5625, 15.0703, 0.25);
RemoveBuildingForPlayer(playerid, 3567, 2083.5234, -2159.6172, 13.2578, 0.25);
RemoveBuildingForPlayer(playerid, 3622, 2162.8516, -2159.7500, 15.6719, 0.25);
	//Casaadmin y pickupid
	JETPACKA[playerid] = CreateDynamicPickup(370, 1, -1486.996459, 2507.093505, 84.427688, 7273);
	RemoveBuildingForPlayer(playerid, 3297, -1568.1016, 2709.6484, 56.6484, 0.25);
RemoveBuildingForPlayer(playerid, 3297, -1493.8359, 2688.9922, 56.6484, 0.25);
RemoveBuildingForPlayer(playerid, 3298, -1568.9609, 2633.5156, 55.3281, 0.25);
RemoveBuildingForPlayer(playerid, 3299, -1518.0313, 2698.5938, 55.2109, 0.25);
RemoveBuildingForPlayer(playerid, 3300, -1534.4453, 2689.2734, 56.6484, 0.25);
RemoveBuildingForPlayer(playerid, 3300, -1464.3438, 2656.5000, 56.6484, 0.25);
RemoveBuildingForPlayer(playerid, 3300, -1574.5469, 2691.6875, 56.6484, 0.25);
RemoveBuildingForPlayer(playerid, 3301, -1566.1719, 2653.8828, 56.7031, 0.25);
RemoveBuildingForPlayer(playerid, 3297, -1584.0547, 2652.4609, 56.6484, 0.25);
RemoveBuildingForPlayer(playerid, 11599, -1512.1563, 2514.4453, 54.8906, 0.25);
RemoveBuildingForPlayer(playerid, 11600, -1520.9766, 2620.0938, 57.4453, 0.25);
RemoveBuildingForPlayer(playerid, 11601, -1385.7578, 2640.8594, 54.9844, 0.25);
RemoveBuildingForPlayer(playerid, 3341, -1606.2969, 2689.8281, 53.8359, 0.25);
RemoveBuildingForPlayer(playerid, 3341, -1482.3672, 2704.8047, 54.8047, 0.25);
RemoveBuildingForPlayer(playerid, 3341, -1446.4531, 2639.3516, 54.8047, 0.25);
RemoveBuildingForPlayer(playerid, 3341, -1477.5859, 2549.2344, 54.8047, 0.25);
RemoveBuildingForPlayer(playerid, 3339, -1589.7188, 2708.6016, 54.7266, 0.25);
RemoveBuildingForPlayer(playerid, 3339, -1510.3516, 2646.6563, 54.7266, 0.25);
RemoveBuildingForPlayer(playerid, 3339, -1448.1328, 2690.7813, 54.7266, 0.25);
RemoveBuildingForPlayer(playerid, 3339, -1476.0391, 2565.3984, 54.7266, 0.25);
RemoveBuildingForPlayer(playerid, 3342, -1548.3359, 2699.6172, 54.8203, 0.25);
RemoveBuildingForPlayer(playerid, 3342, -1463.7656, 2692.8594, 54.8203, 0.25);
RemoveBuildingForPlayer(playerid, 3342, -1447.2344, 2653.3047, 54.8203, 0.25);
RemoveBuildingForPlayer(playerid, 3345, -1448.8594, 2560.5703, 54.8281, 0.25);
RemoveBuildingForPlayer(playerid, 11612, -1270.4453, 2719.4375, 49.2656, 0.25);
RemoveBuildingForPlayer(playerid, 11613, -1320.6875, 2700.9531, 49.2656, 0.25);
RemoveBuildingForPlayer(playerid, 11614, -1328.7188, 2677.5078, 52.2109, 0.25);
RemoveBuildingForPlayer(playerid, 3357, -1523.8047, 2656.6563, 54.8750, 0.25);
RemoveBuildingForPlayer(playerid, 3365, -1425.2344, 2581.2656, 54.8359, 0.25);
RemoveBuildingForPlayer(playerid, 11641, -1348.3125, 2576.6328, 79.7734, 0.25);
RemoveBuildingForPlayer(playerid, 11643, -1720.3438, 2615.9531, 81.9922, 0.25);
RemoveBuildingForPlayer(playerid, 11671, -1459.9375, 2583.1563, 57.9375, 0.25);
RemoveBuildingForPlayer(playerid, 11672, -1520.9609, 2577.1641, 58.3125, 0.25);
RemoveBuildingForPlayer(playerid, 669, -1579.5547, 2640.3750, 55.2422, 0.25);
RemoveBuildingForPlayer(playerid, 3242, -1584.0547, 2652.4609, 56.6484, 0.25);
RemoveBuildingForPlayer(playerid, 1308, -1611.1250, 2680.4688, 53.9141, 0.25);
RemoveBuildingForPlayer(playerid, 1308, -1579.9141, 2676.8594, 55.1797, 0.25);
RemoveBuildingForPlayer(playerid, 3170, -1606.2969, 2689.8281, 53.8359, 0.25);
RemoveBuildingForPlayer(playerid, 3285, -1574.5469, 2691.6875, 56.6484, 0.25);
RemoveBuildingForPlayer(playerid, 672, -1611.2109, 2701.8281, 55.3203, 0.25);
RemoveBuildingForPlayer(playerid, 700, -1602.9219, 2703.7734, 54.6094, 0.25);
RemoveBuildingForPlayer(playerid, 669, -1584.7891, 2695.7188, 54.7813, 0.25);
RemoveBuildingForPlayer(playerid, 11480, -1596.2656, 2695.9453, 56.1797, 0.25);
RemoveBuildingForPlayer(playerid, 3169, -1589.7188, 2708.6016, 54.7266, 0.25);
RemoveBuildingForPlayer(playerid, 700, -1548.3906, 2495.7344, 55.1250, 0.25);
RemoveBuildingForPlayer(playerid, 703, -1554.9922, 2510.0703, 57.0547, 0.25);
RemoveBuildingForPlayer(playerid, 669, -1530.5547, 2493.4609, 55.2422, 0.25);
RemoveBuildingForPlayer(playerid, 669, -1535.4766, 2505.7578, 55.2422, 0.25);
RemoveBuildingForPlayer(playerid, 11454, -1512.1563, 2514.4453, 54.8906, 0.25);
RemoveBuildingForPlayer(playerid, 1308, -1462.0000, 2472.3359, 52.5313, 0.25);
RemoveBuildingForPlayer(playerid, 1308, -1463.7578, 2499.9453, 54.6875, 0.25);
RemoveBuildingForPlayer(playerid, 672, -1492.7813, 2518.5938, 55.7578, 0.25);
RemoveBuildingForPlayer(playerid, 11625, -1430.5781, 2303.7578, 62.0625, 0.25);
RemoveBuildingForPlayer(playerid, 11447, -1309.6016, 2492.4766, 86.0078, 0.25);
RemoveBuildingForPlayer(playerid, 11440, -1321.2109, 2503.3438, 85.4609, 0.25);
RemoveBuildingForPlayer(playerid, 11441, -1310.7734, 2514.0078, 86.1641, 0.25);
RemoveBuildingForPlayer(playerid, 11445, -1289.3672, 2513.6094, 86.6172, 0.25);
RemoveBuildingForPlayer(playerid, 3241, -1568.9609, 2633.5156, 55.3281, 0.25);
RemoveBuildingForPlayer(playerid, 669, -1560.2266, 2617.7031, 55.2422, 0.25);
RemoveBuildingForPlayer(playerid, 700, -1559.2891, 2530.0156, 60.0156, 0.25);
RemoveBuildingForPlayer(playerid, 1308, -1555.6875, 2636.5234, 55.1719, 0.25);
RemoveBuildingForPlayer(playerid, 669, -1544.5781, 2524.6328, 55.2422, 0.25);
RemoveBuildingForPlayer(playerid, 1294, -1534.1406, 2597.0391, 59.2734, 0.25);
RemoveBuildingForPlayer(playerid, 1294, -1534.1406, 2605.4219, 59.2734, 0.25);
RemoveBuildingForPlayer(playerid, 11456, -1520.9609, 2577.1641, 58.3125, 0.25);
RemoveBuildingForPlayer(playerid, 11455, -1505.4609, 2539.4922, 56.7891, 0.25);
RemoveBuildingForPlayer(playerid, 1294, -1508.0000, 2605.4219, 59.2734, 0.25);
RemoveBuildingForPlayer(playerid, 1294, -1520.8906, 2605.4219, 59.2734, 0.25);
RemoveBuildingForPlayer(playerid, 1522, -1509.6563, 2611.1172, 54.8750, 0.25);
RemoveBuildingForPlayer(playerid, 11449, -1520.9766, 2620.0938, 57.4453, 0.25);
RemoveBuildingForPlayer(playerid, 11460, -1523.2891, 2618.5938, 65.4219, 0.25);
RemoveBuildingForPlayer(playerid, 1294, -1500.1172, 2612.8594, 59.2734, 0.25);
RemoveBuildingForPlayer(playerid, 669, -1515.2578, 2635.2188, 55.2422, 0.25);
RemoveBuildingForPlayer(playerid, 1294, -1500.1172, 2628.4531, 59.2734, 0.25);
RemoveBuildingForPlayer(playerid, 3169, -1510.3516, 2646.6563, 54.7266, 0.25);
RemoveBuildingForPlayer(playerid, 3169, -1476.0391, 2565.3984, 54.7266, 0.25);
RemoveBuildingForPlayer(playerid, 3170, -1477.5859, 2549.2344, 54.8047, 0.25);
RemoveBuildingForPlayer(playerid, 669, -1470.7891, 2553.7109, 55.2422, 0.25);
RemoveBuildingForPlayer(playerid, 1308, -1462.4063, 2527.0078, 54.0547, 0.25);
RemoveBuildingForPlayer(playerid, 672, -1458.9531, 2565.6641, 55.8281, 0.25);
RemoveBuildingForPlayer(playerid, 700, -1459.3203, 2552.8281, 55.2266, 0.25);
RemoveBuildingForPlayer(playerid, 1308, -1464.2500, 2556.2344, 55.1563, 0.25);
RemoveBuildingForPlayer(playerid, 11450, -1459.9375, 2583.1563, 57.9375, 0.25);
RemoveBuildingForPlayer(playerid, 956, -1455.1172, 2591.6641, 55.2344, 0.25);
RemoveBuildingForPlayer(playerid, 1308, -1467.9531, 2595.4297, 55.1563, 0.25);
RemoveBuildingForPlayer(playerid, 1294, -1458.3828, 2597.0391, 59.2734, 0.25);
RemoveBuildingForPlayer(playerid, 672, -1454.2734, 2640.1406, 55.8281, 0.25);
RemoveBuildingForPlayer(playerid, 11461, -1466.0313, 2637.5938, 54.3906, 0.25);
RemoveBuildingForPlayer(playerid, 669, -1457.8672, 2648.9922, 55.2422, 0.25);
RemoveBuildingForPlayer(playerid, 11444, -1325.6719, 2527.7031, 86.1250, 0.25);
RemoveBuildingForPlayer(playerid, 11446, -1334.3828, 2524.6016, 86.1641, 0.25);
RemoveBuildingForPlayer(playerid, 11442, -1314.8359, 2526.4688, 86.3984, 0.25);
RemoveBuildingForPlayer(playerid, 11458, -1316.8516, 2542.6719, 86.8281, 0.25);
RemoveBuildingForPlayer(playerid, 11443, -1301.7188, 2527.4922, 86.6172, 0.25);
RemoveBuildingForPlayer(playerid, 11459, -1292.7969, 2529.0000, 86.5313, 0.25);
RemoveBuildingForPlayer(playerid, 11457, -1303.7734, 2550.2344, 86.2266, 0.25);
RemoveBuildingForPlayer(playerid, 3172, -1448.8594, 2560.5703, 54.8281, 0.25);
RemoveBuildingForPlayer(playerid, 669, -1437.4141, 2558.0859, 54.9531, 0.25);
RemoveBuildingForPlayer(playerid, 11556, -1348.3125, 2576.6328, 79.7734, 0.25);
RemoveBuildingForPlayer(playerid, 3292, -1425.2344, 2581.2656, 54.8359, 0.25);
RemoveBuildingForPlayer(playerid, 3293, -1420.5469, 2583.9453, 58.0313, 0.25);
RemoveBuildingForPlayer(playerid, 3294, -1420.5469, 2591.1563, 57.7422, 0.25);
RemoveBuildingForPlayer(playerid, 1522, -1450.6406, 2591.4688, 54.8203, 0.25);
RemoveBuildingForPlayer(playerid, 1294, -1437.5859, 2597.0391, 59.2734, 0.25);
RemoveBuildingForPlayer(playerid, 3170, -1446.4531, 2639.3516, 54.8047, 0.25);
RemoveBuildingForPlayer(playerid, 700, -1375.3594, 2630.2734, 53.1719, 0.25);
RemoveBuildingForPlayer(playerid, 669, -1368.5938, 2635.2422, 51.7344, 0.25);
RemoveBuildingForPlayer(playerid, 700, -1441.7891, 2647.3281, 55.2266, 0.25);
RemoveBuildingForPlayer(playerid, 11451, -1385.7578, 2640.8594, 54.9844, 0.25);
RemoveBuildingForPlayer(playerid, 11452, -1382.4531, 2648.0859, 55.1719, 0.25);
RemoveBuildingForPlayer(playerid, 3335, -1338.6094, 2652.2109, 49.8438, 0.25);
RemoveBuildingForPlayer(playerid, 3284, -1566.1719, 2653.8828, 56.7031, 0.25);
RemoveBuildingForPlayer(playerid, 3242, -1568.1016, 2709.6484, 56.6484, 0.25);
RemoveBuildingForPlayer(playerid, 1308, -1536.2891, 2661.4688, 55.1563, 0.25);
RemoveBuildingForPlayer(playerid, 3173, -1548.3359, 2699.6172, 54.8203, 0.25);
RemoveBuildingForPlayer(playerid, 1506, -1532.1328, 2657.4063, 55.2656, 0.25);
RemoveBuildingForPlayer(playerid, 3355, -1523.8047, 2656.6563, 54.8750, 0.25);
RemoveBuildingForPlayer(playerid, 3283, -1518.0313, 2698.5938, 55.2109, 0.25);
RemoveBuildingForPlayer(playerid, 3285, -1534.4453, 2689.2734, 56.6484, 0.25);
RemoveBuildingForPlayer(playerid, 669, -1504.0859, 2704.5859, 55.2422, 0.25);
RemoveBuildingForPlayer(playerid, 672, -1521.6094, 2707.5781, 55.5781, 0.25);
RemoveBuildingForPlayer(playerid, 1308, -1486.3359, 2657.2578, 55.1563, 0.25);
RemoveBuildingForPlayer(playerid, 3173, -1447.2344, 2653.3047, 54.8203, 0.25);
RemoveBuildingForPlayer(playerid, 3285, -1464.3438, 2656.5000, 56.6484, 0.25);
RemoveBuildingForPlayer(playerid, 1308, -1461.2344, 2678.8359, 55.2500, 0.25);
RemoveBuildingForPlayer(playerid, 1308, -1485.8516, 2680.7422, 55.1563, 0.25);
RemoveBuildingForPlayer(playerid, 3169, -1448.1328, 2690.7813, 54.7266, 0.25);
RemoveBuildingForPlayer(playerid, 3242, -1493.8359, 2688.9922, 56.6484, 0.25);
RemoveBuildingForPlayer(playerid, 3173, -1463.7656, 2692.8594, 54.8203, 0.25);
RemoveBuildingForPlayer(playerid, 700, -1454.8906, 2698.2031, 55.2266, 0.25);
RemoveBuildingForPlayer(playerid, 3170, -1482.3672, 2704.8047, 54.8047, 0.25);
RemoveBuildingForPlayer(playerid, 669, -1449.5234, 2705.4766, 55.2422, 0.25);
RemoveBuildingForPlayer(playerid, 672, -1466.9922, 2705.9453, 55.8281, 0.25);
RemoveBuildingForPlayer(playerid, 672, -1391.0469, 2667.0781, 54.7422, 0.25);
RemoveBuildingForPlayer(playerid, 11677, -1303.3672, 2664.0781, 53.5781, 0.25);
RemoveBuildingForPlayer(playerid, 1686, -1329.2031, 2669.2813, 49.4531, 0.25);
RemoveBuildingForPlayer(playerid, 1686, -1328.5859, 2674.7109, 49.4531, 0.25);
RemoveBuildingForPlayer(playerid, 11547, -1328.7188, 2677.5078, 52.2109, 0.25);
RemoveBuildingForPlayer(playerid, 1686, -1327.7969, 2680.1250, 49.4531, 0.25);
RemoveBuildingForPlayer(playerid, 1686, -1327.0313, 2685.5938, 49.4531, 0.25);
RemoveBuildingForPlayer(playerid, 669, -1437.5234, 2691.8984, 55.2422, 0.25);
RemoveBuildingForPlayer(playerid, 11546, -1320.6875, 2700.9531, 49.2656, 0.25);
RemoveBuildingForPlayer(playerid, 11545, -1270.4453, 2719.4375, 49.2656, 0.25);

Elevador[playerid] = CreateDynamicObject(18755, -1468.34387, 2529.50732, 57.12370,   0.00000, 0.00000, 180.88371, 7273);
Jaula[playerid] = CreateDynamicObject(5644, -1513.31665, 2467.86060, 122.47218,   0.00000, 90.00000, 178.46411, 7273); // posible jaula JAULAREAL- inicial, abajo final
	//CASA ADMIN BETA
	/*RemoveBuildingForPlayer(playerid, 11599, -1512.1563, 2514.4453, 54.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 11643, -1720.3438, 2615.9531, 81.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 11510, -1720.3438, 2615.9531, 81.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 700, -1548.3906, 2495.7344, 55.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 703, -1554.9922, 2510.0703, 57.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 669, -1530.5547, 2493.4609, 55.2422, 0.25);
	RemoveBuildingForPlayer(playerid, 669, -1535.4766, 2505.7578, 55.2422, 0.25);
	RemoveBuildingForPlayer(playerid, 11454, -1512.1563, 2514.4453, 54.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, -1462.0000, 2472.3359, 52.5313, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, -1463.7578, 2499.9453, 54.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 672, -1492.7813, 2518.5938, 55.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 11625, -1430.5781, 2303.7578, 62.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 700, -1559.2891, 2530.0156, 60.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 669, -1544.5781, 2524.6328, 55.2422, 0.25);
	RemoveBuildingForPlayer(playerid, 11455, -1505.4609, 2539.4922, 56.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, -1462.4063, 2527.0078, 54.0547, 0.25);

	//MAPA PRUEBA
	CreateObject(19609, -1478.17212, 2641.20093, 57.83016,   0.00000, 0.00000, 0.00000);
CreateObject(19128, -1483.48206, 2613.47510, 57.77900,   0.00000, 0.00000, 0.00000);
CreateObject(19128, -1478.42712, 2613.45166, 57.77900,   0.00000, 0.00000, 0.00000);
CreateObject(19128, -1481.35327, 2613.45313, 57.77900,   0.00000, 0.00000, 0.00000);
CreateObject(7184, -1477.42480, 2471.69775, 49.34956,   0.00000, 0.00000, 269.34344);
CreateObject(7184, -1496.88660, 2473.08228, 57.06202,   0.00000, 0.00000, 269.53979);
CreateObject(620, -1513.93652, 2539.36084, 55.24825,   0.00000, 0.00000, 0.00000);
CreateObject(620, -1549.98706, 2536.55981, 55.85426,   0.00000, 0.00000, 0.00000);
CreateObject(620, -1487.75854, 2539.58105, 55.55125,   0.00000, 0.00000, 0.00000);
CreateObject(620, -1493.71057, 2539.64893, 55.13291,   0.00000, 0.00000, 0.00000);
CreateObject(620, -1508.23328, 2539.31470, 55.23906,   0.00000, 0.00000, 0.00000);
CreateObject(7184, -1493.93530, 2508.80225, 48.64119,   0.00000, 0.00000, 358.42105);
CreateObject(7184, -1486.43469, 2452.90210, 48.64119,   0.00000, 0.00000, 269.34344);
CreateObject(3851, -1469.01611, 2527.03540, 69.55999,   90.40700, 3.00000, 267.66400);
Elevador[playerid] = CreateObject(18755, -1468.34387, 2529.50732, 57.12370,   0.00000, 0.00000, 180.88371);  // Elevador pos inicial
CreateObject(3851, -1466.43884, 2529.51782, 64.03297,   90.40700, 3.00000, -4.00000);
CreateObject(3851, -1466.43884, 2529.51782, 72.49529,   90.40700, 3.00000, -4.00000);
CreateObject(3851, -1466.43933, 2529.01563, 64.06435,   90.40700, 3.00000, -4.00000);
CreateObject(3851, -1468.23206, 2527.03540, 69.56000,   90.40700, 3.00000, 267.66400);
CreateObject(3851, -1468.23206, 2527.03540, 64.13029,   90.40700, 3.00000, 267.66400);
CreateObject(3851, -1469.01611, 2527.03540, 64.11581,   90.40700, 3.00000, 267.66400);
CreateObject(3851, -1469.28967, 2531.90259, 63.99225,   90.40700, 3.00000, 267.66400);
CreateObject(620, -1501.41504, 2539.81665, 55.44822,   0.00000, 0.00000, 0.00000);
CreateObject(3851, -1469.28967, 2531.90259, 69.30330,   90.40700, 3.00000, 267.66400);
CreateObject(3851, -1468.40771, 2531.90259, 64.00150,   90.40700, 3.00000, 267.66400);
CreateObject(3851, -1468.40771, 2531.90259, 69.30330,   90.40700, 3.00000, 267.66400);
CreateObject(3851, -1466.43884, 2529.99780, 64.04280,   90.40700, 3.00000, -4.00000);
CreateObject(3851, -1466.43884, 2529.11572, 72.49530,   90.40700, 3.00000, -4.00000);
CreateObject(3851, -1466.43884, 2529.51782, 64.34515,   90.40700, 3.00000, -4.00000);
CreateObject(19375, -1471.15625, 2527.12012, 73.99161,   0.00000, 0.00000, 271.55331);
CreateObject(19375, -1469.70239, 2527.18481, 55.06644,   0.00000, 0.00000, 271.55331);
CreateObject(19375, -1471.07056, 2529.73340, 79.22790,   0.00000, 89.00000, 271.55331);
CreateObject(1408, -1469.56323, 2524.67944, 55.69737,   0.00000, 0.00000, 1.63749);
CreateObject(1408, -1471.68091, 2532.24170, 55.69737,   0.00000, 0.00000, 248.11060);
CreateObject(1408, -1464.33960, 2524.86597, 55.69737,   0.00000, 0.00000, 1.63749);
CreateObject(1408, -1464.24475, 2534.85181, 55.69737,   0.00000, 0.00000, 181.55550);
CreateObject(1408, -1467.59363, 2534.76514, 55.69737,   0.00000, 0.00000, 181.55550);
CreateObject(19375, -1470.34216, 2531.75391, 55.06644,   0.00000, 0.00000, 271.55331);
CreateObject(19375, -1471.31738, 2531.36719, 73.99161,   0.00000, 0.00000, 271.55331);
CreateObject(19375, -1466.57117, 2529.87573, 55.03240,   0.00000, 89.00000, 271.55331);
CreateObject(19128, -1472.73071, 2529.15625, 75.12851,   0.00000, 0.00000, 0.00000);*/
	return 1;
}

funcion CargarCasaAdmin(vw)
{
	Create3DTextLabel("Escribe: /entrar, para entrar en la Jaula!\nTambién puedes pulsa 'Y' para acceder.", 0xFFDC00FF, -1497.310424, 2474.217773, 75.426422,  20.0, vw, 0);
	Create3DTextLabel("Escribe: /salir, para entrar en la Casa!\nTambién puedes pulsa 'Y' para salir.", 0xFFDC00FF, -1390.735473, 2652.322021, 73.770614, 20.0, vw, 0);
	Create3DTextLabel("Escribe: /entrar, para entrar en la Casa!\nTambién puedes pulsa 'Y' para acceder.", 0xFFDC00FF, -1401.353149, 2648.795410, 55.687500, 20.0, vw, 0);
	Create3DTextLabel("Escribe: /salir, para entrar en la Jaula!\nTambién puedes pulsa 'Y' para acceder.", 0xFFDC00FF, -1505.390991, 2475.138916, 75.430252, 20.0, vw, 0);
	Create3DTextLabel("Escribe: /es, para subir en el Elevador!\nTambién puedes pulsa 'Y' para subir.", 0xFFDC00FF, -1465.617919, 2531.445800, 56.091407, 20.0, vw, 0);
	Create3DTextLabel("Escribe: /eb, para bajar en el Elevador!\nTambién puedes pulsa 'Y' para bajar.", 0xFFDC00FF, -1472.181884, 2530.906982, 76.198822, 20.0, vw, 0);
/*CreateDynamicObject(19609, -1478.17212, 2641.20093, 57.83016,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19128, -1483.48206, 2613.47510, 57.77900,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19128, -1483.85803, 2626.75391, 57.77900,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19128, -1481.35327, 2613.45313, 57.77900,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(7184, -1477.42480, 2471.69775, 49.34956,   0.00000, 0.00000, 269.32278);
CreateDynamicObject(7184, -1496.88660, 2473.08228, 56.65598,   0.00000, 0.00000, 269.53979);
CreateDynamicObject(620, -1513.93652, 2539.36084, 55.24825,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(620, -1549.98706, 2536.55981, 55.85426,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(620, -1446.55383, 2684.10474, 55.55125,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(620, -1493.71057, 2539.64893, 55.13291,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(620, -1508.23328, 2539.31470, 55.23906,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(7184, -1493.93530, 2508.80225, 48.64119,   0.00000, 0.00000, 358.42105);
CreateDynamicObject(7184, -1486.43469, 2452.90210, 48.64119,   0.00000, 0.00000, 269.34344);
CreateDynamicObject(3851, -1469.01611, 2527.03540, 69.55999,   90.40700, 3.00000, 267.66400);
//CreateDynamicObject(18755, -1468.74231, 2529.29150, 77.12576,   0.00000, 0.00000, 0.75960); // Elevador final
CreateDynamicObject(3851, -1466.43884, 2529.51782, 64.03297,   90.40700, 3.00000, -4.00000);
CreateDynamicObject(3851, -1466.43884, 2529.51782, 73.50533,   90.40700, 3.00000, -4.00000);
CreateDynamicObject(3851, -1466.43933, 2529.01563, 64.06435,   90.40700, 3.00000, -4.00000);
CreateDynamicObject(3851, -1468.23206, 2527.03540, 69.56000,   90.40700, 3.00000, 267.66400);
CreateDynamicObject(3851, -1468.23206, 2527.03540, 64.13029,   90.40700, 3.00000, 267.66400);
CreateDynamicObject(3851, -1469.01611, 2527.03540, 64.11581,   90.40700, 3.00000, 267.66400);
CreateDynamicObject(3851, -1469.28967, 2531.90259, 63.99225,   90.40700, 3.00000, 267.66400);
CreateDynamicObject(620, -1501.41504, 2539.81665, 55.44822,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3851, -1469.28967, 2531.90259, 69.30330,   90.40700, 3.00000, 267.66400);
CreateDynamicObject(3851, -1468.40771, 2531.90259, 64.00150,   90.40700, 3.00000, 267.66400);
CreateDynamicObject(3851, -1468.40771, 2531.90259, 69.30330,   90.40700, 3.00000, 267.66400);
CreateDynamicObject(3851, -1466.43884, 2529.99780, 64.04280,   90.40700, 3.00000, -4.00000);
CreateDynamicObject(3851, -1466.43884, 2529.11572, 73.50735,   90.40700, 3.00000, -4.00000);
CreateDynamicObject(3851, -1466.43884, 2529.99780, 73.50735,   90.40700, 3.00000, -4.00000);
CreateDynamicObject(19375, -1471.15625, 2527.12012, 73.99161,   0.00000, 0.00000, 271.55331);
CreateDynamicObject(19375, -1469.70239, 2527.18481, 55.06644,   0.00000, 0.00000, 271.55331);
CreateDynamicObject(19375, -1471.07056, 2529.73340, 79.22790,   0.00000, 89.00000, 271.55331);
CreateDynamicObject(1408, -1469.56323, 2524.67944, 55.69737,   0.00000, 0.00000, 1.63749);
CreateDynamicObject(1408, -1471.68091, 2532.24170, 55.69737,   0.00000, 0.00000, 248.11060);
CreateDynamicObject(1408, -1464.33960, 2524.86597, 55.69737,   0.00000, 0.00000, 1.63749);
CreateDynamicObject(1408, -1464.24475, 2534.85181, 55.69737,   0.00000, 0.00000, 181.55550);
CreateDynamicObject(1408, -1467.59363, 2534.76514, 55.69737,   0.00000, 0.00000, 181.55550);
CreateDynamicObject(19375, -1470.34216, 2531.75391, 55.06644,   0.00000, 0.00000, 271.55331);
CreateDynamicObject(19375, -1471.31738, 2531.36719, 73.99161,   0.00000, 0.00000, 271.55331);
CreateDynamicObject(19375, -1466.57117, 2529.87573, 55.03240,   0.00000, 89.00000, 271.55331);
CreateDynamicObject(19128, -1472.73071, 2529.15625, 75.12851,   0.00000, 0.00000, 0.00000);
Elevador[playerid] = CreateDynamicObject(18755, -1468.34387, 2529.50732, 57.12370,   0.00000, 0.00000, 180.88371);
CreateDynamicObject(1408, -1473.43030, 2532.52686, 75.63355,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1408, -1478.80261, 2532.54688, 75.63355,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1408, -1484.08521, 2532.57715, 75.63355,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1408, -1489.34631, 2532.60254, 75.63355,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1266, -1524.69141, 2518.66943, 102.80302,   0.00000, 0.00000, 54.92595);
CreateDynamicObject(1681, -1525.82996, 2520.94189, 114.04730,   -15.20000, 9.80000, 296.43600);
CreateDynamicObject(19129, -1539.29639, 2473.13086, 82.69645,   0.00000, 0.00000, 358.26755);
CreateDynamicObject(19366, -1551.01831, 2465.90845, 84.17657,   0.00000, 0.00000, 358.34991);
CreateDynamicObject(19366, -1552.68408, 2466.04785, 85.90380,   0.00000, -89.50000, 358.34991);
CreateDynamicObject(19366, -1550.89746, 2473.89966, 84.17657,   0.00000, 0.00000, 358.34991);
CreateDynamicObject(19366, -1550.97961, 2470.76563, 84.17657,   0.00000, 0.00000, 358.34991);
CreateDynamicObject(19366, -1550.99719, 2467.56689, 84.17657,   0.00000, 0.00000, 358.34991);
CreateDynamicObject(19366, -1554.27917, 2465.95874, 84.17657,   0.00000, 0.00000, 358.34991);
CreateDynamicObject(19366, -1554.30798, 2467.61523, 84.17657,   0.00000, 0.00000, 358.34991);
CreateDynamicObject(19366, -1554.21912, 2470.81885, 84.17657,   0.00000, 0.00000, 358.34991);
CreateDynamicObject(19366, -1554.12280, 2474.03027, 84.17657,   0.00000, 0.00000, 358.34991);
CreateDynamicObject(19366, -1554.03247, 2477.16089, 84.17657,   0.00000, 0.00000, 358.34991);
CreateDynamicObject(19366, -1550.75940, 2476.98511, 84.17660,   0.00000, 0.00000, 357.01791);
CreateDynamicObject(19366, -1552.38416, 2477.02710, 85.90380,   0.00000, -89.50000, 358.34991);
CreateDynamicObject(19366, -1552.44263, 2473.90332, 85.90380,   0.00000, -89.50000, 358.34991);
CreateDynamicObject(19366, -1552.51855, 2470.79443, 85.90380,   0.00000, -89.50000, 358.34991);
CreateDynamicObject(19366, -1552.61548, 2467.67261, 85.90380,   0.00000, -89.50000, 358.34991);
CreateDynamicObject(19366, -1552.35938, 2478.58276, 84.19760,   0.00000, 0.00000, 269.01840);
CreateDynamicObject(19366, -1552.74646, 2464.42578, 84.19760,   0.00000, 0.00000, 269.01840);
CreateDynamicObject(18092, -1551.28333, 2471.99536, 86.43610,   0.00000, 0.00000, 268.72479);
CreateDynamicObject(2232, -1551.10193, 2470.00415, 87.54442,   0.00000, 0.00000, 90.86589);
CreateDynamicObject(2232, -1550.94666, 2473.94727, 87.54513,   0.00000, 0.00000, 86.75931);
CreateDynamicObject(1958, -1551.13794, 2472.01929, 86.95540,   0.00000, 0.00000, 89.44435);
CreateDynamicObject(1958, -1551.14050, 2471.70410, 86.95540,   0.00000, 0.00000, 89.44435);
CreateDynamicObject(14877, -1552.27527, 2479.53174, 83.87960,   0.00000, 0.00000, 267.34509);
CreateDynamicObject(10767, -1168.81006, 2759.28198, 41.33271,   0.00000, 0.00000, 339.57132);
CreateDynamicObject(10766, -1216.34265, 2799.61255, 53.89560,   0.00000, 0.00000, 294.29169);
CreateDynamicObject(10766, -1266.92224, 2776.13306, 54.00440,   0.19600, 0.00000, 114.72270);
CreateDynamicObject(10766, -1243.47888, 2725.16748, 53.95820,   0.19600, 0.00000, 114.72270);
CreateDynamicObject(10766, -1192.96936, 2748.25244, 53.59460,   0.00000, 0.00000, 294.29169);
CreateDynamicObject(16098, -1196.86072, 2797.49146, 60.08735,   0.00000, 0.00000, 295.16324);
CreateDynamicObject(4726, -1146.09485, 2825.49634, 54.96422,   0.00000, 0.00000, 201.23976);
CreateDynamicObject(17656, -1375.08521, 2689.77515, 50.22589,   0.00000, 0.00000, 348.33398);
CreateDynamicObject(17656, -1376.59399, 2682.90918, 49.71985,   0.00000, 0.00000, 348.33398);
CreateDynamicObject(3453, -1519.42102, 2467.61865, 76.34673,   0.00000, 0.00000, 281.30042);
CreateDynamicObject(3452, -1508.27856, 2471.92114, 73.91697,   0.00000, 0.00000, 89.80645);
CreateDynamicObject(14781, -1513.08325, 2473.15942, 75.67017,   0.00000, 0.00000, 357.90643);
CreateDynamicObject(5644, -1513.41345, 2467.67725, 59.77250,   0.00000, 0.00000, 358.46753); // posible jaula
CreateDynamicObject(3452, -1518.97693, 2480.49561, 74.32301,   0.00000, 0.00000, 267.84717); // posible jaula
CreateDynamicObject(5644, -1513.51758, 2467.87061, 84.68740,   0.00000, 0.00000, 358.87460);// posible jaula
CreateDynamicObject(1388, -1512.66101, 2502.28003, 134.44757,   0.00000, 0.00000, 180.06554);
CreateDynamicObject(1393, -1512.65308, 2462.60400, 137.67302,   0.00000, 0.00000, 0.00000);
Jaula[playerid] = CreateDynamicObject(5644, -1513.31665, 2467.86060, 122.47218,   0.00000, 90.00000, 178.46411); // posible jaula JAULAREAL- inicial, abajo final
//CreateDynamicObject(5644, -1513.31665, 2467.86060, 81.14433,   0.00000, 90.00000, 178.46411);// posible jaula
CreateDynamicObject(1391, -1512.43909, 2510.72510, 123.17380,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19313, -1554.92798, 2468.53662, 85.80251,   0.00000, 0.00000, 267.76834);
CreateDynamicObject(19313, -1544.24658, 2487.58105, 83.81651,   0.00000, 0.00000, 359.49594);
CreateDynamicObject(19313, -1527.29285, 2487.46826, 83.81651,   0.00000, 0.00000, 359.49594);
CreateDynamicObject(19366, -1520.19727, 2483.22754, 83.85999,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19366, -1520.18079, 2485.99976, 83.85999,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19366, -1520.18433, 2481.15405, 83.85999,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1523, -1534.23364, 2487.52759, 82.71309,   0.00000, 0.00000, 178.98682);
CreateDynamicObject(1523, -1537.27197, 2487.47046, 82.71309,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19313, -1546.73267, 2487.54102, 83.81651,   0.00000, 0.00000, 359.49594);
CreateDynamicObject(19313, -1554.24475, 2480.63452, 85.80251,   0.00000, 0.00000, 266.44400);
CreateDynamicObject(19313, -1535.03064, 2461.33447, 83.81651,   0.00000, 0.00000, 359.49594);
CreateDynamicObject(19608, -1552.35095, 2472.04956, 85.97644,   0.00000, 0.00000, 88.31789);
CreateDynamicObject(19849, -1439.34717, 2583.54321, 54.87868,   0.00000, 0.00000, 270.53430);
CreateDynamicObject(19604, -1420.78992, 2580.27075, 54.82196,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19604, -1420.86938, 2584.26221, 54.82204,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(11490, -1450.15955, 2581.02490, 53.74462,   0.00000, 0.00000, 180.45229);
CreateDynamicObject(1255, -1440.11829, 2588.45996, 55.37761,   0.00000, 0.00000, 89.30349);
CreateDynamicObject(1255, -1435.38708, 2588.55127, 55.37761,   0.00000, 0.00000, 89.30349);
CreateDynamicObject(1255, -1437.75269, 2588.50562, 55.37761,   0.00000, 0.00000, 89.30349);
CreateDynamicObject(11491, -1450.28943, 2592.42773, 55.72468,   0.00000, 0.00000, 180.39963);
CreateDynamicObject(19313, -1548.19067, 2461.52466, 83.81651,   0.00000, 0.00000, 359.49594);
CreateDynamicObject(19688, -1528.44446, 2545.12402, 90.12032,   0.00000, 0.00000, 92.48182);
CreateDynamicObject(19682, -1528.71521, 2565.85498, 78.84766,   0.00000, -23.47200, 283.19189);
CreateDynamicObject(19701, -1531.99084, 2579.87329, 58.16330,   0.00000, 0.00000, 49.66807);
CreateDynamicObject(19701, -1531.71082, 2580.10889, 68.17934,   0.00000, 0.00000, 49.66807);
CreateDynamicObject(16776, -1532.49512, 2584.69238, 54.31734,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19754, -1519.88147, 2539.18359, 90.66931,   0.00000, 0.00000, 86.36282);
CreateDynamicObject(19752, -1518.32361, 2547.89502, 91.15550,   0.00000, 0.00000, 272.58630);
CreateDynamicObject(19740, -1509.71667, 2549.31470, 91.11150,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19740, -1497.43933, 2549.28979, 91.11150,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19755, -1485.08264, 2549.24707, 90.71230,   0.00000, 8.01500, 359.49796);
CreateDynamicObject(19740, -1400.27539, 2549.11938, 89.26636,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19740, -1473.38513, 2549.19409, 89.26636,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19740, -1461.20264, 2549.22388, 89.26636,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19740, -1449.16553, 2549.17334, 89.26636,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19740, -1436.76843, 2549.12158, 89.26636,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19740, -1424.74341, 2549.12842, 89.26636,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19740, -1412.59070, 2549.15015, 89.26636,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(7184, -1477.42480, 2471.69775, 49.34956,   0.00000, 0.00000, 269.34344);
CreateDynamicObject(19701, -1393.40063, 2557.11206, 64.82961,   0.00000, 0.00000, 349.88300);
CreateDynamicObject(19701, -1392.80688, 2557.05713, 84.87683,   0.00000, 0.00000, 349.88300);
CreateDynamicObject(19701, -1393.21960, 2557.10522, 75.00787,   0.00000, 0.00000, 349.88300);
CreateDynamicObject(19543, -1533.80981, 2635.75317, 54.90524,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19543, -1508.11670, 2635.74219, 54.90524,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19543, -1523.04150, 2635.70020, 54.90524,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(16091, -1612.36060, 2692.69995, 54.87885,   0.00000, 0.00000, 1.49474);
CreateDynamicObject(19313, -1501.27966, 2659.22314, 57.95677,   0.00000, 0.00000, 269.99561);
CreateDynamicObject(19313, -1534.11316, 2604.59644, 57.85575,   0.00000, 0.00000, 180.22871);
CreateDynamicObject(19313, -1501.28943, 2649.21997, 57.95677,   0.00000, 0.00000, 269.99561);
CreateDynamicObject(19313, -1501.31445, 2639.15039, 57.95677,   0.00000, 0.00000, 269.99561);
CreateDynamicObject(19313, -1540.41675, 2659.47949, 57.95677,   0.00000, 0.00000, 269.42783);
CreateDynamicObject(19313, -1508.40051, 2604.93481, 57.85575,   0.00000, 0.00000, 180.22871);
CreateDynamicObject(19313, -1533.37427, 2666.18970, 57.85575,   0.00000, 0.00000, 180.22871);
CreateDynamicObject(19313, -1501.29883, 2612.00415, 57.95677,   0.00000, 0.00000, 269.99561);
CreateDynamicObject(19313, -1540.98755, 2611.55640, 57.95677,   0.00000, 0.00000, 269.42783);
CreateDynamicObject(19313, -1540.79248, 2625.60864, 57.95677,   0.00000, 0.00000, 269.42783);
CreateDynamicObject(19313, -1540.64539, 2639.47363, 57.95677,   0.00000, 0.00000, 269.42783);
CreateDynamicObject(19313, -1540.54797, 2653.32007, 57.95677,   0.00000, 0.00000, 269.42783);
CreateDynamicObject(19313, -1522.42200, 2604.85815, 57.85575,   0.00000, 0.00000, 180.22871);
CreateDynamicObject(19313, -1508.39404, 2666.24609, 57.85575,   0.00000, 0.00000, 180.22871);
CreateDynamicObject(19313, -1522.37476, 2666.21143, 57.85575,   0.00000, 0.00000, 180.22871);
CreateDynamicObject(3819, -1525.23901, 2662.21753, 55.89971,   0.00000, 0.00000, 89.88281);
CreateDynamicObject(3819, -1505.80811, 2654.09180, 55.89971,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3819, -1505.92017, 2643.86743, 55.89971,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3819, -1535.97388, 2643.45483, 55.89971,   0.00000, 0.00000, 178.78981);
CreateDynamicObject(3819, -1535.61084, 2653.73389, 55.89971,   0.00000, 0.00000, 178.78981);
CreateDynamicObject(3819, -1514.58862, 2662.36499, 55.89971,   0.00000, 0.00000, 89.88281);
CreateDynamicObject(14781, -1520.18335, 2648.38062, 56.23708,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(14628, -1499.83582, 2625.81616, 62.41128,   0.00000, 0.00000, 271.39111);
CreateDynamicObject(1634, -1564.95898, 2629.58862, 54.88264,   0.00000, 0.00000, 9.28362);
CreateDynamicObject(3502, -1590.12256, 2618.47217, 64.51970,   24.50000, 2.00000, 269.68292);
CreateDynamicObject(3502, -1545.43750, 2617.35693, 62.98812,   0.00000, 0.00000, 88.41410);
CreateDynamicObject(3502, -1554.27148, 2617.60938, 62.98812,   0.00000, 0.00000, 88.41410);
CreateDynamicObject(3502, -1598.37805, 2618.61572, 62.89013,   0.00000, 0.00000, 88.41410);
CreateDynamicObject(3502, -1570.52234, 2618.06787, 64.51970,   24.50000, 2.00000, 88.51611);
CreateDynamicObject(3502, -1562.72778, 2617.82520, 62.98810,   0.00000, 0.00000, 88.41410);
CreateDynamicObject(3502, -1606.49182, 2618.83496, 63.50320,   10.00000, 0.00000, 88.41410);
CreateDynamicObject(3502, -1633.55212, 2684.47559, 96.29090,   9.00000, 0.00000, 312.40488);
CreateDynamicObject(3502, -1613.38013, 2619.79102, 66.34660,   37.50000, 0.00000, 75.23390);
CreateDynamicObject(3502, -1619.61389, 2622.34106, 71.03625,   32.00000, 0.00000, 61.39629);
CreateDynamicObject(3502, -1625.23572, 2626.13208, 75.29575,   32.00000, 0.00000, 48.55745);
CreateDynamicObject(3502, -1629.88245, 2630.21533, 79.18265,   32.00000, 0.00000, 48.55745);
CreateDynamicObject(3502, -1633.45837, 2634.58887, 82.86873,   32.00000, 0.00000, 20.92300);
CreateDynamicObject(3502, -1636.18103, 2641.59033, 87.09040,   26.00000, 0.00000, 20.92300);
CreateDynamicObject(3502, -1638.63293, 2647.57031, 89.60121,   15.50000, 0.00000, 20.92300);
CreateDynamicObject(3502, -1641.60376, 2655.13647, 91.39870,   9.00000, 0.00000, 20.92300);
CreateDynamicObject(3502, -1642.85559, 2663.29736, 92.66695,   9.00000, 0.00000, 356.91904);
CreateDynamicObject(3502, -1641.83386, 2670.49951, 93.77699,   9.00000, 0.00000, 344.08011);
CreateDynamicObject(3502, -1638.75549, 2678.04321, 94.96770,   9.00000, 0.00000, 330.09637);
CreateDynamicObject(1634, -1630.83545, 2687.04150, 94.65131,   0.00000, 0.00000, 309.77603);
CreateDynamicObject(3877, -1503.19751, 2618.81567, 54.88092,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3877, -1503.33813, 2632.50513, 54.88475,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3872, -1533.79150, 2469.03125, 91.14072,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(13666, -1525.91528, 2633.74805, 59.74581,   0.00000, 0.00000, 268.42197);
CreateDynamicObject(1634, -1529.20715, 2632.30640, 54.30992,   0.00000, 0.00000, 82.22881);
CreateDynamicObject(18102, -1550.50684, 2466.95093, 96.52102,   0.00000, 0.00000, 280.73065);
CreateDynamicObject(18102, -1536.46252, 2470.50439, 96.52102,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8493, -1564.83447, 2648.90674, 71.76344,   0.00000, 0.00000, 270.40503);
CreateDynamicObject(16091, -1502.03845, 2625.57837, 54.87885,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(978, -1508.42542, 2682.68311, 56.25830,   0.00000, 0.00000, 342.12936);
CreateDynamicObject(979, -1516.94312, 2678.15649, 55.71510,   0.00000, 0.00000, 152.48260);
CreateDynamicObject(979, -1605.47864, 2687.60522, 54.90302,   0.00000, 0.00000, 179.45813);
CreateDynamicObject(978, -1605.63562, 2697.67773, 54.84020,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(978, -1596.47083, 2697.68237, 54.84020,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(979, -1596.39783, 2687.53906, 54.90302,   0.00000, 0.00000, 179.45813);
CreateDynamicObject(1634, -1592.14282, 2695.22876, 53.32428,   0.00000, 0.00000, 271.26187);
CreateDynamicObject(1634, -1592.05029, 2690.01221, 53.32428,   0.00000, 0.00000, 271.26187);
CreateDynamicObject(1634, -1592.09656, 2693.56299, 53.32428,   0.00000, 0.00000, 271.26187);
CreateDynamicObject(1634, -1578.82874, 2690.29663, 53.32428,   0.00000, 0.00000, 93.61394);
CreateDynamicObject(1634, -1579.11621, 2695.44312, 53.32428,   0.00000, 0.00000, 93.61394);
CreateDynamicObject(1634, -1578.94543, 2692.37964, 53.32428,   0.00000, 0.00000, 93.61394);
CreateDynamicObject(1225, -1586.68127, 2695.99365, 55.13689,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1225, -1586.64209, 2688.86230, 55.13689,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1225, -1584.15051, 2689.01270, 55.13689,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1225, -1584.29785, 2691.45532, 55.13689,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1225, -1586.61731, 2691.31519, 55.13689,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1225, -1586.77209, 2693.88208, 55.13689,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1225, -1584.57129, 2694.01489, 55.13689,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1225, -1584.69775, 2696.11328, 55.13689,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(979, -1587.03943, 2687.43384, 54.90302,   0.00000, 0.00000, 179.45813);
CreateDynamicObject(978, -1587.20654, 2697.69751, 54.84020,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(978, -1578.28503, 2697.65259, 55.04120,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(979, -1578.28662, 2687.35400, 55.30906,   0.00000, 0.00000, 179.45813);
CreateDynamicObject(979, -1569.26147, 2687.24097, 55.71510,   0.00000, 0.00000, 179.45813);
CreateDynamicObject(978, -1569.29883, 2697.65527, 55.54925,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1225, -1555.81482, 2690.17041, 55.14422,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1225, -1550.00562, 2689.10864, 55.23844,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1225, -1551.29370, 2693.11865, 55.23844,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(978, -1560.05286, 2697.65820, 55.54925,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(979, -1559.92908, 2687.13965, 55.71510,   0.00000, 0.00000, 179.45813);
CreateDynamicObject(978, -1551.42896, 2697.59790, 56.25830,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(979, -1550.73096, 2687.06128, 55.71510,   0.00000, 0.00000, 179.45813);
CreateDynamicObject(979, -1541.94641, 2687.89795, 55.71510,   0.00000, 0.00000, 191.62093);
CreateDynamicObject(978, -1542.50378, 2696.70972, 56.25830,   0.00000, 0.00000, 349.52893);
CreateDynamicObject(978, -1533.70813, 2694.09253, 56.25830,   0.00000, 0.00000, 337.08109);
CreateDynamicObject(979, -1533.30676, 2686.69067, 55.71510,   0.00000, 0.00000, 152.48260);
CreateDynamicObject(978, -1525.11511, 2690.46191, 56.25830,   0.00000, 0.00000, 337.08109);
CreateDynamicObject(979, -1525.02954, 2682.36279, 55.71510,   0.00000, 0.00000, 152.48260);
CreateDynamicObject(978, -1516.91858, 2686.38257, 56.25830,   0.00000, 0.00000, 330.61404);
CreateDynamicObject(979, -1483.88855, 2666.54419, 55.71510,   0.00000, 0.00000, 141.07965);
CreateDynamicObject(979, -1508.55334, 2674.44458, 55.71510,   0.00000, 0.00000, 160.82407);
CreateDynamicObject(978, -1476.85217, 2667.52393, 56.25830,   0.00000, 0.00000, 315.06662);
CreateDynamicObject(11317, -1476.34766, 2705.10913, 65.73534,   0.00000, 0.00000, 91.36139);
CreateDynamicObject(19449, -1447.08862, 2708.53149, 57.19283,   0.00000, 0.00000, 2.54096);
CreateDynamicObject(19449, -1446.49219, 2691.02808, 55.95396,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19449, -1446.74451, 2700.61426, 55.95396,   0.00000, 0.00000, 2.54096);
CreateDynamicObject(19449, -1446.74451, 2700.61426, 58.73045,   0.00000, 0.00000, 2.54096);
CreateDynamicObject(19449, -1447.26221, 2708.48071, 58.73045,   0.00000, 0.00000, 2.54096);
CreateDynamicObject(19449, -1453.08606, 2712.40649, 61.84554,   0.00000, 0.00000, 274.29117);
CreateDynamicObject(19449, -1456.30164, 2712.09766, 62.06104,   0.00000, 0.00000, 274.29117);
CreateDynamicObject(19449, -1453.08606, 2712.40649, 62.78239,   0.00000, 0.00000, 274.29117);
CreateDynamicObject(19449, -1456.30164, 2712.09766, 62.78239,   0.00000, 0.00000, 274.29117);
CreateDynamicObject(19449, -1466.63037, 2711.10474, 62.78239,   0.00000, 0.00000, 274.29117);
CreateDynamicObject(19449, -1466.63037, 2711.10474, 62.24628,   0.00000, 0.00000, 274.29117);
CreateDynamicObject(19449, -1468.64709, 2710.88403, 62.24628,   0.00000, 0.00000, 274.29117);
CreateDynamicObject(19449, -1468.64709, 2710.88403, 62.75638,   0.00000, 0.00000, 274.29117);
CreateDynamicObject(19449, -1468.61829, 2702.89331, 57.17362,   0.00000, 0.00000, 271.53946);
CreateDynamicObject(19449, -1468.24011, 2702.70532, 56.15342,   0.00000, 0.00000, 271.53946);
CreateDynamicObject(19449, -1459.13098, 2702.96167, 56.15342,   0.00000, 0.00000, 271.53946);
CreateDynamicObject(19449, -1453.37415, 2703.12598, 56.15342,   0.00000, 0.00000, 271.53946);
CreateDynamicObject(19449, -1453.37415, 2703.12598, 57.17362,   0.00000, 0.00000, 271.53946);
CreateDynamicObject(19449, -1463.02124, 2702.95703, 57.17362,   0.00000, 0.00000, 271.53946);
CreateDynamicObject(3437, -1447.17419, 2686.07227, 60.56110,   0.00000, 0.00000, 0.83938);
CreateDynamicObject(3437, -1486.75806, 2684.66333, 60.56110,   0.00000, 0.00000, 0.83938);
CreateDynamicObject(3437, -1491.66003, 2684.70044, 60.56110,   0.00000, 0.00000, 0.83938);
CreateDynamicObject(3437, -1504.77393, 2684.80200, 60.56110,   0.00000, 0.00000, 0.83938);
CreateDynamicObject(3437, -1473.70923, 2685.26831, 60.56110,   0.00000, 0.00000, 0.83938);
CreateDynamicObject(3437, -1460.42529, 2685.67017, 60.56110,   0.00000, 0.00000, 0.83938);
CreateDynamicObject(14628, -1480.63403, 2683.59814, 67.50741,   0.00000, 0.00000, 181.82581);
CreateDynamicObject(4601, -1335.09631, 2664.44873, 69.45493,   0.00000, 0.00000, 1.67194);
CreateDynamicObject(19128, -1478.42712, 2613.45166, 57.77900,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19128, -1478.45801, 2617.23975, 57.77900,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19128, -1478.49036, 2621.16162, 57.77900,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19128, -1478.49084, 2624.93970, 57.77900,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19128, -1478.52075, 2628.53174, 57.77900,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19128, -1478.54407, 2632.33911, 57.77900,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19128, -1478.53918, 2636.31860, 57.77900,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19128, -1478.55090, 2640.26245, 57.77900,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19128, -1478.56848, 2641.18506, 57.77900,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19128, -1482.33533, 2641.21362, 57.77900,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19128, -1483.67102, 2641.23901, 57.77900,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19128, -1483.70398, 2637.47070, 57.77900,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19128, -1482.36548, 2637.53027, 57.77900,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19128, -1482.19604, 2633.73755, 57.77900,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19128, -1483.66382, 2633.67236, 57.77900,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19128, -1483.59705, 2629.86475, 57.77900,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19128, -1482.47070, 2629.91479, 57.77900,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19128, -1482.42603, 2626.30884, 57.77900,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19128, -1482.38110, 2622.67041, 57.77900,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19128, -1482.33447, 2618.89429, 57.77900,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19128, -1482.31091, 2616.98120, 57.77900,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19128, -1483.49243, 2617.29956, 57.77900,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19128, -1483.48291, 2621.07520, 57.77900,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19128, -1483.68909, 2625.03857, 57.77900,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19508, -1386.13721, 2650.94849, 75.01280,   0.00000, 0.00000, 359.48477);
CreateDynamicObject(1536, -1391.17761, 2653.09961, 72.49370,   0.00000, 0.00000, 271.30130);
CreateDynamicObject(2532, -1382.78247, 2644.99438, 72.76010,   0.00000, 0.00000, 183.58369);
CreateDynamicObject(2532, -1381.71729, 2645.02295, 72.76010,   0.00000, 0.00000, 183.58369);
CreateDynamicObject(2541, -1383.79468, 2645.49121, 72.69450,   0.00000, 0.00000, 181.54468);
CreateDynamicObject(2596, -1379.75903, 2650.89600, 74.64039,   0.00000, 0.00000, 276.83786);
CreateDynamicObject(2681, -1386.84009, 2645.48462, 72.79737,   0.00000, 0.00000, 181.59221);
CreateDynamicObject(2681, -1386.02722, 2645.55811, 72.79737,   0.00000, 0.00000, 181.59221);
CreateDynamicObject(2755, -1385.27368, 2646.51660, 74.15819,   0.00000, 0.00000, 275.25366);
CreateDynamicObject(1594, -1388.34155, 2655.09937, 73.21630,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2683, -1383.03418, 2655.27124, 73.90480,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2683, -1381.78845, 2655.25000, 73.90480,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2683, -1380.31201, 2655.37329, 73.90480,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1536, -1379.79663, 2655.19092, 72.59849,   0.00000, 0.00000, 269.58902);
CreateDynamicObject(11686, -1382.08423, 2655.43042, 72.66611,   0.00000, 0.00000, 359.59393);
CreateDynamicObject(8355, -1391.24805, 2664.35742, 6.51128,   89.50000, -88.00000, 357.62463);
CreateDynamicObject(8355, -1379.09900, 2662.27856, 8.87230,   89.50000, -88.00000, 176.65340);
CreateDynamicObject(19454, -1386.49341, 2644.84399, 73.18952,   0.00000, 0.00000, 271.10153);
CreateDynamicObject(1545, -1382.48499, 2657.29810, 74.08518,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2826, -1388.99915, 2647.35449, 72.76519,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2826, -1389.58008, 2646.94409, 72.76519,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2811, -1390.79724, 2651.54150, 72.76564,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2811, -1390.75232, 2653.07153, 72.76588,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2860, -1388.32397, 2655.00415, 73.60720,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2964, -1389.34900, 2649.80078, 72.76573,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2291, -1384.35376, 2651.97510, 72.76750,   0.00000, 0.00000, 93.92155);
CreateDynamicObject(2291, -1381.65088, 2649.11670, 72.76750,   0.00000, 0.00000, 186.55534);
CreateDynamicObject(2291, -1382.68579, 2648.97876, 72.76750,   0.00000, 0.00000, 186.55534);
CreateDynamicObject(2291, -1384.19006, 2649.89673, 72.76750,   0.00000, 0.00000, 94.41074);
CreateDynamicObject(2291, -1384.27795, 2650.93066, 72.76750,   0.00000, 0.00000, 93.92155);
CreateDynamicObject(1536, -1399.91528, 2647.99048, 54.72208,   0.00000, 0.00000, 91.34611);
CreateDynamicObject(978, -1499.63525, 2680.38525, 56.25830,   0.00000, 0.00000, 348.57220);
CreateDynamicObject(979, -1499.57568, 2672.68677, 55.71510,   0.00000, 0.00000, 175.78458);
CreateDynamicObject(978, -1491.69312, 2677.82788, 56.25830,   0.00000, 0.00000, 335.95941);
CreateDynamicObject(979, -1491.81506, 2671.05762, 55.71510,   0.00000, 0.00000, 159.79182);
CreateDynamicObject(978, -1483.68018, 2673.27246, 56.25830,   0.00000, 0.00000, 324.54413);
CreateDynamicObject(16091, -1476.87109, 2663.32153, 54.82966,   0.00000, 0.00000, 278.58121);
CreateDynamicObject(19588, -1483.88782, 2491.93506, 79.00580,   0.00000, 29.00000, 0.00000);
CreateDynamicObject(1634, -1529.70935, 2617.22290, 54.88264,   0.00000, 0.00000, 89.01654);
CreateDynamicObject(620, -1487.75854, 2539.58105, 55.55125,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(620, -1503.23853, 2682.80518, 55.55125,   0.00000, 0.00000, 0.00000);
//AUTOS
CreateVehicle(451, -1467.7279, 2697.5601, 61.2070, 198.1040, -1, -1, 100);
CreateVehicle(451, -1458.3350, 2699.2703, 61.2070, 198.1040, -1, -1, 100);
CreateVehicle(506, -1493.8455, 2695.2073, 61.2280, 210.3298, -1, -1, 100);
CreateVehicle(506, -1498.4299, 2694.8950, 61.2280, 210.3298, -1, -1, 100);
CreateVehicle(411, -1451.9058, 2700.9900, 61.1217, 189.8636, -1, -1, 100);
CreateVehicle(541, -1457.8998, 2695.9448, 55.3250, 180.7977, -1, -1, 100);
CreateVehicle(541, -1453.0402, 2695.4211, 55.3250, 180.7977, -1, -1, 100);
CreateVehicle(545, -1469.3733, 2694.3066, 55.6718, 183.9775, -1, -1, 100);
CreateVehicle(545, -1464.6278, 2694.4341, 55.6718, 183.9775, -1, -1, 100);
CreateVehicle(560, -1477.6693, 2692.5586, 55.4300, 182.2210, -1, -1, 100);
CreateVehicle(560, -1483.5630, 2692.2241, 55.4300, 182.2210, -1, -1, 100);
CreateVehicle(557, -1498.7484, 2693.3816, 55.9336, 181.4674, -1, -1, 100);
CreateVehicle(571, -1617.3679, 2693.3655, 55.1393, 266.3611, -1, -1, 100);
CreateVehicle(571, -1614.5775, 2695.1450, 55.1393, 266.3611, -1, -1, 100);
CreateVehicle(571, -1614.6683, 2693.0037, 55.1393, 266.3611, -1, -1, 100);
CreateVehicle(571, -1614.8080, 2691.1069, 55.1393, 266.3611, -1, -1, 100);
CreateVehicle(571, -1614.9601, 2689.0564, 55.1393, 266.3611, -1, -1, 100);
CreateVehicle(571, -1617.5333, 2691.1355, 55.1393, 266.3611, -1, -1, 100);
CreateVehicle(471, -1452.2166, 2629.7434, 55.2341, 0.0000, 0, 0, 100); //POSIBLE NO AUTO CONSEN
CreateVehicle(471, -1446.3499, 2629.6401, 55.2341, 0.0000, 0, 0, 100); //POSIBLE NO AUTO CONSEN
CreateVehicle(471, -1449.2023, 2629.7590, 55.2341, 0.0000, 0, 0, 100); //POSIBLE NO AUTO CONSEN
CreateVehicle(411, -1405.7900, 2631.6616, 55.3222, 0.0000, 0, 0, 100); //POSIBLE AUTO CONSEN
CreateVehicle(411, -1349.4589, 2674.9797, 50.2168, 121.9536, 0, 0, 100); //POSIBLE AUTO CONSEN
CreateVehicle(424, -1347.4839, 2671.2583, 50.2417, 122.4949, 0, 0, 100); // Posible Autos no Conse
CreateVehicle(425, -1144.4402, 2823.4534, 57.9261, 197.8477, -1, -1, 100);
CreateVehicle(520, -1212.4149, 2788.1355, 57.7641, 204.6113, -1, -1, 100);
CreateVehicle(520, -1179.5817, 2802.3281, 57.7641, 204.6113, -1, -1, 100);
CreateVehicle(447, -1488.5358, 2468.6133, 75.3449, 267.2776, -1, -1, 100); // Posible Autos no Conse
CreateVehicle(468, -1512.1398, 2606.7712, 55.8129, 0.0000, 0, 0, 100); // Posible Autos no Conse
CreateVehicle(468, -1507.5823, 2606.6504, 55.8129, 0.0000, 0, 0, 100); // Posible Autos no Conse
CreateVehicle(468, -1509.0317, 2606.6326, 55.8129, 0.0000, 0, 0, 100); // Posible Autos no Conse
CreateVehicle(468, -1510.6415, 2606.6934, 55.8129, 0.0000, 0, 0, 100); // Posible Autos no Conse
CreateVehicle(424, -1466.8105, 2588.9604, 55.5781, 0.0000, -1, -1, 100);
CreateVehicle(424, -1459.1776, 2589.0300, 55.5781, 0.0000, -1, -1, 100);*/

CreateDynamicObject(19609, -1478.17212, 2641.20093, 57.83016,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(19128, -1483.48206, 2613.47510, 57.77900,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(19128, -1483.85803, 2626.75391, 57.77900,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(19128, -1481.35327, 2613.45313, 57.77900,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(7184, -1477.42480, 2471.69775, 49.34956,   0.00000, 0.00000, 269.32278, vw);
CreateDynamicObject(7184, -1496.88660, 2473.08228, 56.65598,   0.00000, 0.00000, 269.53979, vw);
CreateDynamicObject(620, -1513.93652, 2539.36084, 55.24825,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(620, -1549.98706, 2536.55981, 55.85426,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(620, -1446.55383, 2684.10474, 55.55125,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(620, -1493.71057, 2539.64893, 55.13291,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(620, -1508.23328, 2539.31470, 55.23906,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(7184, -1493.93530, 2508.80225, 48.64119,   0.00000, 0.00000, 358.42105, vw);
CreateDynamicObject(7184, -1486.43469, 2452.90210, 48.64119,   0.00000, 0.00000, 269.34344, vw);
CreateDynamicObject(3851, -1469.01611, 2527.03540, 69.55999,   90.40700, 3.00000, 267.66400, vw);
//CreateDynamicObject(18755, -1468.74231, 2529.29150, 77.12576,   0.00000, 0.00000, 0.75960, vw); // Elevador final
CreateDynamicObject(3851, -1466.43884, 2529.51782, 64.03297,   90.40700, 3.00000, -4.00000, vw);
CreateDynamicObject(3851, -1466.43884, 2529.51782, 73.50533,   90.40700, 3.00000, -4.00000, vw);
CreateDynamicObject(3851, -1466.43933, 2529.01563, 64.06435,   90.40700, 3.00000, -4.00000, vw);
CreateDynamicObject(3851, -1468.23206, 2527.03540, 69.56000,   90.40700, 3.00000, 267.66400, vw);
CreateDynamicObject(3851, -1468.23206, 2527.03540, 64.13029,   90.40700, 3.00000, 267.66400, vw);
CreateDynamicObject(3851, -1469.01611, 2527.03540, 64.11581,   90.40700, 3.00000, 267.66400, vw);
CreateDynamicObject(3851, -1469.28967, 2531.90259, 63.99225,   90.40700, 3.00000, 267.66400, vw);
CreateDynamicObject(620, -1501.41504, 2539.81665, 55.44822,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(3851, -1469.28967, 2531.90259, 69.30330,   90.40700, 3.00000, 267.66400, vw);
CreateDynamicObject(3851, -1468.40771, 2531.90259, 64.00150,   90.40700, 3.00000, 267.66400, vw);
CreateDynamicObject(3851, -1468.40771, 2531.90259, 69.30330,   90.40700, 3.00000, 267.66400, vw);
CreateDynamicObject(3851, -1466.43884, 2529.99780, 64.04280,   90.40700, 3.00000, -4.00000, vw);
CreateDynamicObject(3851, -1466.43884, 2529.11572, 73.50735,   90.40700, 3.00000, -4.00000, vw);
CreateDynamicObject(3851, -1466.43884, 2529.99780, 73.50735,   90.40700, 3.00000, -4.00000, vw);
CreateDynamicObject(19375, -1471.15625, 2527.12012, 73.99161,   0.00000, 0.00000, 271.55331, vw);
CreateDynamicObject(19375, -1469.70239, 2527.18481, 55.06644,   0.00000, 0.00000, 271.55331, vw);
CreateDynamicObject(19375, -1471.07056, 2529.73340, 79.22790,   0.00000, 89.00000, 271.55331, vw);
CreateDynamicObject(1408, -1469.56323, 2524.67944, 55.69737,   0.00000, 0.00000, 1.63749, vw);
CreateDynamicObject(1408, -1471.68091, 2532.24170, 55.69737,   0.00000, 0.00000, 248.11060, vw);
CreateDynamicObject(1408, -1464.33960, 2524.86597, 55.69737,   0.00000, 0.00000, 1.63749, vw);
CreateDynamicObject(1408, -1464.24475, 2534.85181, 55.69737,   0.00000, 0.00000, 181.55550, vw);
CreateDynamicObject(1408, -1467.59363, 2534.76514, 55.69737,   0.00000, 0.00000, 181.55550, vw);
CreateDynamicObject(19375, -1470.34216, 2531.75391, 55.06644,   0.00000, 0.00000, 271.55331, vw);
CreateDynamicObject(19375, -1471.31738, 2531.36719, 73.99161,   0.00000, 0.00000, 271.55331, vw);
CreateDynamicObject(19375, -1466.57117, 2529.87573, 55.03240,   0.00000, 89.00000, 271.55331, vw);
CreateDynamicObject(19128, -1472.73071, 2529.15625, 75.12851,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(1408, -1473.43030, 2532.52686, 75.63355,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(1408, -1478.80261, 2532.54688, 75.63355,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(1408, -1484.08521, 2532.57715, 75.63355,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(1408, -1489.34631, 2532.60254, 75.63355,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(1266, -1524.69141, 2518.66943, 102.80302,   0.00000, 0.00000, 54.92595, vw);
CreateDynamicObject(1681, -1525.82996, 2520.94189, 114.04730,   -15.20000, 9.80000, 296.43600, vw);
CreateDynamicObject(19129, -1539.29639, 2473.13086, 82.69645,   0.00000, 0.00000, 358.26755, vw);
CreateDynamicObject(19366, -1551.01831, 2465.90845, 84.17657,   0.00000, 0.00000, 358.34991, vw);
CreateDynamicObject(19366, -1552.68408, 2466.04785, 85.90380,   0.00000, -89.50000, 358.34991, vw);
CreateDynamicObject(19366, -1550.89746, 2473.89966, 84.17657,   0.00000, 0.00000, 358.34991, vw);
CreateDynamicObject(19366, -1550.97961, 2470.76563, 84.17657,   0.00000, 0.00000, 358.34991, vw);
CreateDynamicObject(19366, -1550.99719, 2467.56689, 84.17657,   0.00000, 0.00000, 358.34991, vw);
CreateDynamicObject(19366, -1554.27917, 2465.95874, 84.17657,   0.00000, 0.00000, 358.34991, vw);
CreateDynamicObject(19366, -1554.30798, 2467.61523, 84.17657,   0.00000, 0.00000, 358.34991, vw);
CreateDynamicObject(19366, -1554.21912, 2470.81885, 84.17657,   0.00000, 0.00000, 358.34991, vw);
CreateDynamicObject(19366, -1554.12280, 2474.03027, 84.17657,   0.00000, 0.00000, 358.34991, vw);
CreateDynamicObject(19366, -1554.03247, 2477.16089, 84.17657,   0.00000, 0.00000, 358.34991, vw);
CreateDynamicObject(19366, -1550.75940, 2476.98511, 84.17660,   0.00000, 0.00000, 357.01791, vw);
CreateDynamicObject(19366, -1552.38416, 2477.02710, 85.90380,   0.00000, -89.50000, 358.34991, vw);
CreateDynamicObject(19366, -1552.44263, 2473.90332, 85.90380,   0.00000, -89.50000, 358.34991, vw);
CreateDynamicObject(19366, -1552.51855, 2470.79443, 85.90380,   0.00000, -89.50000, 358.34991, vw);
CreateDynamicObject(19366, -1552.61548, 2467.67261, 85.90380,   0.00000, -89.50000, 358.34991, vw);
CreateDynamicObject(19366, -1552.35938, 2478.58276, 84.19760,   0.00000, 0.00000, 269.01840, vw);
CreateDynamicObject(19366, -1552.74646, 2464.42578, 84.19760,   0.00000, 0.00000, 269.01840, vw);
CreateDynamicObject(18092, -1551.28333, 2471.99536, 86.43610,   0.00000, 0.00000, 268.72479, vw);
CreateDynamicObject(2232, -1551.10193, 2470.00415, 87.54442,   0.00000, 0.00000, 90.86589, vw);
CreateDynamicObject(2232, -1550.94666, 2473.94727, 87.54513,   0.00000, 0.00000, 86.75931, vw);
CreateDynamicObject(1958, -1551.13794, 2472.01929, 86.95540,   0.00000, 0.00000, 89.44435, vw);
CreateDynamicObject(1958, -1551.14050, 2471.70410, 86.95540,   0.00000, 0.00000, 89.44435, vw);
CreateDynamicObject(14877, -1552.27527, 2479.53174, 83.87960,   0.00000, 0.00000, 267.34509, vw);
CreateDynamicObject(10767, -1168.81006, 2759.28198, 41.33271,   0.00000, 0.00000, 339.57132, vw);
CreateDynamicObject(10766, -1216.34265, 2799.61255, 53.89560,   0.00000, 0.00000, 294.29169, vw);
CreateDynamicObject(10766, -1266.92224, 2776.13306, 54.00440,   0.19600, 0.00000, 114.72270, vw);
CreateDynamicObject(10766, -1243.47888, 2725.16748, 53.95820,   0.19600, 0.00000, 114.72270, vw);
CreateDynamicObject(10766, -1192.96936, 2748.25244, 53.59460,   0.00000, 0.00000, 294.29169, vw);
CreateDynamicObject(16098, -1196.86072, 2797.49146, 60.08735,   0.00000, 0.00000, 295.16324, vw);
CreateDynamicObject(4726, -1146.09485, 2825.49634, 54.96422,   0.00000, 0.00000, 201.23976, vw);
CreateDynamicObject(17656, -1375.08521, 2689.77515, 50.22589,   0.00000, 0.00000, 348.33398, vw);
CreateDynamicObject(17656, -1376.59399, 2682.90918, 49.71985,   0.00000, 0.00000, 348.33398, vw);
CreateDynamicObject(3453, -1519.42102, 2467.61865, 76.34673,   0.00000, 0.00000, 281.30042, vw);
CreateDynamicObject(3452, -1508.27856, 2471.92114, 73.91697,   0.00000, 0.00000, 89.80645, vw);
CreateDynamicObject(14781, -1513.08325, 2473.15942, 75.67017,   0.00000, 0.00000, 357.90643, vw);
CreateDynamicObject(5644, -1513.41345, 2467.67725, 59.77250,   0.00000, 0.00000, 358.46753, vw); // posible jaula
CreateDynamicObject(3452, -1518.97693, 2480.49561, 74.32301,   0.00000, 0.00000, 267.84717, vw); // posible jaula
CreateDynamicObject(5644, -1513.51758, 2467.87061, 84.68740,   0.00000, 0.00000, 358.87460, vw);// posible jaula
CreateDynamicObject(1388, -1512.66101, 2502.28003, 134.44757,   0.00000, 0.00000, 180.06554, vw);
CreateDynamicObject(1393, -1512.65308, 2462.60400, 137.67302,   0.00000, 0.00000, 0.00000, vw);
//CreateDynamicObject(5644, -1513.31665, 2467.86060, 81.14433,   0.00000, 90.00000, 178.46411, vw);// posible jaula
CreateDynamicObject(1391, -1512.43909, 2510.72510, 123.17380,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(19313, -1554.92798, 2468.53662, 85.80251,   0.00000, 0.00000, 267.76834, vw);
CreateDynamicObject(19313, -1544.24658, 2487.58105, 83.81651,   0.00000, 0.00000, 359.49594, vw);
CreateDynamicObject(19313, -1527.29285, 2487.46826, 83.81651,   0.00000, 0.00000, 359.49594, vw);
CreateDynamicObject(19366, -1520.19727, 2483.22754, 83.85999,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(19366, -1520.18079, 2485.99976, 83.85999,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(19366, -1520.18433, 2481.15405, 83.85999,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(1523, -1534.23364, 2487.52759, 82.71309,   0.00000, 0.00000, 178.98682, vw);
CreateDynamicObject(1523, -1537.27197, 2487.47046, 82.71309,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(19313, -1546.73267, 2487.54102, 83.81651,   0.00000, 0.00000, 359.49594, vw);
CreateDynamicObject(19313, -1554.24475, 2480.63452, 85.80251,   0.00000, 0.00000, 266.44400, vw);
CreateDynamicObject(19313, -1535.03064, 2461.33447, 83.81651,   0.00000, 0.00000, 359.49594, vw);
CreateDynamicObject(19608, -1552.35095, 2472.04956, 85.97644,   0.00000, 0.00000, 88.31789, vw);
CreateDynamicObject(19849, -1439.34717, 2583.54321, 54.87868,   0.00000, 0.00000, 270.53430, vw);
CreateDynamicObject(19604, -1420.78992, 2580.27075, 54.82196,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(19604, -1420.86938, 2584.26221, 54.82204,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(11490, -1450.15955, 2581.02490, 53.74462,   0.00000, 0.00000, 180.45229, vw);
CreateDynamicObject(1255, -1440.11829, 2588.45996, 55.37761,   0.00000, 0.00000, 89.30349, vw);
CreateDynamicObject(1255, -1435.38708, 2588.55127, 55.37761,   0.00000, 0.00000, 89.30349, vw);
CreateDynamicObject(1255, -1437.75269, 2588.50562, 55.37761,   0.00000, 0.00000, 89.30349, vw);
CreateDynamicObject(11491, -1450.28943, 2592.42773, 55.72468,   0.00000, 0.00000, 180.39963, vw);
CreateDynamicObject(19313, -1548.19067, 2461.52466, 83.81651,   0.00000, 0.00000, 359.49594, vw);
CreateDynamicObject(19688, -1528.44446, 2545.12402, 90.12032,   0.00000, 0.00000, 92.48182, vw);
CreateDynamicObject(19682, -1528.71521, 2565.85498, 78.84766,   0.00000, -23.47200, 283.19189, vw);
CreateDynamicObject(19701, -1531.99084, 2579.87329, 58.16330,   0.00000, 0.00000, 49.66807, vw);
CreateDynamicObject(19701, -1531.71082, 2580.10889, 68.17934,   0.00000, 0.00000, 49.66807, vw);
CreateDynamicObject(16776, -1532.49512, 2584.69238, 54.31734,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(19754, -1519.88147, 2539.18359, 90.66931,   0.00000, 0.00000, 86.36282, vw);
CreateDynamicObject(19752, -1518.32361, 2547.89502, 91.15550,   0.00000, 0.00000, 272.58630, vw);
CreateDynamicObject(19740, -1509.71667, 2549.31470, 91.11150,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(19740, -1497.43933, 2549.28979, 91.11150,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(19755, -1485.08264, 2549.24707, 90.71230,   0.00000, 8.01500, 359.49796, vw);
CreateDynamicObject(19740, -1400.27539, 2549.11938, 89.26636,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(19740, -1473.38513, 2549.19409, 89.26636,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(19740, -1461.20264, 2549.22388, 89.26636,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(19740, -1449.16553, 2549.17334, 89.26636,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(19740, -1436.76843, 2549.12158, 89.26636,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(19740, -1424.74341, 2549.12842, 89.26636,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(19740, -1412.59070, 2549.15015, 89.26636,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(7184, -1477.42480, 2471.69775, 49.34956,   0.00000, 0.00000, 269.34344, vw);
CreateDynamicObject(19701, -1393.40063, 2557.11206, 64.82961,   0.00000, 0.00000, 349.88300, vw);
CreateDynamicObject(19701, -1392.80688, 2557.05713, 84.87683,   0.00000, 0.00000, 349.88300, vw);
CreateDynamicObject(19701, -1393.21960, 2557.10522, 75.00787,   0.00000, 0.00000, 349.88300, vw);
CreateDynamicObject(19543, -1533.80981, 2635.75317, 54.90524,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(19543, -1508.11670, 2635.74219, 54.90524,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(19543, -1523.04150, 2635.70020, 54.90524,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(16091, -1612.36060, 2692.69995, 54.87885,   0.00000, 0.00000, 1.49474, vw);
CreateDynamicObject(19313, -1501.27966, 2659.22314, 57.95677,   0.00000, 0.00000, 269.99561, vw);
CreateDynamicObject(19313, -1534.11316, 2604.59644, 57.85575,   0.00000, 0.00000, 180.22871, vw);
CreateDynamicObject(19313, -1501.28943, 2649.21997, 57.95677,   0.00000, 0.00000, 269.99561, vw);
CreateDynamicObject(19313, -1501.31445, 2639.15039, 57.95677,   0.00000, 0.00000, 269.99561, vw);
CreateDynamicObject(19313, -1540.41675, 2659.47949, 57.95677,   0.00000, 0.00000, 269.42783, vw);
CreateDynamicObject(19313, -1508.40051, 2604.93481, 57.85575,   0.00000, 0.00000, 180.22871, vw);
CreateDynamicObject(19313, -1533.37427, 2666.18970, 57.85575,   0.00000, 0.00000, 180.22871, vw);
CreateDynamicObject(19313, -1501.29883, 2612.00415, 57.95677,   0.00000, 0.00000, 269.99561, vw);
CreateDynamicObject(19313, -1540.98755, 2611.55640, 57.95677,   0.00000, 0.00000, 269.42783, vw);
CreateDynamicObject(19313, -1540.79248, 2625.60864, 57.95677,   0.00000, 0.00000, 269.42783, vw);
CreateDynamicObject(19313, -1540.64539, 2639.47363, 57.95677,   0.00000, 0.00000, 269.42783, vw);
CreateDynamicObject(19313, -1540.54797, 2653.32007, 57.95677,   0.00000, 0.00000, 269.42783, vw);
CreateDynamicObject(19313, -1522.42200, 2604.85815, 57.85575,   0.00000, 0.00000, 180.22871, vw);
CreateDynamicObject(19313, -1508.39404, 2666.24609, 57.85575,   0.00000, 0.00000, 180.22871, vw);
CreateDynamicObject(19313, -1522.37476, 2666.21143, 57.85575,   0.00000, 0.00000, 180.22871, vw);
CreateDynamicObject(3819, -1525.23901, 2662.21753, 55.89971,   0.00000, 0.00000, 89.88281, vw);
CreateDynamicObject(3819, -1505.80811, 2654.09180, 55.89971,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(3819, -1505.92017, 2643.86743, 55.89971,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(3819, -1535.97388, 2643.45483, 55.89971,   0.00000, 0.00000, 178.78981, vw);
CreateDynamicObject(3819, -1535.61084, 2653.73389, 55.89971,   0.00000, 0.00000, 178.78981, vw);
CreateDynamicObject(3819, -1514.58862, 2662.36499, 55.89971,   0.00000, 0.00000, 89.88281, vw);
CreateDynamicObject(14781, -1520.18335, 2648.38062, 56.23708,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(14628, -1499.83582, 2625.81616, 62.41128,   0.00000, 0.00000, 271.39111, vw);
CreateDynamicObject(1634, -1564.95898, 2629.58862, 54.88264,   0.00000, 0.00000, 9.28362, vw);
CreateDynamicObject(3502, -1590.12256, 2618.47217, 64.51970,   24.50000, 2.00000, 269.68292, vw);
CreateDynamicObject(3502, -1545.43750, 2617.35693, 62.98812,   0.00000, 0.00000, 88.41410, vw);
CreateDynamicObject(3502, -1554.27148, 2617.60938, 62.98812,   0.00000, 0.00000, 88.41410, vw);
CreateDynamicObject(3502, -1598.37805, 2618.61572, 62.89013,   0.00000, 0.00000, 88.41410, vw);
CreateDynamicObject(3502, -1570.52234, 2618.06787, 64.51970,   24.50000, 2.00000, 88.51611, vw);
CreateDynamicObject(3502, -1562.72778, 2617.82520, 62.98810,   0.00000, 0.00000, 88.41410, vw);
CreateDynamicObject(3502, -1606.49182, 2618.83496, 63.50320,   10.00000, 0.00000, 88.41410, vw);
CreateDynamicObject(3502, -1633.55212, 2684.47559, 96.29090,   9.00000, 0.00000, 312.40488, vw);
CreateDynamicObject(3502, -1613.38013, 2619.79102, 66.34660,   37.50000, 0.00000, 75.23390, vw);
CreateDynamicObject(3502, -1619.61389, 2622.34106, 71.03625,   32.00000, 0.00000, 61.39629, vw);
CreateDynamicObject(3502, -1625.23572, 2626.13208, 75.29575,   32.00000, 0.00000, 48.55745, vw);
CreateDynamicObject(3502, -1629.88245, 2630.21533, 79.18265,   32.00000, 0.00000, 48.55745, vw);
CreateDynamicObject(3502, -1633.45837, 2634.58887, 82.86873,   32.00000, 0.00000, 20.92300, vw);
CreateDynamicObject(3502, -1636.18103, 2641.59033, 87.09040,   26.00000, 0.00000, 20.92300, vw);
CreateDynamicObject(3502, -1638.63293, 2647.57031, 89.60121,   15.50000, 0.00000, 20.92300, vw);
CreateDynamicObject(3502, -1641.60376, 2655.13647, 91.39870,   9.00000, 0.00000, 20.92300, vw);
CreateDynamicObject(3502, -1642.85559, 2663.29736, 92.66695,   9.00000, 0.00000, 356.91904, vw);
CreateDynamicObject(3502, -1641.83386, 2670.49951, 93.77699,   9.00000, 0.00000, 344.08011, vw);
CreateDynamicObject(3502, -1638.75549, 2678.04321, 94.96770,   9.00000, 0.00000, 330.09637, vw);
CreateDynamicObject(1634, -1630.83545, 2687.04150, 94.65131,   0.00000, 0.00000, 309.77603, vw);
CreateDynamicObject(3877, -1503.19751, 2618.81567, 54.88092,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(3877, -1503.33813, 2632.50513, 54.88475,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(3872, -1533.79150, 2469.03125, 91.14072,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(13666, -1525.91528, 2633.74805, 59.74581,   0.00000, 0.00000, 268.42197, vw);
CreateDynamicObject(1634, -1529.20715, 2632.30640, 54.30992,   0.00000, 0.00000, 82.22881, vw);
CreateDynamicObject(18102, -1550.50684, 2466.95093, 96.52102,   0.00000, 0.00000, 280.73065, vw);
CreateDynamicObject(18102, -1536.46252, 2470.50439, 96.52102,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(8493, -1564.83447, 2648.90674, 71.76344,   0.00000, 0.00000, 270.40503, vw);
CreateDynamicObject(16091, -1502.03845, 2625.57837, 54.87885,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(978, -1508.42542, 2682.68311, 56.25830,   0.00000, 0.00000, 342.12936, vw);
CreateDynamicObject(979, -1516.94312, 2678.15649, 55.71510,   0.00000, 0.00000, 152.48260, vw);
CreateDynamicObject(979, -1605.47864, 2687.60522, 54.90302,   0.00000, 0.00000, 179.45813, vw);
CreateDynamicObject(978, -1605.63562, 2697.67773, 54.84020,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(978, -1596.47083, 2697.68237, 54.84020,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(979, -1596.39783, 2687.53906, 54.90302,   0.00000, 0.00000, 179.45813, vw);
CreateDynamicObject(1634, -1592.14282, 2695.22876, 53.32428,   0.00000, 0.00000, 271.26187, vw);
CreateDynamicObject(1634, -1592.05029, 2690.01221, 53.32428,   0.00000, 0.00000, 271.26187, vw);
CreateDynamicObject(1634, -1592.09656, 2693.56299, 53.32428,   0.00000, 0.00000, 271.26187, vw);
CreateDynamicObject(1634, -1578.82874, 2690.29663, 53.32428,   0.00000, 0.00000, 93.61394, vw);
CreateDynamicObject(1634, -1579.11621, 2695.44312, 53.32428,   0.00000, 0.00000, 93.61394, vw);
CreateDynamicObject(1634, -1578.94543, 2692.37964, 53.32428,   0.00000, 0.00000, 93.61394, vw);
CreateDynamicObject(1225, -1586.68127, 2695.99365, 55.13689,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(1225, -1586.64209, 2688.86230, 55.13689,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(1225, -1584.15051, 2689.01270, 55.13689,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(1225, -1584.29785, 2691.45532, 55.13689,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(1225, -1586.61731, 2691.31519, 55.13689,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(1225, -1586.77209, 2693.88208, 55.13689,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(1225, -1584.57129, 2694.01489, 55.13689,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(1225, -1584.69775, 2696.11328, 55.13689,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(979, -1587.03943, 2687.43384, 54.90302,   0.00000, 0.00000, 179.45813, vw);
CreateDynamicObject(978, -1587.20654, 2697.69751, 54.84020,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(978, -1578.28503, 2697.65259, 55.04120,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(979, -1578.28662, 2687.35400, 55.30906,   0.00000, 0.00000, 179.45813, vw);
CreateDynamicObject(979, -1569.26147, 2687.24097, 55.71510,   0.00000, 0.00000, 179.45813, vw);
CreateDynamicObject(978, -1569.29883, 2697.65527, 55.54925,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(1225, -1555.81482, 2690.17041, 55.14422,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(1225, -1550.00562, 2689.10864, 55.23844,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(1225, -1551.29370, 2693.11865, 55.23844,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(978, -1560.05286, 2697.65820, 55.54925,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(979, -1559.92908, 2687.13965, 55.71510,   0.00000, 0.00000, 179.45813, vw);
CreateDynamicObject(978, -1551.42896, 2697.59790, 56.25830,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(979, -1550.73096, 2687.06128, 55.71510,   0.00000, 0.00000, 179.45813, vw);
CreateDynamicObject(979, -1541.94641, 2687.89795, 55.71510,   0.00000, 0.00000, 191.62093, vw);
CreateDynamicObject(978, -1542.50378, 2696.70972, 56.25830,   0.00000, 0.00000, 349.52893, vw);
CreateDynamicObject(978, -1533.70813, 2694.09253, 56.25830,   0.00000, 0.00000, 337.08109, vw);
CreateDynamicObject(979, -1533.30676, 2686.69067, 55.71510,   0.00000, 0.00000, 152.48260, vw);
CreateDynamicObject(978, -1525.11511, 2690.46191, 56.25830,   0.00000, 0.00000, 337.08109, vw);
CreateDynamicObject(979, -1525.02954, 2682.36279, 55.71510,   0.00000, 0.00000, 152.48260, vw);
CreateDynamicObject(978, -1516.91858, 2686.38257, 56.25830,   0.00000, 0.00000, 330.61404, vw);
CreateDynamicObject(979, -1483.88855, 2666.54419, 55.71510,   0.00000, 0.00000, 141.07965, vw);
CreateDynamicObject(979, -1508.55334, 2674.44458, 55.71510,   0.00000, 0.00000, 160.82407, vw);
CreateDynamicObject(978, -1476.85217, 2667.52393, 56.25830,   0.00000, 0.00000, 315.06662, vw);
CreateDynamicObject(11317, -1476.34766, 2705.10913, 65.73534,   0.00000, 0.00000, 91.36139, vw);
CreateDynamicObject(19449, -1447.08862, 2708.53149, 57.19283,   0.00000, 0.00000, 2.54096, vw);
CreateDynamicObject(19449, -1446.49219, 2691.02808, 55.95396,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(19449, -1446.74451, 2700.61426, 55.95396,   0.00000, 0.00000, 2.54096, vw);
CreateDynamicObject(19449, -1446.74451, 2700.61426, 58.73045,   0.00000, 0.00000, 2.54096, vw);
CreateDynamicObject(19449, -1447.26221, 2708.48071, 58.73045,   0.00000, 0.00000, 2.54096, vw);
CreateDynamicObject(19449, -1453.08606, 2712.40649, 61.84554,   0.00000, 0.00000, 274.29117, vw);
CreateDynamicObject(19449, -1456.30164, 2712.09766, 62.06104,   0.00000, 0.00000, 274.29117, vw);
CreateDynamicObject(19449, -1453.08606, 2712.40649, 62.78239,   0.00000, 0.00000, 274.29117, vw);
CreateDynamicObject(19449, -1456.30164, 2712.09766, 62.78239,   0.00000, 0.00000, 274.29117, vw);
CreateDynamicObject(19449, -1466.63037, 2711.10474, 62.78239,   0.00000, 0.00000, 274.29117, vw);
CreateDynamicObject(19449, -1466.63037, 2711.10474, 62.24628,   0.00000, 0.00000, 274.29117, vw);
CreateDynamicObject(19449, -1468.64709, 2710.88403, 62.24628,   0.00000, 0.00000, 274.29117, vw);
CreateDynamicObject(19449, -1468.64709, 2710.88403, 62.75638,   0.00000, 0.00000, 274.29117, vw);
CreateDynamicObject(19449, -1468.61829, 2702.89331, 57.17362,   0.00000, 0.00000, 271.53946, vw);
CreateDynamicObject(19449, -1468.24011, 2702.70532, 56.15342,   0.00000, 0.00000, 271.53946, vw);
CreateDynamicObject(19449, -1459.13098, 2702.96167, 56.15342,   0.00000, 0.00000, 271.53946, vw);
CreateDynamicObject(19449, -1453.37415, 2703.12598, 56.15342,   0.00000, 0.00000, 271.53946, vw);
CreateDynamicObject(19449, -1453.37415, 2703.12598, 57.17362,   0.00000, 0.00000, 271.53946, vw);
CreateDynamicObject(19449, -1463.02124, 2702.95703, 57.17362,   0.00000, 0.00000, 271.53946, vw);
CreateDynamicObject(3437, -1447.17419, 2686.07227, 60.56110,   0.00000, 0.00000, 0.83938, vw);
CreateDynamicObject(3437, -1486.75806, 2684.66333, 60.56110,   0.00000, 0.00000, 0.83938, vw);
CreateDynamicObject(3437, -1491.66003, 2684.70044, 60.56110,   0.00000, 0.00000, 0.83938, vw);
CreateDynamicObject(3437, -1504.77393, 2684.80200, 60.56110,   0.00000, 0.00000, 0.83938, vw);
CreateDynamicObject(3437, -1473.70923, 2685.26831, 60.56110,   0.00000, 0.00000, 0.83938, vw);
CreateDynamicObject(3437, -1460.42529, 2685.67017, 60.56110,   0.00000, 0.00000, 0.83938, vw);
CreateDynamicObject(14628, -1480.63403, 2683.59814, 67.50741,   0.00000, 0.00000, 181.82581, vw);
CreateDynamicObject(4601, -1335.09631, 2664.44873, 69.45493,   0.00000, 0.00000, 1.67194, vw);
CreateDynamicObject(19128, -1478.42712, 2613.45166, 57.77900,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(19128, -1478.45801, 2617.23975, 57.77900,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(19128, -1478.49036, 2621.16162, 57.77900,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(19128, -1478.49084, 2624.93970, 57.77900,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(19128, -1478.52075, 2628.53174, 57.77900,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(19128, -1478.54407, 2632.33911, 57.77900,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(19128, -1478.53918, 2636.31860, 57.77900,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(19128, -1478.55090, 2640.26245, 57.77900,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(19128, -1478.56848, 2641.18506, 57.77900,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(19128, -1482.33533, 2641.21362, 57.77900,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(19128, -1483.67102, 2641.23901, 57.77900,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(19128, -1483.70398, 2637.47070, 57.77900,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(19128, -1482.36548, 2637.53027, 57.77900,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(19128, -1482.19604, 2633.73755, 57.77900,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(19128, -1483.66382, 2633.67236, 57.77900,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(19128, -1483.59705, 2629.86475, 57.77900,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(19128, -1482.47070, 2629.91479, 57.77900,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(19128, -1482.42603, 2626.30884, 57.77900,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(19128, -1482.38110, 2622.67041, 57.77900,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(19128, -1482.33447, 2618.89429, 57.77900,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(19128, -1482.31091, 2616.98120, 57.77900,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(19128, -1483.49243, 2617.29956, 57.77900,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(19128, -1483.48291, 2621.07520, 57.77900,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(19128, -1483.68909, 2625.03857, 57.77900,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(19508, -1386.13721, 2650.94849, 75.01280,   0.00000, 0.00000, 359.48477, vw);
CreateDynamicObject(1536, -1391.17761, 2653.09961, 72.49370,   0.00000, 0.00000, 271.30130, vw);
CreateDynamicObject(2532, -1382.78247, 2644.99438, 72.76010,   0.00000, 0.00000, 183.58369, vw);
CreateDynamicObject(2532, -1381.71729, 2645.02295, 72.76010,   0.00000, 0.00000, 183.58369, vw);
CreateDynamicObject(2541, -1383.79468, 2645.49121, 72.69450,   0.00000, 0.00000, 181.54468, vw);
CreateDynamicObject(2596, -1379.75903, 2650.89600, 74.64039,   0.00000, 0.00000, 276.83786, vw);
CreateDynamicObject(2681, -1386.84009, 2645.48462, 72.79737,   0.00000, 0.00000, 181.59221, vw);
CreateDynamicObject(2681, -1386.02722, 2645.55811, 72.79737,   0.00000, 0.00000, 181.59221, vw);
CreateDynamicObject(2755, -1385.27368, 2646.51660, 74.15819,   0.00000, 0.00000, 275.25366, vw);
CreateDynamicObject(1594, -1388.34155, 2655.09937, 73.21630,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(2683, -1383.03418, 2655.27124, 73.90480,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(2683, -1381.78845, 2655.25000, 73.90480,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(2683, -1380.31201, 2655.37329, 73.90480,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(1536, -1379.79663, 2655.19092, 72.59849,   0.00000, 0.00000, 269.58902, vw);
CreateDynamicObject(11686, -1382.08423, 2655.43042, 72.66611,   0.00000, 0.00000, 359.59393, vw);
CreateDynamicObject(8355, -1391.24805, 2664.35742, 6.51128,   89.50000, -88.00000, 357.62463, vw);
CreateDynamicObject(8355, -1379.09900, 2662.27856, 8.87230,   89.50000, -88.00000, 176.65340, vw);
CreateDynamicObject(19454, -1386.49341, 2644.84399, 73.18952,   0.00000, 0.00000, 271.10153, vw);
CreateDynamicObject(1545, -1382.48499, 2657.29810, 74.08518,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(2826, -1388.99915, 2647.35449, 72.76519,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(2826, -1389.58008, 2646.94409, 72.76519,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(2811, -1390.79724, 2651.54150, 72.76564,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(2811, -1390.75232, 2653.07153, 72.76588,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(2860, -1388.32397, 2655.00415, 73.60720,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(2964, -1389.34900, 2649.80078, 72.76573,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(2291, -1384.35376, 2651.97510, 72.76750,   0.00000, 0.00000, 93.92155, vw);
CreateDynamicObject(2291, -1381.65088, 2649.11670, 72.76750,   0.00000, 0.00000, 186.55534, vw);
CreateDynamicObject(2291, -1382.68579, 2648.97876, 72.76750,   0.00000, 0.00000, 186.55534, vw);
CreateDynamicObject(2291, -1384.19006, 2649.89673, 72.76750,   0.00000, 0.00000, 94.41074, vw);
CreateDynamicObject(2291, -1384.27795, 2650.93066, 72.76750,   0.00000, 0.00000, 93.92155, vw);
CreateDynamicObject(1536, -1399.91528, 2647.99048, 54.72208,   0.00000, 0.00000, 91.34611, vw);
CreateDynamicObject(978, -1499.63525, 2680.38525, 56.25830,   0.00000, 0.00000, 348.57220, vw);
CreateDynamicObject(979, -1499.57568, 2672.68677, 55.71510,   0.00000, 0.00000, 175.78458, vw);
CreateDynamicObject(978, -1491.69312, 2677.82788, 56.25830,   0.00000, 0.00000, 335.95941, vw);
CreateDynamicObject(979, -1491.81506, 2671.05762, 55.71510,   0.00000, 0.00000, 159.79182, vw);
CreateDynamicObject(978, -1483.68018, 2673.27246, 56.25830,   0.00000, 0.00000, 324.54413, vw);
CreateDynamicObject(16091, -1476.87109, 2663.32153, 54.82966,   0.00000, 0.00000, 278.58121, vw);
CreateDynamicObject(19588, -1483.88782, 2491.93506, 79.00580,   0.00000, 29.00000, 0.00000, vw);
CreateDynamicObject(1634, -1529.70935, 2617.22290, 54.88264,   0.00000, 0.00000, 89.01654, vw);
CreateDynamicObject(620, -1487.75854, 2539.58105, 55.55125,   0.00000, 0.00000, 0.00000, vw);
CreateDynamicObject(620, -1503.23853, 2682.80518, 55.55125,   0.00000, 0.00000, 0.00000, vw);
//AUTOS
VCA[0] = CreateVehicle(451, -1467.7279, 2697.5601, 61.2070, 198.1040, -1, -1, 100);
VCA[1] = CreateVehicle(451, -1458.3350, 2699.2703, 61.2070, 198.1040, -1, -1, 100);
VCA[2] = CreateVehicle(506, -1493.8455, 2695.2073, 61.2280, 210.3298, -1, -1, 100);
VCA[3] = CreateVehicle(506, -1498.4299, 2694.8950, 61.2280, 210.3298, -1, -1, 100);
VCA[4] = CreateVehicle(411, -1451.9058, 2700.9900, 61.1217, 189.8636, -1, -1, 100);
VCA[5] = CreateVehicle(541, -1457.8998, 2695.9448, 55.3250, 180.7977, -1, -1, 100);
VCA[6] = CreateVehicle(541, -1453.0402, 2695.4211, 55.3250, 180.7977, -1, -1, 100);
VCA[7] = CreateVehicle(545, -1469.3733, 2694.3066, 55.6718, 183.9775, -1, -1, 100);
VCA[8] = CreateVehicle(545, -1464.6278, 2694.4341, 55.6718, 183.9775, -1, -1, 100);
VCA[9] = CreateVehicle(560, -1477.6693, 2692.5586, 55.4300, 182.2210, -1, -1, 100);
VCA[10] = CreateVehicle(560, -1483.5630, 2692.2241, 55.4300, 182.2210, -1, -1, 100);
VCA[11] = CreateVehicle(557, -1498.7484, 2693.3816, 55.9336, 181.4674, -1, -1, 100);
VCA[12] = CreateVehicle(571, -1617.3679, 2693.3655, 55.1393, 266.3611, -1, -1, 100);
VCA[13] = CreateVehicle(571, -1614.5775, 2695.1450, 55.1393, 266.3611, -1, -1, 100);
VCA[14] = CreateVehicle(571, -1614.6683, 2693.0037, 55.1393, 266.3611, -1, -1, 100);
VCA[15] = CreateVehicle(571, -1614.8080, 2691.1069, 55.1393, 266.3611, -1, -1, 100);
VCA[16] = CreateVehicle(571, -1614.9601, 2689.0564, 55.1393, 266.3611, -1, -1, 100);
VCA[17] = CreateVehicle(571, -1617.5333, 2691.1355, 55.1393, 266.3611, -1, -1, 100);
VCA[18] = CreateVehicle(471, -1452.2166, 2629.7434, 55.2341, 0.0000, 0, 0, 100); //POSIBLE NO AUTO CONSEN
VCA[19] = CreateVehicle(471, -1446.3499, 2629.6401, 55.2341, 0.0000, 0, 0, 100); //POSIBLE NO AUTO CONSEN
VCA[20] = CreateVehicle(471, -1449.2023, 2629.7590, 55.2341, 0.0000, 0, 0, 100); //POSIBLE NO AUTO CONSEN
VCA[21] = CreateVehicle(411, -1405.7900, 2631.6616, 55.3222, 0.0000, 0, 0, 100); //POSIBLE AUTO CONSEN
VCA[22] = CreateVehicle(411, -1349.4589, 2674.9797, 50.2168, 121.9536, 0, 0, 100); //POSIBLE AUTO CONSEN
VCA[23] = CreateVehicle(424, -1347.4839, 2671.2583, 50.2417, 122.4949, 0, 0, 100); // Posible Autos no Conse
VCA[24] = CreateVehicle(425, -1144.4402, 2823.4534, 57.9261, 197.8477, -1, -1, 100);
VCA[25] = CreateVehicle(520, -1212.4149, 2788.1355, 57.7641, 204.6113, -1, -1, 100);
VCA[26] = CreateVehicle(520, -1179.5817, 2802.3281, 57.7641, 204.6113, -1, -1, 100);
VCA[27] = CreateVehicle(447, -1488.5358, 2468.6133, 75.3449, 267.2776, -1, -1, 100); // Posible Autos no Conse
VCA[28] = CreateVehicle(468, -1512.1398, 2606.7712, 55.8129, 0.0000, 0, 0, 100); // Posible Autos no Conse
VCA[29] = CreateVehicle(468, -1507.5823, 2606.6504, 55.8129, 0.0000, 0, 0, 100); // Posible Autos no Conse
VCA[30] = CreateVehicle(468, -1509.0317, 2606.6326, 55.8129, 0.0000, 0, 0, 100); // Posible Autos no Conse
VCA[31] = CreateVehicle(468, -1510.6415, 2606.6934, 55.8129, 0.0000, 0, 0, 100); // Posible Autos no Conse
VCA[32] = CreateVehicle(424, -1466.8105, 2588.9604, 55.5781, 0.0000, -1, -1, 100);
VCA[33] = CreateVehicle(424, -1459.1776, 2589.0300, 55.5781, 0.0000, -1, -1, 100);
//DAMOS VIRTUALWORLD A LOS AUTOS
SetVehicleVirtualWorld(VCA[0], vw);
SetVehicleVirtualWorld(VCA[1], vw);
SetVehicleVirtualWorld(VCA[2], vw);
SetVehicleVirtualWorld(VCA[3], vw);
SetVehicleVirtualWorld(VCA[4], vw);
SetVehicleVirtualWorld(VCA[5], vw);
SetVehicleVirtualWorld(VCA[6], vw);
SetVehicleVirtualWorld(VCA[7], vw);
SetVehicleVirtualWorld(VCA[8], vw);
SetVehicleVirtualWorld(VCA[9], vw);
SetVehicleVirtualWorld(VCA[10], vw);
SetVehicleVirtualWorld(VCA[11], vw);
SetVehicleVirtualWorld(VCA[12], vw);
SetVehicleVirtualWorld(VCA[13], vw);
SetVehicleVirtualWorld(VCA[14], vw);
SetVehicleVirtualWorld(VCA[15], vw);
SetVehicleVirtualWorld(VCA[16], vw);
SetVehicleVirtualWorld(VCA[17], vw);
SetVehicleVirtualWorld(VCA[18], vw);
SetVehicleVirtualWorld(VCA[19], vw);
SetVehicleVirtualWorld(VCA[20], vw);
SetVehicleVirtualWorld(VCA[21], vw);
SetVehicleVirtualWorld(VCA[22], vw);
SetVehicleVirtualWorld(VCA[23], vw);
SetVehicleVirtualWorld(VCA[24], vw);
SetVehicleVirtualWorld(VCA[25], vw);
SetVehicleVirtualWorld(VCA[26], vw);
SetVehicleVirtualWorld(VCA[27], vw);
SetVehicleVirtualWorld(VCA[28], vw);
SetVehicleVirtualWorld(VCA[29], vw);
SetVehicleVirtualWorld(VCA[30], vw);
SetVehicleVirtualWorld(VCA[31], vw);
SetVehicleVirtualWorld(VCA[32], vw);
SetVehicleVirtualWorld(VCA[33], vw);
	return 1;
}
strtok(const string[], &index)
{
   new length = strlen(string);
   while ((index < length) && (string[index] <= ' '))
   {
      index++;
   }
   new offset = index;
   new result[20];
   while ((index < length) && (string[index] > ' ') && ((index - offset) < (sizeof(result) - 1)))
   {
      result[index - offset] = string[index];
      index++;
   }
   result[index - offset] = EOS;
   return result;
}









